{"ast":null,"code":"import _classCallCheck from \"/mnt/c/Users/francesco/Desktop/material-angular-dashboard/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/mnt/c/Users/francesco/Desktop/material-angular-dashboard/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { coerceElement, coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { ɵɵdefineInjectable, Injectable, ɵɵinject, EventEmitter, Directive, ElementRef, NgZone, Output, Input, NgModule } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Factory that creates a new MutationObserver and allows us to stub it out in unit tests.\n * @docs-private\n */\n\nimport * as ɵngcc0 from '@angular/core';\n\nvar MutationObserverFactory =\n/** @class */\nfunction () {\n  var MutationObserverFactory = /*#__PURE__*/function () {\n    function MutationObserverFactory() {\n      _classCallCheck(this, MutationObserverFactory);\n    }\n\n    _createClass(MutationObserverFactory, [{\n      key: \"create\",\n      value: function create(callback) {\n        return typeof MutationObserver === 'undefined' ? null : new MutationObserver(callback);\n      }\n    }]);\n\n    return MutationObserverFactory;\n  }();\n\n  MutationObserverFactory.ɵfac = function MutationObserverFactory_Factory(t) {\n    return new (t || MutationObserverFactory)();\n  };\n\n  MutationObserverFactory.ɵprov = ɵɵdefineInjectable({\n    factory: function MutationObserverFactory_Factory() {\n      return new MutationObserverFactory();\n    },\n    token: MutationObserverFactory,\n    providedIn: \"root\"\n  });\n  /*@__PURE__*/\n\n  (function () {\n    ɵngcc0.ɵsetClassMetadata(MutationObserverFactory, [{\n      type: Injectable,\n      args: [{\n        providedIn: 'root'\n      }]\n    }], null, null);\n  })();\n\n  return MutationObserverFactory;\n}();\n/** An injectable service that allows watching elements for changes to their content. */\n\n\nvar ContentObserver =\n/** @class */\nfunction () {\n  var ContentObserver = /*#__PURE__*/function () {\n    function ContentObserver(_mutationObserverFactory) {\n      _classCallCheck(this, ContentObserver);\n\n      this._mutationObserverFactory = _mutationObserverFactory;\n      /** Keeps track of the existing MutationObservers so they can be reused. */\n\n      this._observedElements = new Map();\n    }\n\n    _createClass(ContentObserver, [{\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        var _this = this;\n\n        this._observedElements.forEach(function (_, element) {\n          return _this._cleanupObserver(element);\n        });\n      }\n    }, {\n      key: \"observe\",\n      value: function observe(elementOrRef) {\n        var _this2 = this;\n\n        var element = coerceElement(elementOrRef);\n        return new Observable(function (observer) {\n          var stream = _this2._observeElement(element);\n\n          var subscription = stream.subscribe(observer);\n          return function () {\n            subscription.unsubscribe();\n\n            _this2._unobserveElement(element);\n          };\n        });\n      }\n      /**\n       * Observes the given element by using the existing MutationObserver if available, or creating a\n       * new one if not.\n       */\n\n    }, {\n      key: \"_observeElement\",\n      value: function _observeElement(element) {\n        if (!this._observedElements.has(element)) {\n          var stream = new Subject();\n\n          var observer = this._mutationObserverFactory.create(function (mutations) {\n            return stream.next(mutations);\n          });\n\n          if (observer) {\n            observer.observe(element, {\n              characterData: true,\n              childList: true,\n              subtree: true\n            });\n          }\n\n          this._observedElements.set(element, {\n            observer: observer,\n            stream: stream,\n            count: 1\n          });\n        } else {\n          this._observedElements.get(element).count++;\n        }\n\n        return this._observedElements.get(element).stream;\n      }\n      /**\n       * Un-observes the given element and cleans up the underlying MutationObserver if nobody else is\n       * observing this element.\n       */\n\n    }, {\n      key: \"_unobserveElement\",\n      value: function _unobserveElement(element) {\n        if (this._observedElements.has(element)) {\n          this._observedElements.get(element).count--;\n\n          if (!this._observedElements.get(element).count) {\n            this._cleanupObserver(element);\n          }\n        }\n      }\n      /** Clean up the underlying MutationObserver for the specified element. */\n\n    }, {\n      key: \"_cleanupObserver\",\n      value: function _cleanupObserver(element) {\n        if (this._observedElements.has(element)) {\n          var _this$_observedElemen = this._observedElements.get(element),\n              observer = _this$_observedElemen.observer,\n              stream = _this$_observedElemen.stream;\n\n          if (observer) {\n            observer.disconnect();\n          }\n\n          stream.complete();\n\n          this._observedElements.delete(element);\n        }\n      }\n    }]);\n\n    return ContentObserver;\n  }();\n\n  ContentObserver.ɵfac = function ContentObserver_Factory(t) {\n    return new (t || ContentObserver)(ɵngcc0.ɵɵinject(MutationObserverFactory));\n  };\n\n  ContentObserver.ɵprov = ɵɵdefineInjectable({\n    factory: function ContentObserver_Factory() {\n      return new ContentObserver(ɵɵinject(MutationObserverFactory));\n    },\n    token: ContentObserver,\n    providedIn: \"root\"\n  });\n\n  ContentObserver.ctorParameters = function () {\n    return [{\n      type: MutationObserverFactory\n    }];\n  };\n  /*@__PURE__*/\n\n\n  (function () {\n    ɵngcc0.ɵsetClassMetadata(ContentObserver, [{\n      type: Injectable,\n      args: [{\n        providedIn: 'root'\n      }]\n    }], function () {\n      return [{\n        type: MutationObserverFactory\n      }];\n    }, null);\n  })();\n\n  return ContentObserver;\n}();\n/**\n * Directive that triggers a callback whenever the content of\n * its associated element has changed.\n */\n\n\nvar CdkObserveContent =\n/** @class */\nfunction () {\n  var CdkObserveContent = /*#__PURE__*/function () {\n    function CdkObserveContent(_contentObserver, _elementRef, _ngZone) {\n      _classCallCheck(this, CdkObserveContent);\n\n      this._contentObserver = _contentObserver;\n      this._elementRef = _elementRef;\n      this._ngZone = _ngZone;\n      /** Event emitted for each change in the element's content. */\n\n      this.event = new EventEmitter();\n      this._disabled = false;\n      this._currentSubscription = null;\n    }\n    /**\n     * Whether observing content is disabled. This option can be used\n     * to disconnect the underlying MutationObserver until it is needed.\n     */\n\n\n    _createClass(CdkObserveContent, [{\n      key: \"ngAfterContentInit\",\n      value: function ngAfterContentInit() {\n        if (!this._currentSubscription && !this.disabled) {\n          this._subscribe();\n        }\n      }\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        this._unsubscribe();\n      }\n    }, {\n      key: \"_subscribe\",\n      value: function _subscribe() {\n        var _this3 = this;\n\n        this._unsubscribe();\n\n        var stream = this._contentObserver.observe(this._elementRef); // TODO(mmalerba): We shouldn't be emitting on this @Output() outside the zone.\n        // Consider brining it back inside the zone next time we're making breaking changes.\n        // Bringing it back inside can cause things like infinite change detection loops and changed\n        // after checked errors if people's code isn't handling it properly.\n\n\n        this._ngZone.runOutsideAngular(function () {\n          _this3._currentSubscription = (_this3.debounce ? stream.pipe(debounceTime(_this3.debounce)) : stream).subscribe(_this3.event);\n        });\n      }\n    }, {\n      key: \"_unsubscribe\",\n      value: function _unsubscribe() {\n        if (this._currentSubscription) {\n          this._currentSubscription.unsubscribe();\n        }\n      }\n    }, {\n      key: \"disabled\",\n      get: function get() {\n        return this._disabled;\n      },\n      set: function set(value) {\n        this._disabled = coerceBooleanProperty(value);\n        this._disabled ? this._unsubscribe() : this._subscribe();\n      }\n      /** Debounce interval for emitting the changes. */\n\n    }, {\n      key: \"debounce\",\n      get: function get() {\n        return this._debounce;\n      },\n      set: function set(value) {\n        this._debounce = coerceNumberProperty(value);\n\n        this._subscribe();\n      }\n    }]);\n\n    return CdkObserveContent;\n  }();\n\n  CdkObserveContent.ɵfac = function CdkObserveContent_Factory(t) {\n    return new (t || CdkObserveContent)(ɵngcc0.ɵɵdirectiveInject(ContentObserver), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n  };\n\n  CdkObserveContent.ɵdir = ɵngcc0.ɵɵdefineDirective({\n    type: CdkObserveContent,\n    selectors: [[\"\", \"cdkObserveContent\", \"\"]],\n    inputs: {\n      disabled: [\"cdkObserveContentDisabled\", \"disabled\"],\n      debounce: \"debounce\"\n    },\n    outputs: {\n      event: \"cdkObserveContent\"\n    },\n    exportAs: [\"cdkObserveContent\"]\n  });\n\n  CdkObserveContent.ctorParameters = function () {\n    return [{\n      type: ContentObserver\n    }, {\n      type: ElementRef\n    }, {\n      type: NgZone\n    }];\n  };\n\n  CdkObserveContent.propDecorators = {\n    event: [{\n      type: Output,\n      args: ['cdkObserveContent']\n    }],\n    disabled: [{\n      type: Input,\n      args: ['cdkObserveContentDisabled']\n    }],\n    debounce: [{\n      type: Input\n    }]\n  };\n  /*@__PURE__*/\n\n  (function () {\n    ɵngcc0.ɵsetClassMetadata(CdkObserveContent, [{\n      type: Directive,\n      args: [{\n        selector: '[cdkObserveContent]',\n        exportAs: 'cdkObserveContent'\n      }]\n    }], function () {\n      return [{\n        type: ContentObserver\n      }, {\n        type: ɵngcc0.ElementRef\n      }, {\n        type: ɵngcc0.NgZone\n      }];\n    }, {\n      event: [{\n        type: Output,\n        args: ['cdkObserveContent']\n      }],\n      disabled: [{\n        type: Input,\n        args: ['cdkObserveContentDisabled']\n      }],\n      debounce: [{\n        type: Input\n      }]\n    });\n  })();\n\n  return CdkObserveContent;\n}();\n\nvar ObserversModule =\n/** @class */\nfunction () {\n  var ObserversModule = function ObserversModule() {\n    _classCallCheck(this, ObserversModule);\n  };\n\n  ObserversModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n    type: ObserversModule\n  });\n  ObserversModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n    factory: function ObserversModule_Factory(t) {\n      return new (t || ObserversModule)();\n    },\n    providers: [MutationObserverFactory]\n  });\n\n  (function () {\n    (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ObserversModule, {\n      declarations: [CdkObserveContent],\n      exports: [CdkObserveContent]\n    });\n  })();\n  /*@__PURE__*/\n\n\n  (function () {\n    ɵngcc0.ɵsetClassMetadata(ObserversModule, [{\n      type: NgModule,\n      args: [{\n        exports: [CdkObserveContent],\n        declarations: [CdkObserveContent],\n        providers: [MutationObserverFactory]\n      }]\n    }], null, null);\n  })();\n\n  return ObserversModule;\n}();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { CdkObserveContent, ContentObserver, MutationObserverFactory, ObserversModule };","map":{"version":3,"sources":["../../../../../../src/cdk/observers/observe-content.ts","../../../../../../src/cdk/observers/public-api.ts","../../../../../../src/cdk/observers/index.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  coerceBooleanProperty,\n  coerceNumberProperty,\n  coerceElement,\n  BooleanInput\n} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Injectable,\n  Input,\n  NgModule,\n  NgZone,\n  OnDestroy,\n  Output,\n} from '@angular/core';\nimport {Observable, Subject, Subscription, Observer} from 'rxjs';\nimport {debounceTime} from 'rxjs/operators';\n\n/**\n * Factory that creates a new MutationObserver and allows us to stub it out in unit tests.\n * @docs-private\n */\n@Injectable({providedIn: 'root'})\nexport class MutationObserverFactory {\n  create(callback: MutationCallback): MutationObserver | null {\n    return typeof MutationObserver === 'undefined' ? null : new MutationObserver(callback);\n  }\n}\n\n\n/** An injectable service that allows watching elements for changes to their content. */\n@Injectable({providedIn: 'root'})\nexport class ContentObserver implements OnDestroy {\n  /** Keeps track of the existing MutationObservers so they can be reused. */\n  private _observedElements = new Map<Element, {\n    observer: MutationObserver | null,\n    stream: Subject<MutationRecord[]>,\n    count: number\n  }>();\n\n  constructor(private _mutationObserverFactory: MutationObserverFactory) {}\n\n  ngOnDestroy() {\n    this._observedElements.forEach((_, element) => this._cleanupObserver(element));\n  }\n\n  /**\n   * Observe content changes on an element.\n   * @param element The element to observe for content changes.\n   */\n  observe(element: Element): Observable<MutationRecord[]>;\n\n  /**\n   * Observe content changes on an element.\n   * @param element The element to observe for content changes.\n   */\n  observe(element: ElementRef<Element>): Observable<MutationRecord[]>;\n\n  observe(elementOrRef: Element | ElementRef<Element>): Observable<MutationRecord[]> {\n    const element = coerceElement(elementOrRef);\n\n    return new Observable((observer: Observer<MutationRecord[]>) => {\n      const stream = this._observeElement(element);\n      const subscription = stream.subscribe(observer);\n\n      return () => {\n        subscription.unsubscribe();\n        this._unobserveElement(element);\n      };\n    });\n  }\n\n  /**\n   * Observes the given element by using the existing MutationObserver if available, or creating a\n   * new one if not.\n   */\n  private _observeElement(element: Element): Subject<MutationRecord[]> {\n    if (!this._observedElements.has(element)) {\n      const stream = new Subject<MutationRecord[]>();\n      const observer = this._mutationObserverFactory.create(mutations => stream.next(mutations));\n      if (observer) {\n        observer.observe(element, {\n          characterData: true,\n          childList: true,\n          subtree: true\n        });\n      }\n      this._observedElements.set(element, {observer, stream, count: 1});\n    } else {\n      this._observedElements.get(element)!.count++;\n    }\n    return this._observedElements.get(element)!.stream;\n  }\n\n  /**\n   * Un-observes the given element and cleans up the underlying MutationObserver if nobody else is\n   * observing this element.\n   */\n  private _unobserveElement(element: Element) {\n    if (this._observedElements.has(element)) {\n      this._observedElements.get(element)!.count--;\n      if (!this._observedElements.get(element)!.count) {\n        this._cleanupObserver(element);\n      }\n    }\n  }\n\n  /** Clean up the underlying MutationObserver for the specified element. */\n  private _cleanupObserver(element: Element) {\n    if (this._observedElements.has(element)) {\n      const {observer, stream} = this._observedElements.get(element)!;\n      if (observer) {\n        observer.disconnect();\n      }\n      stream.complete();\n      this._observedElements.delete(element);\n    }\n  }\n}\n\n\n/**\n * Directive that triggers a callback whenever the content of\n * its associated element has changed.\n */\n@Directive({\n  selector: '[cdkObserveContent]',\n  exportAs: 'cdkObserveContent',\n})\nexport class CdkObserveContent implements AfterContentInit, OnDestroy {\n  /** Event emitted for each change in the element's content. */\n  @Output('cdkObserveContent') event = new EventEmitter<MutationRecord[]>();\n\n  /**\n   * Whether observing content is disabled. This option can be used\n   * to disconnect the underlying MutationObserver until it is needed.\n   */\n  @Input('cdkObserveContentDisabled')\n  get disabled() { return this._disabled; }\n  set disabled(value: any) {\n    this._disabled = coerceBooleanProperty(value);\n    this._disabled ? this._unsubscribe() : this._subscribe();\n  }\n  private _disabled = false;\n\n  /** Debounce interval for emitting the changes. */\n  @Input()\n  get debounce(): number { return this._debounce; }\n  set debounce(value: number) {\n    this._debounce = coerceNumberProperty(value);\n    this._subscribe();\n  }\n  private _debounce: number;\n\n  private _currentSubscription: Subscription | null = null;\n\n  constructor(private _contentObserver: ContentObserver,\n              private _elementRef: ElementRef<HTMLElement>,\n              private _ngZone: NgZone) {}\n\n  ngAfterContentInit() {\n    if (!this._currentSubscription && !this.disabled) {\n      this._subscribe();\n    }\n  }\n\n  ngOnDestroy() {\n    this._unsubscribe();\n  }\n\n  private _subscribe() {\n    this._unsubscribe();\n    const stream = this._contentObserver.observe(this._elementRef);\n\n    // TODO(mmalerba): We shouldn't be emitting on this @Output() outside the zone.\n    // Consider brining it back inside the zone next time we're making breaking changes.\n    // Bringing it back inside can cause things like infinite change detection loops and changed\n    // after checked errors if people's code isn't handling it properly.\n    this._ngZone.runOutsideAngular(() => {\n      this._currentSubscription =\n          (this.debounce ? stream.pipe(debounceTime(this.debounce)) : stream).subscribe(this.event);\n    });\n  }\n\n  private _unsubscribe() {\n    if (this._currentSubscription) {\n      this._currentSubscription.unsubscribe();\n    }\n  }\n\n  static ngAcceptInputType_disabled: BooleanInput;\n  static ngAcceptInputType_debounce: BooleanInput;\n}\n\n\n@NgModule({\n  exports: [CdkObserveContent],\n  declarations: [CdkObserveContent],\n  providers: [MutationObserverFactory]\n})\nexport class ObserversModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './observe-content';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]},"metadata":{},"sourceType":"module"}