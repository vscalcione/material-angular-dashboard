{"ast":null,"code":"import _classCallCheck from \"/mnt/c/Users/francesco/Desktop/material-angular-dashboard/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/mnt/c/Users/francesco/Desktop/material-angular-dashboard/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { Overlay, OverlayModule } from '@angular/cdk/overlay';\nimport { AriaDescriber, FocusMonitor, A11yModule } from '@angular/cdk/a11y';\nimport { CommonModule } from '@angular/common';\nimport { InjectionToken, Directive, ElementRef, ViewContainerRef, NgZone, Inject, Optional, Input, Component, ViewEncapsulation, ChangeDetectionStrategy, ChangeDetectorRef, NgModule } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport { ScrollDispatcher, CdkScrollableModule } from '@angular/cdk/scrolling';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\nimport { Breakpoints, BreakpointObserver } from '@angular/cdk/layout';\nimport { normalizePassiveListenerOptions, Platform } from '@angular/cdk/platform';\nimport { ComponentPortal } from '@angular/cdk/portal';\nimport { Subject } from 'rxjs';\nimport { takeUntil, take } from 'rxjs/operators';\nimport { trigger, state, style, transition, animate, keyframes } from '@angular/animations';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Animations used by MatTooltip.\n * @docs-private\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/overlay';\nimport * as ɵngcc2 from '@angular/cdk/scrolling';\nimport * as ɵngcc3 from '@angular/cdk/platform';\nimport * as ɵngcc4 from '@angular/cdk/a11y';\nimport * as ɵngcc5 from '@angular/cdk/bidi';\nimport * as ɵngcc6 from '@angular/cdk/layout';\nimport * as ɵngcc7 from '@angular/common';\nvar matTooltipAnimations = {\n  /** Animation that transitions a tooltip in and out. */\n  tooltipState: trigger('state', [state('initial, void, hidden', style({\n    opacity: 0,\n    transform: 'scale(0)'\n  })), state('visible', style({\n    transform: 'scale(1)'\n  })), transition('* => visible', animate('200ms cubic-bezier(0, 0, 0.2, 1)', keyframes([style({\n    opacity: 0,\n    transform: 'scale(0)',\n    offset: 0\n  }), style({\n    opacity: 0.5,\n    transform: 'scale(0.99)',\n    offset: 0.5\n  }), style({\n    opacity: 1,\n    transform: 'scale(1)',\n    offset: 1\n  })]))), transition('* => hidden', animate('100ms cubic-bezier(0, 0, 0.2, 1)', style({\n    opacity: 0\n  })))])\n};\n/** Time in ms to throttle repositioning after scroll events. */\n\nvar SCROLL_THROTTLE_MS = 20;\n/** CSS class that will be attached to the overlay panel. */\n\nvar TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\n/** Options used to bind passive event listeners. */\n\nvar passiveListenerOptions = normalizePassiveListenerOptions({\n  passive: true\n});\n/**\n * Time between the user putting the pointer on a tooltip\n * trigger and the long press event being fired.\n */\n\nvar LONGPRESS_DELAY = 500;\n/**\n * Creates an error to be thrown if the user supplied an invalid tooltip position.\n * @docs-private\n */\n\nfunction getMatTooltipInvalidPositionError(position) {\n  return Error(\"Tooltip position \\\"\".concat(position, \"\\\" is invalid.\"));\n}\n/** Injection token that determines the scroll handling while a tooltip is visible. */\n\n\nvar MAT_TOOLTIP_SCROLL_STRATEGY = new InjectionToken('mat-tooltip-scroll-strategy');\n/** @docs-private */\n\nfunction MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY(overlay) {\n  return function () {\n    return overlay.scrollStrategies.reposition({\n      scrollThrottle: SCROLL_THROTTLE_MS\n    });\n  };\n}\n/** @docs-private */\n\n\nvar MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY\n};\n/** Injection token to be used to override the default options for `matTooltip`. */\n\nvar MAT_TOOLTIP_DEFAULT_OPTIONS = new InjectionToken('mat-tooltip-default-options', {\n  providedIn: 'root',\n  factory: MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY\n});\n/** @docs-private */\n\nfunction MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY() {\n  return {\n    showDelay: 0,\n    hideDelay: 0,\n    touchendHideDelay: 1500\n  };\n}\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.io/design/components/tooltips.html\n */\n\n\nvar MatTooltip =\n/** @class */\nfunction () {\n  var MatTooltip = /*#__PURE__*/function () {\n    function MatTooltip(_overlay, _elementRef, _scrollDispatcher, _viewContainerRef, _ngZone, _platform, _ariaDescriber, _focusMonitor, scrollStrategy, _dir, _defaultOptions) {\n      var _this = this;\n\n      _classCallCheck(this, MatTooltip);\n\n      this._overlay = _overlay;\n      this._elementRef = _elementRef;\n      this._scrollDispatcher = _scrollDispatcher;\n      this._viewContainerRef = _viewContainerRef;\n      this._ngZone = _ngZone;\n      this._platform = _platform;\n      this._ariaDescriber = _ariaDescriber;\n      this._focusMonitor = _focusMonitor;\n      this._dir = _dir;\n      this._defaultOptions = _defaultOptions;\n      this._position = 'below';\n      this._disabled = false;\n      /** The default delay in ms before showing the tooltip after show is called */\n\n      this.showDelay = this._defaultOptions.showDelay;\n      /** The default delay in ms before hiding the tooltip after hide is called */\n\n      this.hideDelay = this._defaultOptions.hideDelay;\n      /**\n       * How touch gestures should be handled by the tooltip. On touch devices the tooltip directive\n       * uses a long press gesture to show and hide, however it can conflict with the native browser\n       * gestures. To work around the conflict, Angular Material disables native gestures on the\n       * trigger, but that might not be desirable on particular elements (e.g. inputs and draggable\n       * elements). The different values for this option configure the touch event handling as follows:\n       * - `auto` - Enables touch gestures for all elements, but tries to avoid conflicts with native\n       *   browser gestures on particular elements. In particular, it allows text selection on inputs\n       *   and textareas, and preserves the native browser dragging on elements marked as `draggable`.\n       * - `on` - Enables touch gestures for all elements and disables native\n       *   browser gestures with no exceptions.\n       * - `off` - Disables touch gestures. Note that this will prevent the tooltip from\n       *   showing on touch devices.\n       */\n\n      this.touchGestures = 'auto';\n      this._message = '';\n      /** Manually-bound passive event listeners. */\n\n      this._passiveListeners = new Map();\n      /** Emits when the component is destroyed. */\n\n      this._destroyed = new Subject();\n      /**\n       * Handles the keydown events on the host element.\n       * Needs to be an arrow function so that we can use it in addEventListener.\n       */\n\n      this._handleKeydown = function (event) {\n        if (_this._isTooltipVisible() && event.keyCode === ESCAPE && !hasModifierKey(event)) {\n          event.preventDefault();\n          event.stopPropagation();\n\n          _this._ngZone.run(function () {\n            return _this.hide(0);\n          });\n        }\n      };\n\n      this._scrollStrategy = scrollStrategy;\n\n      if (_defaultOptions) {\n        if (_defaultOptions.position) {\n          this.position = _defaultOptions.position;\n        }\n\n        if (_defaultOptions.touchGestures) {\n          this.touchGestures = _defaultOptions.touchGestures;\n        }\n      }\n\n      _ngZone.runOutsideAngular(function () {\n        _elementRef.nativeElement.addEventListener('keydown', _this._handleKeydown);\n      });\n    }\n    /** Allows the user to define the position of the tooltip relative to the parent element */\n\n\n    _createClass(MatTooltip, [{\n      key: \"ngAfterViewInit\",\n      value: function ngAfterViewInit() {\n        var _this2 = this;\n\n        // This needs to happen after view init so the initial values for all inputs have been set.\n        this._setupPointerEvents();\n\n        this._focusMonitor.monitor(this._elementRef).pipe(takeUntil(this._destroyed)).subscribe(function (origin) {\n          // Note that the focus monitor runs outside the Angular zone.\n          if (!origin) {\n            _this2._ngZone.run(function () {\n              return _this2.hide(0);\n            });\n          } else if (origin === 'keyboard') {\n            _this2._ngZone.run(function () {\n              return _this2.show();\n            });\n          }\n        });\n      }\n      /**\n       * Dispose the tooltip when destroyed.\n       */\n\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        var nativeElement = this._elementRef.nativeElement;\n        clearTimeout(this._touchstartTimeout);\n\n        if (this._overlayRef) {\n          this._overlayRef.dispose();\n\n          this._tooltipInstance = null;\n        } // Clean up the event listeners set in the constructor\n\n\n        nativeElement.removeEventListener('keydown', this._handleKeydown);\n\n        this._passiveListeners.forEach(function (listener, event) {\n          nativeElement.removeEventListener(event, listener, passiveListenerOptions);\n        });\n\n        this._passiveListeners.clear();\n\n        this._destroyed.next();\n\n        this._destroyed.complete();\n\n        this._ariaDescriber.removeDescription(nativeElement, this.message);\n\n        this._focusMonitor.stopMonitoring(nativeElement);\n      }\n      /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n\n    }, {\n      key: \"show\",\n      value: function show() {\n        var _this3 = this;\n\n        var delay = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.showDelay;\n\n        if (this.disabled || !this.message || this._isTooltipVisible() && !this._tooltipInstance._showTimeoutId && !this._tooltipInstance._hideTimeoutId) {\n          return;\n        }\n\n        var overlayRef = this._createOverlay();\n\n        this._detach();\n\n        this._portal = this._portal || new ComponentPortal(TooltipComponent, this._viewContainerRef);\n        this._tooltipInstance = overlayRef.attach(this._portal).instance;\n\n        this._tooltipInstance.afterHidden().pipe(takeUntil(this._destroyed)).subscribe(function () {\n          return _this3._detach();\n        });\n\n        this._setTooltipClass(this._tooltipClass);\n\n        this._updateTooltipMessage();\n\n        this._tooltipInstance.show(delay);\n      }\n      /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n\n    }, {\n      key: \"hide\",\n      value: function hide() {\n        var delay = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.hideDelay;\n\n        if (this._tooltipInstance) {\n          this._tooltipInstance.hide(delay);\n        }\n      }\n      /** Shows/hides the tooltip */\n\n    }, {\n      key: \"toggle\",\n      value: function toggle() {\n        this._isTooltipVisible() ? this.hide() : this.show();\n      }\n      /** Returns true if the tooltip is currently visible to the user */\n\n    }, {\n      key: \"_isTooltipVisible\",\n      value: function _isTooltipVisible() {\n        return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n      }\n      /** Create the overlay config and position strategy */\n\n    }, {\n      key: \"_createOverlay\",\n      value: function _createOverlay() {\n        var _this4 = this;\n\n        if (this._overlayRef) {\n          return this._overlayRef;\n        }\n\n        var scrollableAncestors = this._scrollDispatcher.getAncestorScrollContainers(this._elementRef); // Create connected position strategy that listens for scroll events to reposition.\n\n\n        var strategy = this._overlay.position().flexibleConnectedTo(this._elementRef).withTransformOriginOn('.mat-tooltip').withFlexibleDimensions(false).withViewportMargin(8).withScrollableContainers(scrollableAncestors);\n\n        strategy.positionChanges.pipe(takeUntil(this._destroyed)).subscribe(function (change) {\n          if (_this4._tooltipInstance) {\n            if (change.scrollableViewProperties.isOverlayClipped && _this4._tooltipInstance.isVisible()) {\n              // After position changes occur and the overlay is clipped by\n              // a parent scrollable then close the tooltip.\n              _this4._ngZone.run(function () {\n                return _this4.hide(0);\n              });\n            }\n          }\n        });\n        this._overlayRef = this._overlay.create({\n          direction: this._dir,\n          positionStrategy: strategy,\n          panelClass: TOOLTIP_PANEL_CLASS,\n          scrollStrategy: this._scrollStrategy()\n        });\n\n        this._updatePosition();\n\n        this._overlayRef.detachments().pipe(takeUntil(this._destroyed)).subscribe(function () {\n          return _this4._detach();\n        });\n\n        return this._overlayRef;\n      }\n      /** Detaches the currently-attached tooltip. */\n\n    }, {\n      key: \"_detach\",\n      value: function _detach() {\n        if (this._overlayRef && this._overlayRef.hasAttached()) {\n          this._overlayRef.detach();\n        }\n\n        this._tooltipInstance = null;\n      }\n      /** Updates the position of the current tooltip. */\n\n    }, {\n      key: \"_updatePosition\",\n      value: function _updatePosition() {\n        var position = this._overlayRef.getConfig().positionStrategy;\n\n        var origin = this._getOrigin();\n\n        var overlay = this._getOverlayPosition();\n\n        position.withPositions([Object.assign(Object.assign({}, origin.main), overlay.main), Object.assign(Object.assign({}, origin.fallback), overlay.fallback)]);\n      }\n      /**\n       * Returns the origin position and a fallback position based on the user's position preference.\n       * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n       */\n\n    }, {\n      key: \"_getOrigin\",\n      value: function _getOrigin() {\n        var isLtr = !this._dir || this._dir.value == 'ltr';\n        var position = this.position;\n        var originPosition;\n\n        if (position == 'above' || position == 'below') {\n          originPosition = {\n            originX: 'center',\n            originY: position == 'above' ? 'top' : 'bottom'\n          };\n        } else if (position == 'before' || position == 'left' && isLtr || position == 'right' && !isLtr) {\n          originPosition = {\n            originX: 'start',\n            originY: 'center'\n          };\n        } else if (position == 'after' || position == 'right' && isLtr || position == 'left' && !isLtr) {\n          originPosition = {\n            originX: 'end',\n            originY: 'center'\n          };\n        } else {\n          throw getMatTooltipInvalidPositionError(position);\n        }\n\n        var _this$_invertPosition = this._invertPosition(originPosition.originX, originPosition.originY),\n            x = _this$_invertPosition.x,\n            y = _this$_invertPosition.y;\n\n        return {\n          main: originPosition,\n          fallback: {\n            originX: x,\n            originY: y\n          }\n        };\n      }\n      /** Returns the overlay position and a fallback position based on the user's preference */\n\n    }, {\n      key: \"_getOverlayPosition\",\n      value: function _getOverlayPosition() {\n        var isLtr = !this._dir || this._dir.value == 'ltr';\n        var position = this.position;\n        var overlayPosition;\n\n        if (position == 'above') {\n          overlayPosition = {\n            overlayX: 'center',\n            overlayY: 'bottom'\n          };\n        } else if (position == 'below') {\n          overlayPosition = {\n            overlayX: 'center',\n            overlayY: 'top'\n          };\n        } else if (position == 'before' || position == 'left' && isLtr || position == 'right' && !isLtr) {\n          overlayPosition = {\n            overlayX: 'end',\n            overlayY: 'center'\n          };\n        } else if (position == 'after' || position == 'right' && isLtr || position == 'left' && !isLtr) {\n          overlayPosition = {\n            overlayX: 'start',\n            overlayY: 'center'\n          };\n        } else {\n          throw getMatTooltipInvalidPositionError(position);\n        }\n\n        var _this$_invertPosition2 = this._invertPosition(overlayPosition.overlayX, overlayPosition.overlayY),\n            x = _this$_invertPosition2.x,\n            y = _this$_invertPosition2.y;\n\n        return {\n          main: overlayPosition,\n          fallback: {\n            overlayX: x,\n            overlayY: y\n          }\n        };\n      }\n      /** Updates the tooltip message and repositions the overlay according to the new message length */\n\n    }, {\n      key: \"_updateTooltipMessage\",\n      value: function _updateTooltipMessage() {\n        var _this5 = this;\n\n        // Must wait for the message to be painted to the tooltip so that the overlay can properly\n        // calculate the correct positioning based on the size of the text.\n        if (this._tooltipInstance) {\n          this._tooltipInstance.message = this.message;\n\n          this._tooltipInstance._markForCheck();\n\n          this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1), takeUntil(this._destroyed)).subscribe(function () {\n            if (_this5._tooltipInstance) {\n              _this5._overlayRef.updatePosition();\n            }\n          });\n        }\n      }\n      /** Updates the tooltip class */\n\n    }, {\n      key: \"_setTooltipClass\",\n      value: function _setTooltipClass(tooltipClass) {\n        if (this._tooltipInstance) {\n          this._tooltipInstance.tooltipClass = tooltipClass;\n\n          this._tooltipInstance._markForCheck();\n        }\n      }\n      /** Inverts an overlay position. */\n\n    }, {\n      key: \"_invertPosition\",\n      value: function _invertPosition(x, y) {\n        if (this.position === 'above' || this.position === 'below') {\n          if (y === 'top') {\n            y = 'bottom';\n          } else if (y === 'bottom') {\n            y = 'top';\n          }\n        } else {\n          if (x === 'end') {\n            x = 'start';\n          } else if (x === 'start') {\n            x = 'end';\n          }\n        }\n\n        return {\n          x: x,\n          y: y\n        };\n      }\n      /** Binds the pointer events to the tooltip trigger. */\n\n    }, {\n      key: \"_setupPointerEvents\",\n      value: function _setupPointerEvents() {\n        var _this6 = this;\n\n        // The mouse events shouldn't be bound on mobile devices, because they can prevent the\n        // first tap from firing its click event or can cause the tooltip to open for clicks.\n        if (!this._platform.IOS && !this._platform.ANDROID) {\n          this._passiveListeners.set('mouseenter', function () {\n            return _this6.show();\n          }).set('mouseleave', function () {\n            return _this6.hide();\n          });\n        } else if (this.touchGestures !== 'off') {\n          this._disableNativeGesturesIfNecessary();\n\n          var touchendListener = function touchendListener() {\n            clearTimeout(_this6._touchstartTimeout);\n\n            _this6.hide(_this6._defaultOptions.touchendHideDelay);\n          };\n\n          this._passiveListeners.set('touchend', touchendListener).set('touchcancel', touchendListener).set('touchstart', function () {\n            // Note that it's important that we don't `preventDefault` here,\n            // because it can prevent click events from firing on the element.\n            clearTimeout(_this6._touchstartTimeout);\n            _this6._touchstartTimeout = setTimeout(function () {\n              return _this6.show();\n            }, LONGPRESS_DELAY);\n          });\n        }\n\n        this._passiveListeners.forEach(function (listener, event) {\n          _this6._elementRef.nativeElement.addEventListener(event, listener, passiveListenerOptions);\n        });\n      }\n      /** Disables the native browser gestures, based on how the tooltip has been configured. */\n\n    }, {\n      key: \"_disableNativeGesturesIfNecessary\",\n      value: function _disableNativeGesturesIfNecessary() {\n        var element = this._elementRef.nativeElement;\n        var style = element.style;\n        var gestures = this.touchGestures;\n\n        if (gestures !== 'off') {\n          // If gestures are set to `auto`, we don't disable text selection on inputs and\n          // textareas, because it prevents the user from typing into them on iOS Safari.\n          if (gestures === 'on' || element.nodeName !== 'INPUT' && element.nodeName !== 'TEXTAREA') {\n            style.userSelect = style.msUserSelect = style.webkitUserSelect = style.MozUserSelect = 'none';\n          } // If we have `auto` gestures and the element uses native HTML dragging,\n          // we don't set `-webkit-user-drag` because it prevents the native behavior.\n\n\n          if (gestures === 'on' || !element.draggable) {\n            style.webkitUserDrag = 'none';\n          }\n\n          style.touchAction = 'none';\n          style.webkitTapHighlightColor = 'transparent';\n        }\n      }\n    }, {\n      key: \"position\",\n      get: function get() {\n        return this._position;\n      },\n      set: function set(value) {\n        if (value !== this._position) {\n          this._position = value;\n\n          if (this._overlayRef) {\n            this._updatePosition();\n\n            if (this._tooltipInstance) {\n              this._tooltipInstance.show(0);\n            }\n\n            this._overlayRef.updatePosition();\n          }\n        }\n      }\n      /** Disables the display of the tooltip. */\n\n    }, {\n      key: \"disabled\",\n      get: function get() {\n        return this._disabled;\n      },\n      set: function set(value) {\n        this._disabled = coerceBooleanProperty(value); // If tooltip is disabled, hide immediately.\n\n        if (this._disabled) {\n          this.hide(0);\n        }\n      }\n      /** The message to be displayed in the tooltip */\n\n    }, {\n      key: \"message\",\n      get: function get() {\n        return this._message;\n      },\n      set: function set(value) {\n        var _this7 = this;\n\n        this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message); // If the message is not a string (e.g. number), convert it to a string and trim it.\n\n\n        this._message = value != null ? \"\".concat(value).trim() : '';\n\n        if (!this._message && this._isTooltipVisible()) {\n          this.hide(0);\n        } else {\n          this._updateTooltipMessage();\n\n          this._ngZone.runOutsideAngular(function () {\n            // The `AriaDescriber` has some functionality that avoids adding a description if it's the\n            // same as the `aria-label` of an element, however we can't know whether the tooltip trigger\n            // has a data-bound `aria-label` or when it'll be set for the first time. We can avoid the\n            // issue by deferring the description by a tick so Angular has time to set the `aria-label`.\n            Promise.resolve().then(function () {\n              _this7._ariaDescriber.describe(_this7._elementRef.nativeElement, _this7.message);\n            });\n          });\n        }\n      }\n      /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n\n    }, {\n      key: \"tooltipClass\",\n      get: function get() {\n        return this._tooltipClass;\n      },\n      set: function set(value) {\n        this._tooltipClass = value;\n\n        if (this._tooltipInstance) {\n          this._setTooltipClass(this._tooltipClass);\n        }\n      }\n    }]);\n\n    return MatTooltip;\n  }();\n\n  MatTooltip.ɵfac = function MatTooltip_Factory(t) {\n    return new (t || MatTooltip)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Overlay), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.ScrollDispatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Platform), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.AriaDescriber), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(MAT_TOOLTIP_SCROLL_STRATEGY), ɵngcc0.ɵɵdirectiveInject(ɵngcc5.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(MAT_TOOLTIP_DEFAULT_OPTIONS, 8));\n  };\n\n  MatTooltip.ɵdir = ɵngcc0.ɵɵdefineDirective({\n    type: MatTooltip,\n    selectors: [[\"\", \"matTooltip\", \"\"]],\n    hostAttrs: [1, \"mat-tooltip-trigger\"],\n    inputs: {\n      showDelay: [\"matTooltipShowDelay\", \"showDelay\"],\n      hideDelay: [\"matTooltipHideDelay\", \"hideDelay\"],\n      touchGestures: [\"matTooltipTouchGestures\", \"touchGestures\"],\n      position: [\"matTooltipPosition\", \"position\"],\n      disabled: [\"matTooltipDisabled\", \"disabled\"],\n      message: [\"matTooltip\", \"message\"],\n      tooltipClass: [\"matTooltipClass\", \"tooltipClass\"]\n    },\n    exportAs: [\"matTooltip\"]\n  });\n\n  MatTooltip.ctorParameters = function () {\n    return [{\n      type: Overlay\n    }, {\n      type: ElementRef\n    }, {\n      type: ScrollDispatcher\n    }, {\n      type: ViewContainerRef\n    }, {\n      type: NgZone\n    }, {\n      type: Platform\n    }, {\n      type: AriaDescriber\n    }, {\n      type: FocusMonitor\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MAT_TOOLTIP_SCROLL_STRATEGY]\n      }]\n    }, {\n      type: Directionality,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MAT_TOOLTIP_DEFAULT_OPTIONS]\n      }]\n    }];\n  };\n\n  MatTooltip.propDecorators = {\n    position: [{\n      type: Input,\n      args: ['matTooltipPosition']\n    }],\n    disabled: [{\n      type: Input,\n      args: ['matTooltipDisabled']\n    }],\n    showDelay: [{\n      type: Input,\n      args: ['matTooltipShowDelay']\n    }],\n    hideDelay: [{\n      type: Input,\n      args: ['matTooltipHideDelay']\n    }],\n    touchGestures: [{\n      type: Input,\n      args: ['matTooltipTouchGestures']\n    }],\n    message: [{\n      type: Input,\n      args: ['matTooltip']\n    }],\n    tooltipClass: [{\n      type: Input,\n      args: ['matTooltipClass']\n    }]\n  };\n  /*@__PURE__*/\n\n  (function () {\n    ɵngcc0.ɵsetClassMetadata(MatTooltip, [{\n      type: Directive,\n      args: [{\n        selector: '[matTooltip]',\n        exportAs: 'matTooltip',\n        host: {\n          'class': 'mat-tooltip-trigger'\n        }\n      }]\n    }], function () {\n      return [{\n        type: ɵngcc1.Overlay\n      }, {\n        type: ɵngcc0.ElementRef\n      }, {\n        type: ɵngcc2.ScrollDispatcher\n      }, {\n        type: ɵngcc0.ViewContainerRef\n      }, {\n        type: ɵngcc0.NgZone\n      }, {\n        type: ɵngcc3.Platform\n      }, {\n        type: ɵngcc4.AriaDescriber\n      }, {\n        type: ɵngcc4.FocusMonitor\n      }, {\n        type: undefined,\n        decorators: [{\n          type: Inject,\n          args: [MAT_TOOLTIP_SCROLL_STRATEGY]\n        }]\n      }, {\n        type: ɵngcc5.Directionality,\n        decorators: [{\n          type: Optional\n        }]\n      }, {\n        type: undefined,\n        decorators: [{\n          type: Optional\n        }, {\n          type: Inject,\n          args: [MAT_TOOLTIP_DEFAULT_OPTIONS]\n        }]\n      }];\n    }, {\n      showDelay: [{\n        type: Input,\n        args: ['matTooltipShowDelay']\n      }],\n      hideDelay: [{\n        type: Input,\n        args: ['matTooltipHideDelay']\n      }],\n      touchGestures: [{\n        type: Input,\n        args: ['matTooltipTouchGestures']\n      }],\n      position: [{\n        type: Input,\n        args: ['matTooltipPosition']\n      }],\n      disabled: [{\n        type: Input,\n        args: ['matTooltipDisabled']\n      }],\n      message: [{\n        type: Input,\n        args: ['matTooltip']\n      }],\n      tooltipClass: [{\n        type: Input,\n        args: ['matTooltipClass']\n      }]\n    });\n  })();\n\n  return MatTooltip;\n}();\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\n\n\nvar TooltipComponent =\n/** @class */\nfunction () {\n  var TooltipComponent = /*#__PURE__*/function () {\n    function TooltipComponent(_changeDetectorRef, _breakpointObserver) {\n      _classCallCheck(this, TooltipComponent);\n\n      this._changeDetectorRef = _changeDetectorRef;\n      this._breakpointObserver = _breakpointObserver;\n      /** Property watched by the animation framework to show or hide the tooltip */\n\n      this._visibility = 'initial';\n      /** Whether interactions on the page should close the tooltip */\n\n      this._closeOnInteraction = false;\n      /** Subject for notifying that the tooltip has been hidden from the view */\n\n      this._onHide = new Subject();\n      /** Stream that emits whether the user has a handset-sized display.  */\n\n      this._isHandset = this._breakpointObserver.observe(Breakpoints.Handset);\n    }\n    /**\n     * Shows the tooltip with an animation originating from the provided origin\n     * @param delay Amount of milliseconds to the delay showing the tooltip.\n     */\n\n\n    _createClass(TooltipComponent, [{\n      key: \"show\",\n      value: function show(delay) {\n        var _this8 = this;\n\n        // Cancel the delayed hide if it is scheduled\n        if (this._hideTimeoutId) {\n          clearTimeout(this._hideTimeoutId);\n          this._hideTimeoutId = null;\n        } // Body interactions should cancel the tooltip if there is a delay in showing.\n\n\n        this._closeOnInteraction = true;\n        this._showTimeoutId = setTimeout(function () {\n          _this8._visibility = 'visible';\n          _this8._showTimeoutId = null; // Mark for check so if any parent component has set the\n          // ChangeDetectionStrategy to OnPush it will be checked anyways\n\n          _this8._markForCheck();\n        }, delay);\n      }\n      /**\n       * Begins the animation to hide the tooltip after the provided delay in ms.\n       * @param delay Amount of milliseconds to delay showing the tooltip.\n       */\n\n    }, {\n      key: \"hide\",\n      value: function hide(delay) {\n        var _this9 = this;\n\n        // Cancel the delayed show if it is scheduled\n        if (this._showTimeoutId) {\n          clearTimeout(this._showTimeoutId);\n          this._showTimeoutId = null;\n        }\n\n        this._hideTimeoutId = setTimeout(function () {\n          _this9._visibility = 'hidden';\n          _this9._hideTimeoutId = null; // Mark for check so if any parent component has set the\n          // ChangeDetectionStrategy to OnPush it will be checked anyways\n\n          _this9._markForCheck();\n        }, delay);\n      }\n      /** Returns an observable that notifies when the tooltip has been hidden from view. */\n\n    }, {\n      key: \"afterHidden\",\n      value: function afterHidden() {\n        return this._onHide.asObservable();\n      }\n      /** Whether the tooltip is being displayed. */\n\n    }, {\n      key: \"isVisible\",\n      value: function isVisible() {\n        return this._visibility === 'visible';\n      }\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        this._onHide.complete();\n      }\n    }, {\n      key: \"_animationStart\",\n      value: function _animationStart() {\n        this._closeOnInteraction = false;\n      }\n    }, {\n      key: \"_animationDone\",\n      value: function _animationDone(event) {\n        var toState = event.toState;\n\n        if (toState === 'hidden' && !this.isVisible()) {\n          this._onHide.next();\n        }\n\n        if (toState === 'visible' || toState === 'hidden') {\n          this._closeOnInteraction = true;\n        }\n      }\n      /**\n       * Interactions on the HTML body should close the tooltip immediately as defined in the\n       * material design spec.\n       * https://material.io/design/components/tooltips.html#behavior\n       */\n\n    }, {\n      key: \"_handleBodyInteraction\",\n      value: function _handleBodyInteraction() {\n        if (this._closeOnInteraction) {\n          this.hide(0);\n        }\n      }\n      /**\n       * Marks that the tooltip needs to be checked in the next change detection run.\n       * Mainly used for rendering the initial text before positioning a tooltip, which\n       * can be problematic in components with OnPush change detection.\n       */\n\n    }, {\n      key: \"_markForCheck\",\n      value: function _markForCheck() {\n        this._changeDetectorRef.markForCheck();\n      }\n    }]);\n\n    return TooltipComponent;\n  }();\n\n  TooltipComponent.ɵfac = function TooltipComponent_Factory(t) {\n    return new (t || TooltipComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc6.BreakpointObserver));\n  };\n\n  TooltipComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n    type: TooltipComponent,\n    selectors: [[\"mat-tooltip-component\"]],\n    hostAttrs: [\"aria-hidden\", \"true\"],\n    hostVars: 2,\n    hostBindings: function TooltipComponent_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function TooltipComponent_click_HostBindingHandler() {\n          return ctx._handleBodyInteraction();\n        }, false, ɵngcc0.ɵɵresolveBody);\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵstyleProp(\"zoom\", ctx._visibility === \"visible\" ? 1 : null);\n      }\n    },\n    decls: 3,\n    vars: 7,\n    consts: [[1, \"mat-tooltip\", 3, \"ngClass\"]],\n    template: function TooltipComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵlistener(\"@state.start\", function TooltipComponent_Template_div_animation_state_start_0_listener() {\n          return ctx._animationStart();\n        })(\"@state.done\", function TooltipComponent_Template_div_animation_state_done_0_listener($event) {\n          return ctx._animationDone($event);\n        });\n        ɵngcc0.ɵɵpipe(1, \"async\");\n        ɵngcc0.ɵɵtext(2);\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        var tmp_0_0 = null;\n        var currVal_0 = (tmp_0_0 = ɵngcc0.ɵɵpipeBind1(1, 5, ctx._isHandset)) == null ? null : tmp_0_0.matches;\n        ɵngcc0.ɵɵclassProp(\"mat-tooltip-handset\", currVal_0);\n        ɵngcc0.ɵɵproperty(\"ngClass\", ctx.tooltipClass)(\"@state\", ctx._visibility);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵtextInterpolate(ctx.message);\n      }\n    },\n    directives: [ɵngcc7.NgClass],\n    pipes: [ɵngcc7.AsyncPipe],\n    styles: [\".mat-tooltip-panel{pointer-events:none !important}.mat-tooltip{color:#fff;border-radius:4px;margin:14px;max-width:250px;padding-left:8px;padding-right:8px;overflow:hidden;text-overflow:ellipsis}.cdk-high-contrast-active .mat-tooltip{outline:solid 1px}.mat-tooltip-handset{margin:24px;padding-left:16px;padding-right:16px}\\n\"],\n    encapsulation: 2,\n    data: {\n      animation: [matTooltipAnimations.tooltipState]\n    },\n    changeDetection: 0\n  });\n\n  TooltipComponent.ctorParameters = function () {\n    return [{\n      type: ChangeDetectorRef\n    }, {\n      type: BreakpointObserver\n    }];\n  };\n  /*@__PURE__*/\n\n\n  (function () {\n    ɵngcc0.ɵsetClassMetadata(TooltipComponent, [{\n      type: Component,\n      args: [{\n        selector: 'mat-tooltip-component',\n        template: \"<div class=\\\"mat-tooltip\\\"\\n     [ngClass]=\\\"tooltipClass\\\"\\n     [class.mat-tooltip-handset]=\\\"(_isHandset | async)?.matches\\\"\\n     [@state]=\\\"_visibility\\\"\\n     (@state.start)=\\\"_animationStart()\\\"\\n     (@state.done)=\\\"_animationDone($event)\\\">{{message}}</div>\\n\",\n        encapsulation: ViewEncapsulation.None,\n        changeDetection: ChangeDetectionStrategy.OnPush,\n        animations: [matTooltipAnimations.tooltipState],\n        host: {\n          // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n          // won't be rendered if the animations are disabled or there is no web animations polyfill.\n          '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n          '(body:click)': 'this._handleBodyInteraction()',\n          'aria-hidden': 'true'\n        },\n        styles: [\".mat-tooltip-panel{pointer-events:none !important}.mat-tooltip{color:#fff;border-radius:4px;margin:14px;max-width:250px;padding-left:8px;padding-right:8px;overflow:hidden;text-overflow:ellipsis}.cdk-high-contrast-active .mat-tooltip{outline:solid 1px}.mat-tooltip-handset{margin:24px;padding-left:16px;padding-right:16px}\\n\"]\n      }]\n    }], function () {\n      return [{\n        type: ɵngcc0.ChangeDetectorRef\n      }, {\n        type: ɵngcc6.BreakpointObserver\n      }];\n    }, null);\n  })();\n\n  return TooltipComponent;\n}();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nvar MatTooltipModule =\n/** @class */\nfunction () {\n  var MatTooltipModule = function MatTooltipModule() {\n    _classCallCheck(this, MatTooltipModule);\n  };\n\n  MatTooltipModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n    type: MatTooltipModule\n  });\n  MatTooltipModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n    factory: function MatTooltipModule_Factory(t) {\n      return new (t || MatTooltipModule)();\n    },\n    providers: [MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER],\n    imports: [[A11yModule, CommonModule, OverlayModule, MatCommonModule], MatCommonModule, CdkScrollableModule]\n  });\n\n  (function () {\n    (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatTooltipModule, {\n      declarations: function declarations() {\n        return [MatTooltip, TooltipComponent];\n      },\n      imports: function imports() {\n        return [A11yModule, CommonModule, OverlayModule, MatCommonModule];\n      },\n      exports: function exports() {\n        return [MatTooltip, TooltipComponent, MatCommonModule, CdkScrollableModule];\n      }\n    });\n  })();\n  /*@__PURE__*/\n\n\n  (function () {\n    ɵngcc0.ɵsetClassMetadata(MatTooltipModule, [{\n      type: NgModule,\n      args: [{\n        imports: [A11yModule, CommonModule, OverlayModule, MatCommonModule],\n        exports: [MatTooltip, TooltipComponent, MatCommonModule, CdkScrollableModule],\n        declarations: [MatTooltip, TooltipComponent],\n        entryComponents: [TooltipComponent],\n        providers: [MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER]\n      }]\n    }], null, null);\n  })();\n\n  return MatTooltipModule;\n}();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { MAT_TOOLTIP_DEFAULT_OPTIONS, MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY, MAT_TOOLTIP_SCROLL_STRATEGY, MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY, MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER, MatTooltip, MatTooltipModule, SCROLL_THROTTLE_MS, TOOLTIP_PANEL_CLASS, TooltipComponent, getMatTooltipInvalidPositionError, matTooltipAnimations };","map":{"version":3,"sources":["../../../../../../src/material/tooltip/tooltip-animations.ts","../../../../../../src/material/tooltip/tooltip.ts","../../../../../../src/material/tooltip/tooltip-module.ts","../../../../../../src/material/tooltip/public-api.ts","../../../../../../src/material/tooltip/index.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  keyframes,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n\n/**\n * Animations used by MatTooltip.\n * @docs-private\n */\nexport const matTooltipAnimations: {\n  readonly tooltipState: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions a tooltip in and out. */\n  tooltipState: trigger('state', [\n    state('initial, void, hidden', style({opacity: 0, transform: 'scale(0)'})),\n    state('visible', style({transform: 'scale(1)'})),\n    transition('* => visible', animate('200ms cubic-bezier(0, 0, 0.2, 1)', keyframes([\n      style({opacity: 0, transform: 'scale(0)', offset: 0}),\n      style({opacity: 0.5, transform: 'scale(0.99)', offset: 0.5}),\n      style({opacity: 1, transform: 'scale(1)', offset: 1})\n    ]))),\n    transition('* => hidden', animate('100ms cubic-bezier(0, 0, 0.2, 1)', style({opacity: 0}))),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {AriaDescriber, FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {BooleanInput, coerceBooleanProperty, NumberInput} from '@angular/cdk/coercion';\nimport {ESCAPE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {BreakpointObserver, Breakpoints, BreakpointState} from '@angular/cdk/layout';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  OriginConnectionPosition,\n  Overlay,\n  OverlayConnectionPosition,\n  OverlayRef,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {Platform, normalizePassiveListenerOptions} from '@angular/cdk/platform';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n  ViewEncapsulation,\n  AfterViewInit,\n} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\nimport {take, takeUntil} from 'rxjs/operators';\n\nimport {matTooltipAnimations} from './tooltip-animations';\n\n\n/** Possible positions for a tooltip. */\nexport type TooltipPosition = 'left' | 'right' | 'above' | 'below' | 'before' | 'after';\n\n/**\n * Options for how the tooltip trigger should handle touch gestures.\n * See `MatTooltip.touchGestures` for more information.\n */\nexport type TooltipTouchGestures = 'auto' | 'on' | 'off';\n\n/** Possible visibility states of a tooltip. */\nexport type TooltipVisibility = 'initial' | 'visible' | 'hidden';\n\n/** Time in ms to throttle repositioning after scroll events. */\nexport const SCROLL_THROTTLE_MS = 20;\n\n/** CSS class that will be attached to the overlay panel. */\nexport const TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\n\n/** Options used to bind passive event listeners. */\nconst passiveListenerOptions = normalizePassiveListenerOptions({passive: true});\n\n/**\n * Time between the user putting the pointer on a tooltip\n * trigger and the long press event being fired.\n */\nconst LONGPRESS_DELAY = 500;\n\n/**\n * Creates an error to be thrown if the user supplied an invalid tooltip position.\n * @docs-private\n */\nexport function getMatTooltipInvalidPositionError(position: string) {\n  return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n\n/** Injection token that determines the scroll handling while a tooltip is visible. */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-tooltip-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition({scrollThrottle: SCROLL_THROTTLE_MS});\n}\n\n/** @docs-private */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default `matTooltip` options that can be overridden. */\nexport interface MatTooltipDefaultOptions {\n  showDelay: number;\n  hideDelay: number;\n  touchendHideDelay: number;\n  touchGestures?: TooltipTouchGestures;\n  position?: TooltipPosition;\n}\n\n/** Injection token to be used to override the default options for `matTooltip`. */\nexport const MAT_TOOLTIP_DEFAULT_OPTIONS =\n    new InjectionToken<MatTooltipDefaultOptions>('mat-tooltip-default-options', {\n      providedIn: 'root',\n      factory: MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY(): MatTooltipDefaultOptions {\n  return {\n    showDelay: 0,\n    hideDelay: 0,\n    touchendHideDelay: 1500,\n  };\n}\n\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.io/design/components/tooltips.html\n */\n@Directive({\n  selector: '[matTooltip]',\n  exportAs: 'matTooltip',\n  host: {\n    'class': 'mat-tooltip-trigger'\n  }\n})\nexport class MatTooltip implements OnDestroy, AfterViewInit {\n  _overlayRef: OverlayRef | null;\n  _tooltipInstance: TooltipComponent | null;\n\n  private _portal: ComponentPortal<TooltipComponent>;\n  private _position: TooltipPosition = 'below';\n  private _disabled: boolean = false;\n  private _tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** Allows the user to define the position of the tooltip relative to the parent element */\n  @Input('matTooltipPosition')\n  get position(): TooltipPosition { return this._position; }\n  set position(value: TooltipPosition) {\n    if (value !== this._position) {\n      this._position = value;\n\n      if (this._overlayRef) {\n        this._updatePosition();\n\n        if (this._tooltipInstance) {\n          this._tooltipInstance!.show(0);\n        }\n\n        this._overlayRef.updatePosition();\n      }\n    }\n  }\n\n  /** Disables the display of the tooltip. */\n  @Input('matTooltipDisabled')\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // If tooltip is disabled, hide immediately.\n    if (this._disabled) {\n      this.hide(0);\n    }\n  }\n\n  /** The default delay in ms before showing the tooltip after show is called */\n  @Input('matTooltipShowDelay') showDelay: number = this._defaultOptions.showDelay;\n\n  /** The default delay in ms before hiding the tooltip after hide is called */\n  @Input('matTooltipHideDelay') hideDelay: number = this._defaultOptions.hideDelay;\n\n  /**\n   * How touch gestures should be handled by the tooltip. On touch devices the tooltip directive\n   * uses a long press gesture to show and hide, however it can conflict with the native browser\n   * gestures. To work around the conflict, Angular Material disables native gestures on the\n   * trigger, but that might not be desirable on particular elements (e.g. inputs and draggable\n   * elements). The different values for this option configure the touch event handling as follows:\n   * - `auto` - Enables touch gestures for all elements, but tries to avoid conflicts with native\n   *   browser gestures on particular elements. In particular, it allows text selection on inputs\n   *   and textareas, and preserves the native browser dragging on elements marked as `draggable`.\n   * - `on` - Enables touch gestures for all elements and disables native\n   *   browser gestures with no exceptions.\n   * - `off` - Disables touch gestures. Note that this will prevent the tooltip from\n   *   showing on touch devices.\n   */\n  @Input('matTooltipTouchGestures') touchGestures: TooltipTouchGestures = 'auto';\n\n  /** The message to be displayed in the tooltip */\n  @Input('matTooltip')\n  get message() { return this._message; }\n  set message(value: string) {\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message);\n\n    // If the message is not a string (e.g. number), convert it to a string and trim it.\n    this._message = value != null ? `${value}`.trim() : '';\n\n    if (!this._message && this._isTooltipVisible()) {\n      this.hide(0);\n    } else {\n      this._updateTooltipMessage();\n      this._ngZone.runOutsideAngular(() => {\n        // The `AriaDescriber` has some functionality that avoids adding a description if it's the\n        // same as the `aria-label` of an element, however we can't know whether the tooltip trigger\n        // has a data-bound `aria-label` or when it'll be set for the first time. We can avoid the\n        // issue by deferring the description by a tick so Angular has time to set the `aria-label`.\n        Promise.resolve().then(() => {\n          this._ariaDescriber.describe(this._elementRef.nativeElement, this.message);\n        });\n      });\n    }\n  }\n  private _message = '';\n\n  /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n  @Input('matTooltipClass')\n  get tooltipClass() { return this._tooltipClass; }\n  set tooltipClass(value: string|string[]|Set<string>|{[key: string]: any}) {\n    this._tooltipClass = value;\n    if (this._tooltipInstance) {\n      this._setTooltipClass(this._tooltipClass);\n    }\n  }\n\n  /** Manually-bound passive event listeners. */\n  private _passiveListeners = new Map<string, EventListenerOrEventListenerObject>();\n\n  /** Timer started at the last `touchstart` event. */\n  private _touchstartTimeout: number;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  constructor(\n    private _overlay: Overlay,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _scrollDispatcher: ScrollDispatcher,\n    private _viewContainerRef: ViewContainerRef,\n    private _ngZone: NgZone,\n    private _platform: Platform,\n    private _ariaDescriber: AriaDescriber,\n    private _focusMonitor: FocusMonitor,\n    @Inject(MAT_TOOLTIP_SCROLL_STRATEGY) scrollStrategy: any,\n    @Optional() private _dir: Directionality,\n    @Optional() @Inject(MAT_TOOLTIP_DEFAULT_OPTIONS)\n      private _defaultOptions: MatTooltipDefaultOptions) {\n\n    this._scrollStrategy = scrollStrategy;\n\n    if (_defaultOptions) {\n      if (_defaultOptions.position) {\n        this.position = _defaultOptions.position;\n      }\n\n      if (_defaultOptions.touchGestures) {\n        this.touchGestures = _defaultOptions.touchGestures;\n      }\n    }\n\n    _ngZone.runOutsideAngular(() => {\n      _elementRef.nativeElement.addEventListener('keydown', this._handleKeydown);\n    });\n  }\n\n  ngAfterViewInit() {\n    // This needs to happen after view init so the initial values for all inputs have been set.\n    this._setupPointerEvents();\n\n    this._focusMonitor.monitor(this._elementRef)\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(origin => {\n        // Note that the focus monitor runs outside the Angular zone.\n        if (!origin) {\n          this._ngZone.run(() => this.hide(0));\n        } else if (origin === 'keyboard') {\n          this._ngZone.run(() => this.show());\n        }\n    });\n  }\n\n  /**\n   * Dispose the tooltip when destroyed.\n   */\n  ngOnDestroy() {\n    const nativeElement = this._elementRef.nativeElement;\n\n    clearTimeout(this._touchstartTimeout);\n\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._tooltipInstance = null;\n    }\n\n    // Clean up the event listeners set in the constructor\n    nativeElement.removeEventListener('keydown', this._handleKeydown);\n    this._passiveListeners.forEach((listener, event) => {\n      nativeElement.removeEventListener(event, listener, passiveListenerOptions);\n    });\n    this._passiveListeners.clear();\n\n    this._destroyed.next();\n    this._destroyed.complete();\n\n    this._ariaDescriber.removeDescription(nativeElement, this.message);\n    this._focusMonitor.stopMonitoring(nativeElement);\n  }\n\n  /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n  show(delay: number = this.showDelay): void {\n    if (this.disabled || !this.message || (this._isTooltipVisible() &&\n      !this._tooltipInstance!._showTimeoutId && !this._tooltipInstance!._hideTimeoutId)) {\n        return;\n    }\n\n    const overlayRef = this._createOverlay();\n    this._detach();\n    this._portal = this._portal || new ComponentPortal(TooltipComponent, this._viewContainerRef);\n    this._tooltipInstance = overlayRef.attach(this._portal).instance;\n    this._tooltipInstance.afterHidden()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n    this._setTooltipClass(this._tooltipClass);\n    this._updateTooltipMessage();\n    this._tooltipInstance!.show(delay);\n  }\n\n  /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n  hide(delay: number = this.hideDelay): void {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.hide(delay);\n    }\n  }\n\n  /** Shows/hides the tooltip */\n  toggle(): void {\n    this._isTooltipVisible() ? this.hide() : this.show();\n  }\n\n  /** Returns true if the tooltip is currently visible to the user */\n  _isTooltipVisible(): boolean {\n    return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n  }\n\n  /**\n   * Handles the keydown events on the host element.\n   * Needs to be an arrow function so that we can use it in addEventListener.\n   */\n  private _handleKeydown = (event: KeyboardEvent) => {\n    if (this._isTooltipVisible() && event.keyCode === ESCAPE && !hasModifierKey(event)) {\n      event.preventDefault();\n      event.stopPropagation();\n      this._ngZone.run(() => this.hide(0));\n    }\n  }\n\n  /** Create the overlay config and position strategy */\n  private _createOverlay(): OverlayRef {\n    if (this._overlayRef) {\n      return this._overlayRef;\n    }\n\n    const scrollableAncestors =\n        this._scrollDispatcher.getAncestorScrollContainers(this._elementRef);\n\n    // Create connected position strategy that listens for scroll events to reposition.\n    const strategy = this._overlay.position()\n                         .flexibleConnectedTo(this._elementRef)\n                         .withTransformOriginOn('.mat-tooltip')\n                         .withFlexibleDimensions(false)\n                         .withViewportMargin(8)\n                         .withScrollableContainers(scrollableAncestors);\n\n    strategy.positionChanges.pipe(takeUntil(this._destroyed)).subscribe(change => {\n      if (this._tooltipInstance) {\n        if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {\n          // After position changes occur and the overlay is clipped by\n          // a parent scrollable then close the tooltip.\n          this._ngZone.run(() => this.hide(0));\n        }\n      }\n    });\n\n    this._overlayRef = this._overlay.create({\n      direction: this._dir,\n      positionStrategy: strategy,\n      panelClass: TOOLTIP_PANEL_CLASS,\n      scrollStrategy: this._scrollStrategy()\n    });\n\n    this._updatePosition();\n\n    this._overlayRef.detachments()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n\n    return this._overlayRef;\n  }\n\n  /** Detaches the currently-attached tooltip. */\n  private _detach() {\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n    }\n\n    this._tooltipInstance = null;\n  }\n\n  /** Updates the position of the current tooltip. */\n  private _updatePosition() {\n    const position =\n        this._overlayRef!.getConfig().positionStrategy as FlexibleConnectedPositionStrategy;\n    const origin = this._getOrigin();\n    const overlay = this._getOverlayPosition();\n\n    position.withPositions([\n      {...origin.main, ...overlay.main},\n      {...origin.fallback, ...overlay.fallback}\n    ]);\n  }\n\n  /**\n   * Returns the origin position and a fallback position based on the user's position preference.\n   * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n   */\n  _getOrigin(): {main: OriginConnectionPosition, fallback: OriginConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let originPosition: OriginConnectionPosition;\n\n    if (position == 'above' || position == 'below') {\n      originPosition = {originX: 'center', originY: position == 'above' ? 'top' : 'bottom'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      originPosition = {originX: 'start', originY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      originPosition = {originX: 'end', originY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(originPosition.originX, originPosition.originY);\n\n    return {\n      main: originPosition,\n      fallback: {originX: x, originY: y}\n    };\n  }\n\n  /** Returns the overlay position and a fallback position based on the user's preference */\n  _getOverlayPosition(): {main: OverlayConnectionPosition, fallback: OverlayConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let overlayPosition: OverlayConnectionPosition;\n\n    if (position == 'above') {\n      overlayPosition = {overlayX: 'center', overlayY: 'bottom'};\n    } else if (position == 'below') {\n      overlayPosition = {overlayX: 'center', overlayY: 'top'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      overlayPosition = {overlayX: 'end', overlayY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      overlayPosition = {overlayX: 'start', overlayY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);\n\n    return {\n      main: overlayPosition,\n      fallback: {overlayX: x, overlayY: y}\n    };\n  }\n\n  /** Updates the tooltip message and repositions the overlay according to the new message length */\n  private _updateTooltipMessage() {\n    // Must wait for the message to be painted to the tooltip so that the overlay can properly\n    // calculate the correct positioning based on the size of the text.\n    if (this._tooltipInstance) {\n      this._tooltipInstance.message = this.message;\n      this._tooltipInstance._markForCheck();\n\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(\n        take(1),\n        takeUntil(this._destroyed)\n      ).subscribe(() => {\n        if (this._tooltipInstance) {\n          this._overlayRef!.updatePosition();\n        }\n      });\n    }\n  }\n\n  /** Updates the tooltip class */\n  private _setTooltipClass(tooltipClass: string|string[]|Set<string>|{[key: string]: any}) {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.tooltipClass = tooltipClass;\n      this._tooltipInstance._markForCheck();\n    }\n  }\n\n  /** Inverts an overlay position. */\n  private _invertPosition(x: HorizontalConnectionPos, y: VerticalConnectionPos) {\n    if (this.position === 'above' || this.position === 'below') {\n      if (y === 'top') {\n        y = 'bottom';\n      } else if (y === 'bottom') {\n        y = 'top';\n      }\n    } else {\n      if (x === 'end') {\n        x = 'start';\n      } else if (x === 'start') {\n        x = 'end';\n      }\n    }\n\n    return {x, y};\n  }\n\n  /** Binds the pointer events to the tooltip trigger. */\n  private _setupPointerEvents() {\n    // The mouse events shouldn't be bound on mobile devices, because they can prevent the\n    // first tap from firing its click event or can cause the tooltip to open for clicks.\n    if (!this._platform.IOS && !this._platform.ANDROID) {\n      this._passiveListeners\n        .set('mouseenter', () => this.show())\n        .set('mouseleave', () => this.hide());\n    } else if (this.touchGestures !== 'off') {\n      this._disableNativeGesturesIfNecessary();\n      const touchendListener = () => {\n        clearTimeout(this._touchstartTimeout);\n        this.hide(this._defaultOptions.touchendHideDelay);\n      };\n\n      this._passiveListeners\n        .set('touchend', touchendListener)\n        .set('touchcancel', touchendListener)\n        .set('touchstart', () => {\n          // Note that it's important that we don't `preventDefault` here,\n          // because it can prevent click events from firing on the element.\n          clearTimeout(this._touchstartTimeout);\n          this._touchstartTimeout = setTimeout(() => this.show(), LONGPRESS_DELAY);\n        });\n    }\n\n    this._passiveListeners.forEach((listener, event) => {\n      this._elementRef.nativeElement.addEventListener(event, listener, passiveListenerOptions);\n    });\n  }\n\n  /** Disables the native browser gestures, based on how the tooltip has been configured. */\n  private _disableNativeGesturesIfNecessary() {\n    const element = this._elementRef.nativeElement;\n    const style = element.style;\n    const gestures = this.touchGestures;\n\n    if (gestures !== 'off') {\n      // If gestures are set to `auto`, we don't disable text selection on inputs and\n      // textareas, because it prevents the user from typing into them on iOS Safari.\n      if (gestures === 'on' || (element.nodeName !== 'INPUT' && element.nodeName !== 'TEXTAREA')) {\n        style.userSelect = (style as any).msUserSelect = style.webkitUserSelect =\n            (style as any).MozUserSelect = 'none';\n      }\n\n      // If we have `auto` gestures and the element uses native HTML dragging,\n      // we don't set `-webkit-user-drag` because it prevents the native behavior.\n      if (gestures === 'on' || !element.draggable) {\n        (style as any).webkitUserDrag = 'none';\n      }\n\n      style.touchAction = 'none';\n      style.webkitTapHighlightColor = 'transparent';\n    }\n  }\n\n  static ngAcceptInputType_disabled: BooleanInput;\n  static ngAcceptInputType_hideDelay: NumberInput;\n  static ngAcceptInputType_showDelay: NumberInput;\n}\n\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\n@Component({\n  selector: 'mat-tooltip-component',\n  templateUrl: 'tooltip.html',\n  styleUrls: ['tooltip.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTooltipAnimations.tooltipState],\n  host: {\n    // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n    // won't be rendered if the animations are disabled or there is no web animations polyfill.\n    '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n    '(body:click)': 'this._handleBodyInteraction()',\n    'aria-hidden': 'true',\n  }\n})\nexport class TooltipComponent implements OnDestroy {\n  /** Message to display in the tooltip */\n  message: string;\n\n  /** Classes to be added to the tooltip. Supports the same syntax as `ngClass`. */\n  tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** The timeout ID of any current timer set to show the tooltip */\n  _showTimeoutId: number | null;\n\n  /** The timeout ID of any current timer set to hide the tooltip */\n  _hideTimeoutId: number | null;\n\n  /** Property watched by the animation framework to show or hide the tooltip */\n  _visibility: TooltipVisibility = 'initial';\n\n  /** Whether interactions on the page should close the tooltip */\n  private _closeOnInteraction: boolean = false;\n\n  /** Subject for notifying that the tooltip has been hidden from the view */\n  private readonly _onHide: Subject<any> = new Subject();\n\n  /** Stream that emits whether the user has a handset-sized display.  */\n  _isHandset: Observable<BreakpointState> = this._breakpointObserver.observe(Breakpoints.Handset);\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _breakpointObserver: BreakpointObserver) {}\n\n  /**\n   * Shows the tooltip with an animation originating from the provided origin\n   * @param delay Amount of milliseconds to the delay showing the tooltip.\n   */\n  show(delay: number): void {\n    // Cancel the delayed hide if it is scheduled\n    if (this._hideTimeoutId) {\n      clearTimeout(this._hideTimeoutId);\n      this._hideTimeoutId = null;\n    }\n\n    // Body interactions should cancel the tooltip if there is a delay in showing.\n    this._closeOnInteraction = true;\n    this._showTimeoutId = setTimeout(() => {\n      this._visibility = 'visible';\n      this._showTimeoutId = null;\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /**\n   * Begins the animation to hide the tooltip after the provided delay in ms.\n   * @param delay Amount of milliseconds to delay showing the tooltip.\n   */\n  hide(delay: number): void {\n    // Cancel the delayed show if it is scheduled\n    if (this._showTimeoutId) {\n      clearTimeout(this._showTimeoutId);\n      this._showTimeoutId = null;\n    }\n\n    this._hideTimeoutId = setTimeout(() => {\n      this._visibility = 'hidden';\n      this._hideTimeoutId = null;\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /** Returns an observable that notifies when the tooltip has been hidden from view. */\n  afterHidden(): Observable<void> {\n    return this._onHide.asObservable();\n  }\n\n  /** Whether the tooltip is being displayed. */\n  isVisible(): boolean {\n    return this._visibility === 'visible';\n  }\n\n  ngOnDestroy() {\n    this._onHide.complete();\n  }\n\n  _animationStart() {\n    this._closeOnInteraction = false;\n  }\n\n  _animationDone(event: AnimationEvent): void {\n    const toState = event.toState as TooltipVisibility;\n\n    if (toState === 'hidden' && !this.isVisible()) {\n      this._onHide.next();\n    }\n\n    if (toState === 'visible' || toState === 'hidden') {\n      this._closeOnInteraction = true;\n    }\n  }\n\n  /**\n   * Interactions on the HTML body should close the tooltip immediately as defined in the\n   * material design spec.\n   * https://material.io/design/components/tooltips.html#behavior\n   */\n  _handleBodyInteraction(): void {\n    if (this._closeOnInteraction) {\n      this.hide(0);\n    }\n  }\n\n  /**\n   * Marks that the tooltip needs to be checked in the next change detection run.\n   * Mainly used for rendering the initial text before positioning a tooltip, which\n   * can be problematic in components with OnPush change detection.\n   */\n  _markForCheck(): void {\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {CdkScrollableModule} from '@angular/cdk/scrolling';\nimport {\n  MatTooltip,\n  TooltipComponent,\n  MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './tooltip';\n\n@NgModule({\n  imports: [\n    A11yModule,\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n  ],\n  exports: [MatTooltip, TooltipComponent, MatCommonModule, CdkScrollableModule],\n  declarations: [MatTooltip, TooltipComponent],\n  entryComponents: [TooltipComponent],\n  providers: [MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\nexport class MatTooltipModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './tooltip-module';\nexport * from './tooltip';\nexport * from './tooltip-animations';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]},"metadata":{},"sourceType":"module"}