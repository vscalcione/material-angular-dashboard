{"ast":null,"code":"import _createClass from \"/mnt/c/Users/francesco/Desktop/material-angular-dashboard/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _classCallCheck from \"/mnt/c/Users/francesco/Desktop/material-angular-dashboard/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport { NgModule, ɵɵdefineInjectable, ɵɵinject, Injectable, NgZone } from '@angular/core';\nimport { Platform } from '@angular/cdk/platform';\nimport { Subject, combineLatest, concat, Observable } from 'rxjs';\nimport { take, skip, debounceTime, map, startWith, takeUntil } from 'rxjs/operators';\nimport { coerceArray } from '@angular/cdk/coercion';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\n\nvar LayoutModule =\n/** @class */\nfunction () {\n  var LayoutModule = function LayoutModule() {\n    _classCallCheck(this, LayoutModule);\n  };\n\n  LayoutModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n    type: LayoutModule\n  });\n  LayoutModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n    factory: function LayoutModule_Factory(t) {\n      return new (t || LayoutModule)();\n    }\n  });\n  /*@__PURE__*/\n\n  (function () {\n    ɵngcc0.ɵsetClassMetadata(LayoutModule, [{\n      type: NgModule,\n      args: [{}]\n    }], null, null);\n  })();\n\n  return LayoutModule;\n}();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Global registry for all dynamically-created, injected media queries. */\n\n\nvar mediaQueriesForWebkitCompatibility = new Set();\n/** Style tag that holds all of the dynamically-created media queries. */\n\nvar mediaQueryStyleNode;\n/** A utility for calling matchMedia queries. */\n\nvar MediaMatcher =\n/** @class */\nfunction () {\n  var MediaMatcher = /*#__PURE__*/function () {\n    function MediaMatcher(_platform) {\n      _classCallCheck(this, MediaMatcher);\n\n      this._platform = _platform;\n      this._matchMedia = this._platform.isBrowser && window.matchMedia ? // matchMedia is bound to the window scope intentionally as it is an illegal invocation to\n      // call it from a different scope.\n      window.matchMedia.bind(window) : noopMatchMedia;\n    }\n    /**\n     * Evaluates the given media query and returns the native MediaQueryList from which results\n     * can be retrieved.\n     * Confirms the layout engine will trigger for the selector query provided and returns the\n     * MediaQueryList for the query provided.\n     */\n\n\n    _createClass(MediaMatcher, [{\n      key: \"matchMedia\",\n      value: function matchMedia(query) {\n        if (this._platform.WEBKIT) {\n          createEmptyStyleRule(query);\n        }\n\n        return this._matchMedia(query);\n      }\n    }]);\n\n    return MediaMatcher;\n  }();\n\n  MediaMatcher.ɵfac = function MediaMatcher_Factory(t) {\n    return new (t || MediaMatcher)(ɵngcc0.ɵɵinject(ɵngcc1.Platform));\n  };\n\n  MediaMatcher.ɵprov = ɵɵdefineInjectable({\n    factory: function MediaMatcher_Factory() {\n      return new MediaMatcher(ɵɵinject(Platform));\n    },\n    token: MediaMatcher,\n    providedIn: \"root\"\n  });\n\n  MediaMatcher.ctorParameters = function () {\n    return [{\n      type: Platform\n    }];\n  };\n  /*@__PURE__*/\n\n\n  (function () {\n    ɵngcc0.ɵsetClassMetadata(MediaMatcher, [{\n      type: Injectable,\n      args: [{\n        providedIn: 'root'\n      }]\n    }], function () {\n      return [{\n        type: ɵngcc1.Platform\n      }];\n    }, null);\n  })();\n\n  return MediaMatcher;\n}();\n/**\n * For Webkit engines that only trigger the MediaQueryListListener when\n * there is at least one CSS selector for the respective media query.\n */\n\n\nfunction createEmptyStyleRule(query) {\n  if (mediaQueriesForWebkitCompatibility.has(query)) {\n    return;\n  }\n\n  try {\n    if (!mediaQueryStyleNode) {\n      mediaQueryStyleNode = document.createElement('style');\n      mediaQueryStyleNode.setAttribute('type', 'text/css');\n      document.head.appendChild(mediaQueryStyleNode);\n    }\n\n    if (mediaQueryStyleNode.sheet) {\n      mediaQueryStyleNode.sheet.insertRule(\"@media \".concat(query, \" {.fx-query-test{ }}\"), 0);\n      mediaQueriesForWebkitCompatibility.add(query);\n    }\n  } catch (e) {\n    console.error(e);\n  }\n}\n/** No-op matchMedia replacement for non-browser platforms. */\n\n\nfunction noopMatchMedia(query) {\n  // Use `as any` here to avoid adding additional necessary properties for\n  // the noop matcher.\n  return {\n    matches: query === 'all' || query === '',\n    media: query,\n    addListener: function addListener() {},\n    removeListener: function removeListener() {}\n  };\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Utility for checking the matching state of @media queries. */\n\n\nvar BreakpointObserver =\n/** @class */\nfunction () {\n  var BreakpointObserver = /*#__PURE__*/function () {\n    function BreakpointObserver(_mediaMatcher, _zone) {\n      _classCallCheck(this, BreakpointObserver);\n\n      this._mediaMatcher = _mediaMatcher;\n      this._zone = _zone;\n      /**  A map of all media queries currently being listened for. */\n\n      this._queries = new Map();\n      /** A subject for all other observables to takeUntil based on. */\n\n      this._destroySubject = new Subject();\n    }\n    /** Completes the active subject, signalling to all other observables to complete. */\n\n\n    _createClass(BreakpointObserver, [{\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        this._destroySubject.next();\n\n        this._destroySubject.complete();\n      }\n      /**\n       * Whether one or more media queries match the current viewport size.\n       * @param value One or more media queries to check.\n       * @returns Whether any of the media queries match.\n       */\n\n    }, {\n      key: \"isMatched\",\n      value: function isMatched(value) {\n        var _this = this;\n\n        var queries = splitQueries(coerceArray(value));\n        return queries.some(function (mediaQuery) {\n          return _this._registerQuery(mediaQuery).mql.matches;\n        });\n      }\n      /**\n       * Gets an observable of results for the given queries that will emit new results for any changes\n       * in matching of the given queries.\n       * @param value One or more media queries to check.\n       * @returns A stream of matches for the given queries.\n       */\n\n    }, {\n      key: \"observe\",\n      value: function observe(value) {\n        var _this2 = this;\n\n        var queries = splitQueries(coerceArray(value));\n        var observables = queries.map(function (query) {\n          return _this2._registerQuery(query).observable;\n        });\n        var stateObservable = combineLatest(observables); // Emit the first state immediately, and then debounce the subsequent emissions.\n\n        stateObservable = concat(stateObservable.pipe(take(1)), stateObservable.pipe(skip(1), debounceTime(0)));\n        return stateObservable.pipe(map(function (breakpointStates) {\n          var response = {\n            matches: false,\n            breakpoints: {}\n          };\n          breakpointStates.forEach(function (state) {\n            response.matches = response.matches || state.matches;\n            response.breakpoints[state.query] = state.matches;\n          });\n          return response;\n        }));\n      }\n      /** Registers a specific query to be listened for. */\n\n    }, {\n      key: \"_registerQuery\",\n      value: function _registerQuery(query) {\n        var _this3 = this;\n\n        // Only set up a new MediaQueryList if it is not already being listened for.\n        if (this._queries.has(query)) {\n          return this._queries.get(query);\n        }\n\n        var mql = this._mediaMatcher.matchMedia(query); // Create callback for match changes and add it is as a listener.\n\n\n        var queryObservable = new Observable(function (observer) {\n          // Listener callback methods are wrapped to be placed back in ngZone. Callbacks must be placed\n          // back into the zone because matchMedia is only included in Zone.js by loading the\n          // webapis-media-query.js file alongside the zone.js file.  Additionally, some browsers do not\n          // have MediaQueryList inherit from EventTarget, which causes inconsistencies in how Zone.js\n          // patches it.\n          var handler = function handler(e) {\n            return _this3._zone.run(function () {\n              return observer.next(e);\n            });\n          };\n\n          mql.addListener(handler);\n          return function () {\n            mql.removeListener(handler);\n          };\n        }).pipe(startWith(mql), map(function (nextMql) {\n          return {\n            query: query,\n            matches: nextMql.matches\n          };\n        }), takeUntil(this._destroySubject)); // Add the MediaQueryList to the set of queries.\n\n        var output = {\n          observable: queryObservable,\n          mql: mql\n        };\n\n        this._queries.set(query, output);\n\n        return output;\n      }\n    }]);\n\n    return BreakpointObserver;\n  }();\n\n  BreakpointObserver.ɵfac = function BreakpointObserver_Factory(t) {\n    return new (t || BreakpointObserver)(ɵngcc0.ɵɵinject(MediaMatcher), ɵngcc0.ɵɵinject(ɵngcc0.NgZone));\n  };\n\n  BreakpointObserver.ɵprov = ɵɵdefineInjectable({\n    factory: function BreakpointObserver_Factory() {\n      return new BreakpointObserver(ɵɵinject(MediaMatcher), ɵɵinject(NgZone));\n    },\n    token: BreakpointObserver,\n    providedIn: \"root\"\n  });\n\n  BreakpointObserver.ctorParameters = function () {\n    return [{\n      type: MediaMatcher\n    }, {\n      type: NgZone\n    }];\n  };\n  /*@__PURE__*/\n\n\n  (function () {\n    ɵngcc0.ɵsetClassMetadata(BreakpointObserver, [{\n      type: Injectable,\n      args: [{\n        providedIn: 'root'\n      }]\n    }], function () {\n      return [{\n        type: MediaMatcher\n      }, {\n        type: ɵngcc0.NgZone\n      }];\n    }, null);\n  })();\n\n  return BreakpointObserver;\n}();\n/**\n * Split each query string into separate query strings if two queries are provided as comma\n * separated.\n */\n\n\nfunction splitQueries(queries) {\n  return queries.map(function (query) {\n    return query.split(',');\n  }).reduce(function (a1, a2) {\n    return a1.concat(a2);\n  }).map(function (query) {\n    return query.trim();\n  });\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// PascalCase is being used as Breakpoints is used like an enum.\n// tslint:disable-next-line:variable-name\n\n\nvar Breakpoints = {\n  XSmall: '(max-width: 599.99px)',\n  Small: '(min-width: 600px) and (max-width: 959.99px)',\n  Medium: '(min-width: 960px) and (max-width: 1279.99px)',\n  Large: '(min-width: 1280px) and (max-width: 1919.99px)',\n  XLarge: '(min-width: 1920px)',\n  Handset: '(max-width: 599.99px) and (orientation: portrait), ' + '(max-width: 959.99px) and (orientation: landscape)',\n  Tablet: '(min-width: 600px) and (max-width: 839.99px) and (orientation: portrait), ' + '(min-width: 960px) and (max-width: 1279.99px) and (orientation: landscape)',\n  Web: '(min-width: 840px) and (orientation: portrait), ' + '(min-width: 1280px) and (orientation: landscape)',\n  HandsetPortrait: '(max-width: 599.99px) and (orientation: portrait)',\n  TabletPortrait: '(min-width: 600px) and (max-width: 839.99px) and (orientation: portrait)',\n  WebPortrait: '(min-width: 840px) and (orientation: portrait)',\n  HandsetLandscape: '(max-width: 959.99px) and (orientation: landscape)',\n  TabletLandscape: '(min-width: 960px) and (max-width: 1279.99px) and (orientation: landscape)',\n  WebLandscape: '(min-width: 1280px) and (orientation: landscape)'\n};\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BreakpointObserver, Breakpoints, LayoutModule, MediaMatcher };","map":{"version":3,"sources":["../../../../../../src/cdk/layout/layout-module.ts","../../../../../../src/cdk/layout/media-matcher.ts","../../../../../../src/cdk/layout/breakpoints-observer.ts","../../../../../../src/cdk/layout/breakpoints.ts","../../../../../../src/cdk/layout/public-api.ts","../../../../../../src/cdk/layout/index.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\n\n\n@NgModule({})\nexport class LayoutModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Injectable} from '@angular/core';\nimport {Platform} from '@angular/cdk/platform';\n\n/** Global registry for all dynamically-created, injected media queries. */\nconst mediaQueriesForWebkitCompatibility: Set<string> = new Set<string>();\n\n/** Style tag that holds all of the dynamically-created media queries. */\nlet mediaQueryStyleNode: HTMLStyleElement | undefined;\n\n/** A utility for calling matchMedia queries. */\n@Injectable({providedIn: 'root'})\nexport class MediaMatcher {\n  /** The internal matchMedia method to return back a MediaQueryList like object. */\n  private _matchMedia: (query: string) => MediaQueryList;\n\n  constructor(private _platform: Platform) {\n    this._matchMedia = this._platform.isBrowser && window.matchMedia ?\n      // matchMedia is bound to the window scope intentionally as it is an illegal invocation to\n      // call it from a different scope.\n      window.matchMedia.bind(window) :\n      noopMatchMedia;\n  }\n\n  /**\n   * Evaluates the given media query and returns the native MediaQueryList from which results\n   * can be retrieved.\n   * Confirms the layout engine will trigger for the selector query provided and returns the\n   * MediaQueryList for the query provided.\n   */\n  matchMedia(query: string): MediaQueryList {\n    if (this._platform.WEBKIT) {\n      createEmptyStyleRule(query);\n    }\n    return this._matchMedia(query);\n  }\n}\n\n/**\n * For Webkit engines that only trigger the MediaQueryListListener when\n * there is at least one CSS selector for the respective media query.\n */\nfunction createEmptyStyleRule(query: string) {\n  if (mediaQueriesForWebkitCompatibility.has(query)) {\n    return;\n  }\n\n  try {\n    if (!mediaQueryStyleNode) {\n      mediaQueryStyleNode = document.createElement('style');\n      mediaQueryStyleNode.setAttribute('type', 'text/css');\n      document.head!.appendChild(mediaQueryStyleNode);\n    }\n\n    if (mediaQueryStyleNode.sheet) {\n      (mediaQueryStyleNode.sheet as CSSStyleSheet)\n          .insertRule(`@media ${query} {.fx-query-test{ }}`, 0);\n      mediaQueriesForWebkitCompatibility.add(query);\n    }\n  } catch (e) {\n    console.error(e);\n  }\n}\n\n/** No-op matchMedia replacement for non-browser platforms. */\nfunction noopMatchMedia(query: string): MediaQueryList {\n  // Use `as any` here to avoid adding additional necessary properties for\n  // the noop matcher.\n  return {\n    matches: query === 'all' || query === '',\n    media: query,\n    addListener: () => {},\n    removeListener: () => {}\n  } as any;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, NgZone, OnDestroy} from '@angular/core';\nimport {MediaMatcher} from './media-matcher';\nimport {combineLatest, concat, Observable, Subject, Observer} from 'rxjs';\nimport {debounceTime, map, skip, startWith, take, takeUntil} from 'rxjs/operators';\nimport {coerceArray} from '@angular/cdk/coercion';\n\n\n/** The current state of a layout breakpoint. */\nexport interface BreakpointState {\n  /** Whether the breakpoint is currently matching. */\n  matches: boolean;\n  /**\n   * A key boolean pair for each query provided to the observe method,\n   * with its current matched state.\n   */\n  breakpoints: {\n    [key: string]: boolean;\n  };\n}\n\n/** The current state of a layout breakpoint. */\ninterface InternalBreakpointState {\n  /** Whether the breakpoint is currently matching. */\n  matches: boolean;\n  /** The media query being to be matched */\n  query: string;\n}\n\ninterface Query {\n  observable: Observable<InternalBreakpointState>;\n  mql: MediaQueryList;\n}\n\n/** Utility for checking the matching state of @media queries. */\n@Injectable({providedIn: 'root'})\nexport class BreakpointObserver implements OnDestroy {\n  /**  A map of all media queries currently being listened for. */\n  private _queries = new Map<string, Query>();\n  /** A subject for all other observables to takeUntil based on. */\n  private _destroySubject = new Subject<void>();\n\n  constructor(private _mediaMatcher: MediaMatcher, private _zone: NgZone) {}\n\n  /** Completes the active subject, signalling to all other observables to complete. */\n  ngOnDestroy() {\n    this._destroySubject.next();\n    this._destroySubject.complete();\n  }\n\n  /**\n   * Whether one or more media queries match the current viewport size.\n   * @param value One or more media queries to check.\n   * @returns Whether any of the media queries match.\n   */\n  isMatched(value: string | string[]): boolean {\n    const queries = splitQueries(coerceArray(value));\n    return queries.some(mediaQuery => this._registerQuery(mediaQuery).mql.matches);\n  }\n\n  /**\n   * Gets an observable of results for the given queries that will emit new results for any changes\n   * in matching of the given queries.\n   * @param value One or more media queries to check.\n   * @returns A stream of matches for the given queries.\n   */\n  observe(value: string | string[]): Observable<BreakpointState> {\n    const queries = splitQueries(coerceArray(value));\n    const observables = queries.map(query => this._registerQuery(query).observable);\n\n    let stateObservable = combineLatest(observables);\n    // Emit the first state immediately, and then debounce the subsequent emissions.\n    stateObservable = concat(\n      stateObservable.pipe(take(1)),\n      stateObservable.pipe(skip(1), debounceTime(0)));\n    return stateObservable.pipe(map((breakpointStates: InternalBreakpointState[]) => {\n      const response: BreakpointState = {\n        matches: false,\n        breakpoints: {},\n      };\n      breakpointStates.forEach((state: InternalBreakpointState) => {\n        response.matches = response.matches || state.matches;\n        response.breakpoints[state.query] = state.matches;\n      });\n      return response;\n    }));\n  }\n\n  /** Registers a specific query to be listened for. */\n  private _registerQuery(query: string): Query {\n    // Only set up a new MediaQueryList if it is not already being listened for.\n    if (this._queries.has(query)) {\n      return this._queries.get(query)!;\n    }\n\n    const mql: MediaQueryList = this._mediaMatcher.matchMedia(query);\n\n    // Create callback for match changes and add it is as a listener.\n    const queryObservable = new Observable<MediaQueryList>((observer: Observer<MediaQueryList>) => {\n      // Listener callback methods are wrapped to be placed back in ngZone. Callbacks must be placed\n      // back into the zone because matchMedia is only included in Zone.js by loading the\n      // webapis-media-query.js file alongside the zone.js file.  Additionally, some browsers do not\n      // have MediaQueryList inherit from EventTarget, which causes inconsistencies in how Zone.js\n      // patches it.\n      const handler = (e: any) => this._zone.run(() => observer.next(e));\n      mql.addListener(handler);\n\n      return () => {\n        mql.removeListener(handler);\n      };\n    }).pipe(\n      startWith(mql),\n      map((nextMql: MediaQueryList) => ({query, matches: nextMql.matches})),\n      takeUntil(this._destroySubject)\n    );\n\n    // Add the MediaQueryList to the set of queries.\n    const output = {observable: queryObservable, mql};\n    this._queries.set(query, output);\n    return output;\n  }\n}\n\n/**\n * Split each query string into separate query strings if two queries are provided as comma\n * separated.\n */\nfunction splitQueries(queries: string[]): string[] {\n  return queries.map((query: string) => query.split(','))\n                .reduce((a1: string[], a2: string[]) => a1.concat(a2))\n                .map(query => query.trim());\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// PascalCase is being used as Breakpoints is used like an enum.\n// tslint:disable-next-line:variable-name\nexport const Breakpoints = {\n  XSmall: '(max-width: 599.99px)',\n  Small: '(min-width: 600px) and (max-width: 959.99px)',\n  Medium: '(min-width: 960px) and (max-width: 1279.99px)',\n  Large: '(min-width: 1280px) and (max-width: 1919.99px)',\n  XLarge: '(min-width: 1920px)',\n\n  Handset: '(max-width: 599.99px) and (orientation: portrait), ' +\n           '(max-width: 959.99px) and (orientation: landscape)',\n  Tablet: '(min-width: 600px) and (max-width: 839.99px) and (orientation: portrait), ' +\n          '(min-width: 960px) and (max-width: 1279.99px) and (orientation: landscape)',\n  Web: '(min-width: 840px) and (orientation: portrait), ' +\n       '(min-width: 1280px) and (orientation: landscape)',\n\n  HandsetPortrait: '(max-width: 599.99px) and (orientation: portrait)',\n  TabletPortrait: '(min-width: 600px) and (max-width: 839.99px) and (orientation: portrait)',\n  WebPortrait: '(min-width: 840px) and (orientation: portrait)',\n\n  HandsetLandscape: '(max-width: 959.99px) and (orientation: landscape)',\n  TabletLandscape: '(min-width: 960px) and (max-width: 1279.99px) and (orientation: landscape)',\n  WebLandscape: '(min-width: 1280px) and (orientation: landscape)',\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport {LayoutModule} from './layout-module';\nexport {BreakpointObserver, BreakpointState} from './breakpoints-observer';\nexport {Breakpoints} from './breakpoints';\nexport {MediaMatcher} from './media-matcher';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]},"metadata":{},"sourceType":"module"}