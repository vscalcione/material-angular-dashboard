{"ast":null,"code":"import _classCallCheck from \"/mnt/c/Users/francesco/Desktop/material-angular-dashboard/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/mnt/c/Users/francesco/Desktop/material-angular-dashboard/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { normalizePassiveListenerOptions, Platform, PlatformModule } from '@angular/cdk/platform';\nimport { ɵɵdefineInjectable, ɵɵinject, NgZone, Injectable, EventEmitter, Directive, ElementRef, Output, Optional, Inject, Input, HostListener, NgModule } from '@angular/core';\nimport { coerceElement, coerceNumberProperty, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { EMPTY, Subject, fromEvent } from 'rxjs';\nimport { auditTime, takeUntil } from 'rxjs/operators';\nimport { DOCUMENT } from '@angular/common';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Options to pass to the animationstart listener. */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nvar listenerOptions = normalizePassiveListenerOptions({\n  passive: true\n});\n/**\n * An injectable service that can be used to monitor the autofill state of an input.\n * Based on the following blog post:\n * https://medium.com/@brunn/detecting-autofilled-fields-in-javascript-aed598d25da7\n */\n\nvar AutofillMonitor =\n/** @class */\nfunction () {\n  var AutofillMonitor = /*#__PURE__*/function () {\n    function AutofillMonitor(_platform, _ngZone) {\n      _classCallCheck(this, AutofillMonitor);\n\n      this._platform = _platform;\n      this._ngZone = _ngZone;\n      this._monitoredElements = new Map();\n    }\n\n    _createClass(AutofillMonitor, [{\n      key: \"monitor\",\n      value: function monitor(elementOrRef) {\n        var _this = this;\n\n        if (!this._platform.isBrowser) {\n          return EMPTY;\n        }\n\n        var element = coerceElement(elementOrRef);\n\n        var info = this._monitoredElements.get(element);\n\n        if (info) {\n          return info.subject.asObservable();\n        }\n\n        var result = new Subject();\n        var cssClass = 'cdk-text-field-autofilled';\n\n        var listener = function listener(event) {\n          // Animation events fire on initial element render, we check for the presence of the autofill\n          // CSS class to make sure this is a real change in state, not just the initial render before\n          // we fire off events.\n          if (event.animationName === 'cdk-text-field-autofill-start' && !element.classList.contains(cssClass)) {\n            element.classList.add(cssClass);\n\n            _this._ngZone.run(function () {\n              return result.next({\n                target: event.target,\n                isAutofilled: true\n              });\n            });\n          } else if (event.animationName === 'cdk-text-field-autofill-end' && element.classList.contains(cssClass)) {\n            element.classList.remove(cssClass);\n\n            _this._ngZone.run(function () {\n              return result.next({\n                target: event.target,\n                isAutofilled: false\n              });\n            });\n          }\n        };\n\n        this._ngZone.runOutsideAngular(function () {\n          element.addEventListener('animationstart', listener, listenerOptions);\n          element.classList.add('cdk-text-field-autofill-monitored');\n        });\n\n        this._monitoredElements.set(element, {\n          subject: result,\n          unlisten: function unlisten() {\n            element.removeEventListener('animationstart', listener, listenerOptions);\n          }\n        });\n\n        return result.asObservable();\n      }\n    }, {\n      key: \"stopMonitoring\",\n      value: function stopMonitoring(elementOrRef) {\n        var element = coerceElement(elementOrRef);\n\n        var info = this._monitoredElements.get(element);\n\n        if (info) {\n          info.unlisten();\n          info.subject.complete();\n          element.classList.remove('cdk-text-field-autofill-monitored');\n          element.classList.remove('cdk-text-field-autofilled');\n\n          this._monitoredElements.delete(element);\n        }\n      }\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        var _this2 = this;\n\n        this._monitoredElements.forEach(function (_info, element) {\n          return _this2.stopMonitoring(element);\n        });\n      }\n    }]);\n\n    return AutofillMonitor;\n  }();\n\n  AutofillMonitor.ɵfac = function AutofillMonitor_Factory(t) {\n    return new (t || AutofillMonitor)(ɵngcc0.ɵɵinject(ɵngcc1.Platform), ɵngcc0.ɵɵinject(ɵngcc0.NgZone));\n  };\n\n  AutofillMonitor.ɵprov = ɵɵdefineInjectable({\n    factory: function AutofillMonitor_Factory() {\n      return new AutofillMonitor(ɵɵinject(Platform), ɵɵinject(NgZone));\n    },\n    token: AutofillMonitor,\n    providedIn: \"root\"\n  });\n\n  AutofillMonitor.ctorParameters = function () {\n    return [{\n      type: Platform\n    }, {\n      type: NgZone\n    }];\n  };\n  /*@__PURE__*/\n\n\n  (function () {\n    ɵngcc0.ɵsetClassMetadata(AutofillMonitor, [{\n      type: Injectable,\n      args: [{\n        providedIn: 'root'\n      }]\n    }], function () {\n      return [{\n        type: ɵngcc1.Platform\n      }, {\n        type: ɵngcc0.NgZone\n      }];\n    }, null);\n  })();\n\n  return AutofillMonitor;\n}();\n/** A directive that can be used to monitor the autofill state of an input. */\n\n\nvar CdkAutofill =\n/** @class */\nfunction () {\n  var CdkAutofill = /*#__PURE__*/function () {\n    function CdkAutofill(_elementRef, _autofillMonitor) {\n      _classCallCheck(this, CdkAutofill);\n\n      this._elementRef = _elementRef;\n      this._autofillMonitor = _autofillMonitor;\n      /** Emits when the autofill state of the element changes. */\n\n      this.cdkAutofill = new EventEmitter();\n    }\n\n    _createClass(CdkAutofill, [{\n      key: \"ngOnInit\",\n      value: function ngOnInit() {\n        var _this3 = this;\n\n        this._autofillMonitor.monitor(this._elementRef).subscribe(function (event) {\n          return _this3.cdkAutofill.emit(event);\n        });\n      }\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        this._autofillMonitor.stopMonitoring(this._elementRef);\n      }\n    }]);\n\n    return CdkAutofill;\n  }();\n\n  CdkAutofill.ɵfac = function CdkAutofill_Factory(t) {\n    return new (t || CdkAutofill)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(AutofillMonitor));\n  };\n\n  CdkAutofill.ɵdir = ɵngcc0.ɵɵdefineDirective({\n    type: CdkAutofill,\n    selectors: [[\"\", \"cdkAutofill\", \"\"]],\n    outputs: {\n      cdkAutofill: \"cdkAutofill\"\n    }\n  });\n\n  CdkAutofill.ctorParameters = function () {\n    return [{\n      type: ElementRef\n    }, {\n      type: AutofillMonitor\n    }];\n  };\n\n  CdkAutofill.propDecorators = {\n    cdkAutofill: [{\n      type: Output\n    }]\n  };\n  /*@__PURE__*/\n\n  (function () {\n    ɵngcc0.ɵsetClassMetadata(CdkAutofill, [{\n      type: Directive,\n      args: [{\n        selector: '[cdkAutofill]'\n      }]\n    }], function () {\n      return [{\n        type: ɵngcc0.ElementRef\n      }, {\n        type: AutofillMonitor\n      }];\n    }, {\n      cdkAutofill: [{\n        type: Output\n      }]\n    });\n  })();\n\n  return CdkAutofill;\n}();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Directive to automatically resize a textarea to fit its content. */\n\n\nvar CdkTextareaAutosize =\n/** @class */\nfunction () {\n  var CdkTextareaAutosize = /*#__PURE__*/function () {\n    function CdkTextareaAutosize(_elementRef, _platform, _ngZone,\n    /** @breaking-change 11.0.0 make document required */\n    document) {\n      _classCallCheck(this, CdkTextareaAutosize);\n\n      this._elementRef = _elementRef;\n      this._platform = _platform;\n      this._ngZone = _ngZone;\n      this._destroyed = new Subject();\n      this._enabled = true;\n      /**\n       * Value of minRows as of last resize. If the minRows has decreased, the\n       * height of the textarea needs to be recomputed to reflect the new minimum. The maxHeight\n       * does not have the same problem because it does not affect the textarea's scrollHeight.\n       */\n\n      this._previousMinRows = -1;\n      this._document = document;\n      this._textareaElement = this._elementRef.nativeElement;\n      this._measuringClass = _platform.FIREFOX ? 'cdk-textarea-autosize-measuring-firefox' : 'cdk-textarea-autosize-measuring';\n    }\n    /** Minimum amount of rows in the textarea. */\n\n\n    _createClass(CdkTextareaAutosize, [{\n      key: \"_setMinHeight\",\n\n      /** Sets the minimum height of the textarea as determined by minRows. */\n      value: function _setMinHeight() {\n        var minHeight = this.minRows && this._cachedLineHeight ? \"\".concat(this.minRows * this._cachedLineHeight, \"px\") : null;\n\n        if (minHeight) {\n          this._textareaElement.style.minHeight = minHeight;\n        }\n      }\n      /** Sets the maximum height of the textarea as determined by maxRows. */\n\n    }, {\n      key: \"_setMaxHeight\",\n      value: function _setMaxHeight() {\n        var maxHeight = this.maxRows && this._cachedLineHeight ? \"\".concat(this.maxRows * this._cachedLineHeight, \"px\") : null;\n\n        if (maxHeight) {\n          this._textareaElement.style.maxHeight = maxHeight;\n        }\n      }\n    }, {\n      key: \"ngAfterViewInit\",\n      value: function ngAfterViewInit() {\n        var _this4 = this;\n\n        if (this._platform.isBrowser) {\n          // Remember the height which we started with in case autosizing is disabled\n          this._initialHeight = this._textareaElement.style.height;\n          this.resizeToFitContent();\n\n          this._ngZone.runOutsideAngular(function () {\n            var window = _this4._getWindow();\n\n            fromEvent(window, 'resize').pipe(auditTime(16), takeUntil(_this4._destroyed)).subscribe(function () {\n              return _this4.resizeToFitContent(true);\n            });\n          });\n        }\n      }\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        this._destroyed.next();\n\n        this._destroyed.complete();\n      }\n      /**\n       * Cache the height of a single-row textarea if it has not already been cached.\n       *\n       * We need to know how large a single \"row\" of a textarea is in order to apply minRows and\n       * maxRows. For the initial version, we will assume that the height of a single line in the\n       * textarea does not ever change.\n       */\n\n    }, {\n      key: \"_cacheTextareaLineHeight\",\n      value: function _cacheTextareaLineHeight() {\n        if (this._cachedLineHeight) {\n          return;\n        } // Use a clone element because we have to override some styles.\n\n\n        var textareaClone = this._textareaElement.cloneNode(false);\n\n        textareaClone.rows = 1; // Use `position: absolute` so that this doesn't cause a browser layout and use\n        // `visibility: hidden` so that nothing is rendered. Clear any other styles that\n        // would affect the height.\n\n        textareaClone.style.position = 'absolute';\n        textareaClone.style.visibility = 'hidden';\n        textareaClone.style.border = 'none';\n        textareaClone.style.padding = '0';\n        textareaClone.style.height = '';\n        textareaClone.style.minHeight = '';\n        textareaClone.style.maxHeight = ''; // In Firefox it happens that textarea elements are always bigger than the specified amount\n        // of rows. This is because Firefox tries to add extra space for the horizontal scrollbar.\n        // As a workaround that removes the extra space for the scrollbar, we can just set overflow\n        // to hidden. This ensures that there is no invalid calculation of the line height.\n        // See Firefox bug report: https://bugzilla.mozilla.org/show_bug.cgi?id=33654\n\n        textareaClone.style.overflow = 'hidden';\n\n        this._textareaElement.parentNode.appendChild(textareaClone);\n\n        this._cachedLineHeight = textareaClone.clientHeight;\n\n        this._textareaElement.parentNode.removeChild(textareaClone); // Min and max heights have to be re-calculated if the cached line height changes\n\n\n        this._setMinHeight();\n\n        this._setMaxHeight();\n      }\n    }, {\n      key: \"ngDoCheck\",\n      value: function ngDoCheck() {\n        if (this._platform.isBrowser) {\n          this.resizeToFitContent();\n        }\n      }\n      /**\n       * Resize the textarea to fit its content.\n       * @param force Whether to force a height recalculation. By default the height will be\n       *    recalculated only if the value changed since the last call.\n       */\n\n    }, {\n      key: \"resizeToFitContent\",\n      value: function resizeToFitContent() {\n        var _this5 = this;\n\n        var force = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n        // If autosizing is disabled, just skip everything else\n        if (!this._enabled) {\n          return;\n        }\n\n        this._cacheTextareaLineHeight(); // If we haven't determined the line-height yet, we know we're still hidden and there's no point\n        // in checking the height of the textarea.\n\n\n        if (!this._cachedLineHeight) {\n          return;\n        }\n\n        var textarea = this._elementRef.nativeElement;\n        var value = textarea.value; // Only resize if the value or minRows have changed since these calculations can be expensive.\n\n        if (!force && this._minRows === this._previousMinRows && value === this._previousValue) {\n          return;\n        }\n\n        var placeholderText = textarea.placeholder; // Reset the textarea height to auto in order to shrink back to its default size.\n        // Also temporarily force overflow:hidden, so scroll bars do not interfere with calculations.\n        // Long placeholders that are wider than the textarea width may lead to a bigger scrollHeight\n        // value. To ensure that the scrollHeight is not bigger than the content, the placeholders\n        // need to be removed temporarily.\n\n        textarea.classList.add(this._measuringClass);\n        textarea.placeholder = ''; // The measuring class includes a 2px padding to workaround an issue with Chrome,\n        // so we account for that extra space here by subtracting 4 (2px top + 2px bottom).\n\n        var height = textarea.scrollHeight - 4; // Use the scrollHeight to know how large the textarea *would* be if fit its entire value.\n\n        textarea.style.height = \"\".concat(height, \"px\");\n        textarea.classList.remove(this._measuringClass);\n        textarea.placeholder = placeholderText;\n\n        this._ngZone.runOutsideAngular(function () {\n          if (typeof requestAnimationFrame !== 'undefined') {\n            requestAnimationFrame(function () {\n              return _this5._scrollToCaretPosition(textarea);\n            });\n          } else {\n            setTimeout(function () {\n              return _this5._scrollToCaretPosition(textarea);\n            });\n          }\n        });\n\n        this._previousValue = value;\n        this._previousMinRows = this._minRows;\n      }\n      /**\n       * Resets the textarea to its original size\n       */\n\n    }, {\n      key: \"reset\",\n      value: function reset() {\n        // Do not try to change the textarea, if the initialHeight has not been determined yet\n        // This might potentially remove styles when reset() is called before ngAfterViewInit\n        if (this._initialHeight !== undefined) {\n          this._textareaElement.style.height = this._initialHeight;\n        }\n      } // In Ivy the `host` metadata will be merged, whereas in ViewEngine it is overridden. In order\n      // to avoid double event listeners, we need to use `HostListener`. Once Ivy is the default, we\n      // can move this back into `host`.\n      // tslint:disable:no-host-decorator-in-concrete\n\n    }, {\n      key: \"_noopInputHandler\",\n      value: function _noopInputHandler() {// no-op handler that ensures we're running change detection on input events.\n      }\n      /** Access injected document if available or fallback to global document reference */\n\n    }, {\n      key: \"_getDocument\",\n      value: function _getDocument() {\n        return this._document || document;\n      }\n      /** Use defaultView of injected document if available or fallback to global window reference */\n\n    }, {\n      key: \"_getWindow\",\n      value: function _getWindow() {\n        var doc = this._getDocument();\n\n        return doc.defaultView || window;\n      }\n      /**\n       * Scrolls a textarea to the caret position. On Firefox resizing the textarea will\n       * prevent it from scrolling to the caret position. We need to re-set the selection\n       * in order for it to scroll to the proper position.\n       */\n\n    }, {\n      key: \"_scrollToCaretPosition\",\n      value: function _scrollToCaretPosition(textarea) {\n        var selectionStart = textarea.selectionStart,\n            selectionEnd = textarea.selectionEnd;\n\n        var document = this._getDocument(); // IE will throw an \"Unspecified error\" if we try to set the selection range after the\n        // element has been removed from the DOM. Assert that the directive hasn't been destroyed\n        // between the time we requested the animation frame and when it was executed.\n        // Also note that we have to assert that the textarea is focused before we set the\n        // selection range. Setting the selection range on a non-focused textarea will cause\n        // it to receive focus on IE and Edge.\n\n\n        if (!this._destroyed.isStopped && document.activeElement === textarea) {\n          textarea.setSelectionRange(selectionStart, selectionEnd);\n        }\n      }\n    }, {\n      key: \"minRows\",\n      get: function get() {\n        return this._minRows;\n      },\n      set: function set(value) {\n        this._minRows = coerceNumberProperty(value);\n\n        this._setMinHeight();\n      }\n      /** Maximum amount of rows in the textarea. */\n\n    }, {\n      key: \"maxRows\",\n      get: function get() {\n        return this._maxRows;\n      },\n      set: function set(value) {\n        this._maxRows = coerceNumberProperty(value);\n\n        this._setMaxHeight();\n      }\n      /** Whether autosizing is enabled or not */\n\n    }, {\n      key: \"enabled\",\n      get: function get() {\n        return this._enabled;\n      },\n      set: function set(value) {\n        value = coerceBooleanProperty(value); // Only act if the actual value changed. This specifically helps to not run\n        // resizeToFitContent too early (i.e. before ngAfterViewInit)\n\n        if (this._enabled !== value) {\n          (this._enabled = value) ? this.resizeToFitContent(true) : this.reset();\n        }\n      }\n    }]);\n\n    return CdkTextareaAutosize;\n  }();\n\n  CdkTextareaAutosize.ɵfac = function CdkTextareaAutosize_Factory(t) {\n    return new (t || CdkTextareaAutosize)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Platform), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(DOCUMENT, 8));\n  };\n\n  CdkTextareaAutosize.ɵdir = ɵngcc0.ɵɵdefineDirective({\n    type: CdkTextareaAutosize,\n    selectors: [[\"textarea\", \"cdkTextareaAutosize\", \"\"]],\n    hostAttrs: [\"rows\", \"1\", 1, \"cdk-textarea-autosize\"],\n    hostBindings: function CdkTextareaAutosize_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"input\", function CdkTextareaAutosize_input_HostBindingHandler() {\n          return ctx._noopInputHandler();\n        });\n      }\n    },\n    inputs: {\n      minRows: [\"cdkAutosizeMinRows\", \"minRows\"],\n      maxRows: [\"cdkAutosizeMaxRows\", \"maxRows\"],\n      enabled: [\"cdkTextareaAutosize\", \"enabled\"]\n    },\n    exportAs: [\"cdkTextareaAutosize\"]\n  });\n\n  CdkTextareaAutosize.ctorParameters = function () {\n    return [{\n      type: ElementRef\n    }, {\n      type: Platform\n    }, {\n      type: NgZone\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  };\n\n  CdkTextareaAutosize.propDecorators = {\n    minRows: [{\n      type: Input,\n      args: ['cdkAutosizeMinRows']\n    }],\n    maxRows: [{\n      type: Input,\n      args: ['cdkAutosizeMaxRows']\n    }],\n    enabled: [{\n      type: Input,\n      args: ['cdkTextareaAutosize']\n    }],\n    _noopInputHandler: [{\n      type: HostListener,\n      args: ['input']\n    }]\n  };\n  /*@__PURE__*/\n\n  (function () {\n    ɵngcc0.ɵsetClassMetadata(CdkTextareaAutosize, [{\n      type: Directive,\n      args: [{\n        selector: 'textarea[cdkTextareaAutosize]',\n        exportAs: 'cdkTextareaAutosize',\n        host: {\n          'class': 'cdk-textarea-autosize',\n          // Textarea elements that have the directive applied should have a single row by default.\n          // Browsers normally show two rows by default and therefore this limits the minRows binding.\n          'rows': '1'\n        }\n      }]\n    }], function () {\n      return [{\n        type: ɵngcc0.ElementRef\n      }, {\n        type: ɵngcc1.Platform\n      }, {\n        type: ɵngcc0.NgZone\n      }, {\n        type: undefined,\n        decorators: [{\n          type: Optional\n        }, {\n          type: Inject,\n          args: [DOCUMENT]\n        }]\n      }];\n    }, {\n      minRows: [{\n        type: Input,\n        args: ['cdkAutosizeMinRows']\n      }],\n      maxRows: [{\n        type: Input,\n        args: ['cdkAutosizeMaxRows']\n      }],\n      enabled: [{\n        type: Input,\n        args: ['cdkTextareaAutosize']\n      }],\n      _noopInputHandler: [{\n        type: HostListener,\n        args: ['input']\n      }]\n    });\n  })();\n\n  return CdkTextareaAutosize;\n}();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nvar TextFieldModule =\n/** @class */\nfunction () {\n  var TextFieldModule = function TextFieldModule() {\n    _classCallCheck(this, TextFieldModule);\n  };\n\n  TextFieldModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n    type: TextFieldModule\n  });\n  TextFieldModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n    factory: function TextFieldModule_Factory(t) {\n      return new (t || TextFieldModule)();\n    },\n    imports: [[PlatformModule]]\n  });\n\n  (function () {\n    (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(TextFieldModule, {\n      declarations: function declarations() {\n        return [CdkAutofill, CdkTextareaAutosize];\n      },\n      imports: function imports() {\n        return [PlatformModule];\n      },\n      exports: function exports() {\n        return [CdkAutofill, CdkTextareaAutosize];\n      }\n    });\n  })();\n  /*@__PURE__*/\n\n\n  (function () {\n    ɵngcc0.ɵsetClassMetadata(TextFieldModule, [{\n      type: NgModule,\n      args: [{\n        declarations: [CdkAutofill, CdkTextareaAutosize],\n        imports: [PlatformModule],\n        exports: [CdkAutofill, CdkTextareaAutosize]\n      }]\n    }], null, null);\n  })();\n\n  return TextFieldModule;\n}();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { AutofillMonitor, CdkAutofill, CdkTextareaAutosize, TextFieldModule };","map":{"version":3,"sources":["../../../../../../src/cdk/text-field/autofill.ts","../../../../../../src/cdk/text-field/autosize.ts","../../../../../../src/cdk/text-field/text-field-module.ts","../../../../../../src/cdk/text-field/public-api.ts","../../../../../../src/cdk/text-field/index.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform, normalizePassiveListenerOptions} from '@angular/cdk/platform';\nimport {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Injectable,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport {coerceElement} from '@angular/cdk/coercion';\nimport {EMPTY, Observable, Subject} from 'rxjs';\n\n\n/** An event that is emitted when the autofill state of an input changes. */\nexport type AutofillEvent = {\n  /** The element whose autofill state changes. */\n  target: Element;\n  /** Whether the element is currently autofilled. */\n  isAutofilled: boolean;\n};\n\n\n/** Used to track info about currently monitored elements. */\ntype MonitoredElementInfo = {\n  subject: Subject<AutofillEvent>;\n  unlisten: () => void;\n};\n\n\n/** Options to pass to the animationstart listener. */\nconst listenerOptions = normalizePassiveListenerOptions({passive: true});\n\n\n/**\n * An injectable service that can be used to monitor the autofill state of an input.\n * Based on the following blog post:\n * https://medium.com/@brunn/detecting-autofilled-fields-in-javascript-aed598d25da7\n */\n@Injectable({providedIn: 'root'})\nexport class AutofillMonitor implements OnDestroy {\n  private _monitoredElements = new Map<Element, MonitoredElementInfo>();\n\n  constructor(private _platform: Platform, private _ngZone: NgZone) {}\n\n  /**\n   * Monitor for changes in the autofill state of the given input element.\n   * @param element The element to monitor.\n   * @return A stream of autofill state changes.\n   */\n  monitor(element: Element): Observable<AutofillEvent>;\n\n  /**\n   * Monitor for changes in the autofill state of the given input element.\n   * @param element The element to monitor.\n   * @return A stream of autofill state changes.\n   */\n  monitor(element: ElementRef<Element>): Observable<AutofillEvent>;\n\n  monitor(elementOrRef: Element | ElementRef<Element>): Observable<AutofillEvent> {\n    if (!this._platform.isBrowser) {\n      return EMPTY;\n    }\n\n    const element = coerceElement(elementOrRef);\n    const info = this._monitoredElements.get(element);\n\n    if (info) {\n      return info.subject.asObservable();\n    }\n\n    const result = new Subject<AutofillEvent>();\n    const cssClass = 'cdk-text-field-autofilled';\n    const listener = ((event: AnimationEvent) => {\n      // Animation events fire on initial element render, we check for the presence of the autofill\n      // CSS class to make sure this is a real change in state, not just the initial render before\n      // we fire off events.\n      if (event.animationName === 'cdk-text-field-autofill-start' &&\n          !element.classList.contains(cssClass)) {\n        element.classList.add(cssClass);\n        this._ngZone.run(() => result.next({target: event.target as Element, isAutofilled: true}));\n      } else if (event.animationName === 'cdk-text-field-autofill-end' &&\n          element.classList.contains(cssClass)) {\n        element.classList.remove(cssClass);\n        this._ngZone.run(() => result.next({target: event.target as Element, isAutofilled: false}));\n      }\n    }) as EventListenerOrEventListenerObject;\n\n    this._ngZone.runOutsideAngular(() => {\n      element.addEventListener('animationstart', listener, listenerOptions);\n      element.classList.add('cdk-text-field-autofill-monitored');\n    });\n\n    this._monitoredElements.set(element, {\n      subject: result,\n      unlisten: () => {\n        element.removeEventListener('animationstart', listener, listenerOptions);\n      }\n    });\n\n    return result.asObservable();\n  }\n\n  /**\n   * Stop monitoring the autofill state of the given input element.\n   * @param element The element to stop monitoring.\n   */\n  stopMonitoring(element: Element): void;\n\n  /**\n   * Stop monitoring the autofill state of the given input element.\n   * @param element The element to stop monitoring.\n   */\n  stopMonitoring(element: ElementRef<Element>): void;\n\n  stopMonitoring(elementOrRef: Element | ElementRef<Element>): void {\n    const element = coerceElement(elementOrRef);\n    const info = this._monitoredElements.get(element);\n\n    if (info) {\n      info.unlisten();\n      info.subject.complete();\n      element.classList.remove('cdk-text-field-autofill-monitored');\n      element.classList.remove('cdk-text-field-autofilled');\n      this._monitoredElements.delete(element);\n    }\n  }\n\n  ngOnDestroy() {\n    this._monitoredElements.forEach((_info, element) => this.stopMonitoring(element));\n  }\n}\n\n\n/** A directive that can be used to monitor the autofill state of an input. */\n@Directive({\n  selector: '[cdkAutofill]',\n})\nexport class CdkAutofill implements OnDestroy, OnInit {\n  /** Emits when the autofill state of the element changes. */\n  @Output() cdkAutofill: EventEmitter<AutofillEvent> = new EventEmitter<AutofillEvent>();\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              private _autofillMonitor: AutofillMonitor) {}\n\n  ngOnInit() {\n    this._autofillMonitor\n      .monitor(this._elementRef)\n      .subscribe(event => this.cdkAutofill.emit(event));\n  }\n\n  ngOnDestroy() {\n    this._autofillMonitor.stopMonitoring(this._elementRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  BooleanInput,\n  coerceBooleanProperty,\n  coerceNumberProperty,\n  NumberInput\n} from '@angular/cdk/coercion';\nimport {\n  Directive,\n  ElementRef,\n  Input,\n  AfterViewInit,\n  DoCheck,\n  OnDestroy,\n  NgZone,\n  HostListener,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {auditTime, takeUntil} from 'rxjs/operators';\nimport {fromEvent, Subject} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\n\n/** Directive to automatically resize a textarea to fit its content. */\n@Directive({\n  selector: 'textarea[cdkTextareaAutosize]',\n  exportAs: 'cdkTextareaAutosize',\n  host: {\n    'class': 'cdk-textarea-autosize',\n    // Textarea elements that have the directive applied should have a single row by default.\n    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n    'rows': '1',\n  },\n})\nexport class CdkTextareaAutosize implements AfterViewInit, DoCheck, OnDestroy {\n  /** Keep track of the previous textarea value to avoid resizing when the value hasn't changed. */\n  private _previousValue?: string;\n  private _initialHeight: string | undefined;\n  private readonly _destroyed = new Subject<void>();\n\n  private _minRows: number;\n  private _maxRows: number;\n  private _enabled: boolean = true;\n\n  /**\n   * Value of minRows as of last resize. If the minRows has decreased, the\n   * height of the textarea needs to be recomputed to reflect the new minimum. The maxHeight\n   * does not have the same problem because it does not affect the textarea's scrollHeight.\n   */\n  private _previousMinRows: number = -1;\n\n  private _textareaElement: HTMLTextAreaElement;\n\n  /** Minimum amount of rows in the textarea. */\n  @Input('cdkAutosizeMinRows')\n  get minRows(): number { return this._minRows; }\n  set minRows(value: number) {\n    this._minRows = coerceNumberProperty(value);\n    this._setMinHeight();\n  }\n\n  /** Maximum amount of rows in the textarea. */\n  @Input('cdkAutosizeMaxRows')\n  get maxRows(): number { return this._maxRows; }\n  set maxRows(value: number) {\n    this._maxRows = coerceNumberProperty(value);\n    this._setMaxHeight();\n  }\n\n  /** Whether autosizing is enabled or not */\n  @Input('cdkTextareaAutosize')\n  get enabled(): boolean { return this._enabled; }\n  set enabled(value: boolean) {\n    value = coerceBooleanProperty(value);\n\n    // Only act if the actual value changed. This specifically helps to not run\n    // resizeToFitContent too early (i.e. before ngAfterViewInit)\n    if (this._enabled !== value) {\n      (this._enabled = value) ? this.resizeToFitContent(true) : this.reset();\n    }\n  }\n\n  /** Cached height of a textarea with a single row. */\n  private _cachedLineHeight: number;\n\n  /** Used to reference correct document/window */\n  protected _document?: Document;\n\n  /** Class that should be applied to the textarea while it's being measured. */\n  private _measuringClass: string;\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              private _platform: Platform,\n              private _ngZone: NgZone,\n              /** @breaking-change 11.0.0 make document required */\n              @Optional() @Inject(DOCUMENT) document?: any) {\n    this._document = document;\n\n    this._textareaElement = this._elementRef.nativeElement as HTMLTextAreaElement;\n    this._measuringClass = _platform.FIREFOX ?\n      'cdk-textarea-autosize-measuring-firefox' :\n      'cdk-textarea-autosize-measuring';\n  }\n\n  /** Sets the minimum height of the textarea as determined by minRows. */\n  _setMinHeight(): void {\n    const minHeight = this.minRows && this._cachedLineHeight ?\n        `${this.minRows * this._cachedLineHeight}px` : null;\n\n    if (minHeight)  {\n      this._textareaElement.style.minHeight = minHeight;\n    }\n  }\n\n  /** Sets the maximum height of the textarea as determined by maxRows. */\n  _setMaxHeight(): void {\n    const maxHeight = this.maxRows && this._cachedLineHeight ?\n        `${this.maxRows * this._cachedLineHeight}px` : null;\n\n    if (maxHeight) {\n      this._textareaElement.style.maxHeight = maxHeight;\n    }\n  }\n\n  ngAfterViewInit() {\n    if (this._platform.isBrowser) {\n      // Remember the height which we started with in case autosizing is disabled\n      this._initialHeight = this._textareaElement.style.height;\n\n      this.resizeToFitContent();\n\n      this._ngZone.runOutsideAngular(() => {\n        const window = this._getWindow();\n\n        fromEvent(window, 'resize')\n          .pipe(auditTime(16), takeUntil(this._destroyed))\n          .subscribe(() => this.resizeToFitContent(true));\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /**\n   * Cache the height of a single-row textarea if it has not already been cached.\n   *\n   * We need to know how large a single \"row\" of a textarea is in order to apply minRows and\n   * maxRows. For the initial version, we will assume that the height of a single line in the\n   * textarea does not ever change.\n   */\n  private _cacheTextareaLineHeight(): void {\n    if (this._cachedLineHeight) {\n      return;\n    }\n\n    // Use a clone element because we have to override some styles.\n    let textareaClone = this._textareaElement.cloneNode(false) as HTMLTextAreaElement;\n    textareaClone.rows = 1;\n\n    // Use `position: absolute` so that this doesn't cause a browser layout and use\n    // `visibility: hidden` so that nothing is rendered. Clear any other styles that\n    // would affect the height.\n    textareaClone.style.position = 'absolute';\n    textareaClone.style.visibility = 'hidden';\n    textareaClone.style.border = 'none';\n    textareaClone.style.padding = '0';\n    textareaClone.style.height = '';\n    textareaClone.style.minHeight = '';\n    textareaClone.style.maxHeight = '';\n\n    // In Firefox it happens that textarea elements are always bigger than the specified amount\n    // of rows. This is because Firefox tries to add extra space for the horizontal scrollbar.\n    // As a workaround that removes the extra space for the scrollbar, we can just set overflow\n    // to hidden. This ensures that there is no invalid calculation of the line height.\n    // See Firefox bug report: https://bugzilla.mozilla.org/show_bug.cgi?id=33654\n    textareaClone.style.overflow = 'hidden';\n\n    this._textareaElement.parentNode!.appendChild(textareaClone);\n    this._cachedLineHeight = textareaClone.clientHeight;\n    this._textareaElement.parentNode!.removeChild(textareaClone);\n\n    // Min and max heights have to be re-calculated if the cached line height changes\n    this._setMinHeight();\n    this._setMaxHeight();\n  }\n\n  ngDoCheck() {\n    if (this._platform.isBrowser) {\n      this.resizeToFitContent();\n    }\n  }\n\n  /**\n   * Resize the textarea to fit its content.\n   * @param force Whether to force a height recalculation. By default the height will be\n   *    recalculated only if the value changed since the last call.\n   */\n  resizeToFitContent(force: boolean = false) {\n    // If autosizing is disabled, just skip everything else\n    if (!this._enabled) {\n      return;\n    }\n\n    this._cacheTextareaLineHeight();\n\n    // If we haven't determined the line-height yet, we know we're still hidden and there's no point\n    // in checking the height of the textarea.\n    if (!this._cachedLineHeight) {\n      return;\n    }\n\n    const textarea = this._elementRef.nativeElement as HTMLTextAreaElement;\n    const value = textarea.value;\n\n    // Only resize if the value or minRows have changed since these calculations can be expensive.\n    if (!force && this._minRows === this._previousMinRows && value === this._previousValue) {\n      return;\n    }\n\n    const placeholderText = textarea.placeholder;\n\n    // Reset the textarea height to auto in order to shrink back to its default size.\n    // Also temporarily force overflow:hidden, so scroll bars do not interfere with calculations.\n    // Long placeholders that are wider than the textarea width may lead to a bigger scrollHeight\n    // value. To ensure that the scrollHeight is not bigger than the content, the placeholders\n    // need to be removed temporarily.\n    textarea.classList.add(this._measuringClass);\n    textarea.placeholder = '';\n\n    // The measuring class includes a 2px padding to workaround an issue with Chrome,\n    // so we account for that extra space here by subtracting 4 (2px top + 2px bottom).\n    const height = textarea.scrollHeight - 4;\n\n    // Use the scrollHeight to know how large the textarea *would* be if fit its entire value.\n    textarea.style.height = `${height}px`;\n    textarea.classList.remove(this._measuringClass);\n    textarea.placeholder = placeholderText;\n\n    this._ngZone.runOutsideAngular(() => {\n      if (typeof requestAnimationFrame !== 'undefined') {\n        requestAnimationFrame(() => this._scrollToCaretPosition(textarea));\n      } else {\n        setTimeout(() => this._scrollToCaretPosition(textarea));\n      }\n    });\n\n    this._previousValue = value;\n    this._previousMinRows = this._minRows;\n  }\n\n  /**\n   * Resets the textarea to its original size\n   */\n  reset() {\n    // Do not try to change the textarea, if the initialHeight has not been determined yet\n    // This might potentially remove styles when reset() is called before ngAfterViewInit\n    if (this._initialHeight !== undefined) {\n      this._textareaElement.style.height = this._initialHeight;\n    }\n  }\n\n  // In Ivy the `host` metadata will be merged, whereas in ViewEngine it is overridden. In order\n  // to avoid double event listeners, we need to use `HostListener`. Once Ivy is the default, we\n  // can move this back into `host`.\n  // tslint:disable:no-host-decorator-in-concrete\n  @HostListener('input')\n  _noopInputHandler() {\n    // no-op handler that ensures we're running change detection on input events.\n  }\n\n  /** Access injected document if available or fallback to global document reference */\n  private _getDocument(): Document {\n    return this._document || document;\n  }\n\n  /** Use defaultView of injected document if available or fallback to global window reference */\n  private _getWindow(): Window {\n    const doc = this._getDocument();\n    return doc.defaultView || window;\n  }\n\n  /**\n   * Scrolls a textarea to the caret position. On Firefox resizing the textarea will\n   * prevent it from scrolling to the caret position. We need to re-set the selection\n   * in order for it to scroll to the proper position.\n   */\n  private _scrollToCaretPosition(textarea: HTMLTextAreaElement) {\n    const {selectionStart, selectionEnd} = textarea;\n    const document = this._getDocument();\n\n    // IE will throw an \"Unspecified error\" if we try to set the selection range after the\n    // element has been removed from the DOM. Assert that the directive hasn't been destroyed\n    // between the time we requested the animation frame and when it was executed.\n    // Also note that we have to assert that the textarea is focused before we set the\n    // selection range. Setting the selection range on a non-focused textarea will cause\n    // it to receive focus on IE and Edge.\n    if (!this._destroyed.isStopped && document.activeElement === textarea) {\n      textarea.setSelectionRange(selectionStart, selectionEnd);\n    }\n  }\n\n  static ngAcceptInputType_minRows: NumberInput;\n  static ngAcceptInputType_maxRows: NumberInput;\n  static ngAcceptInputType_enabled: BooleanInput;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {NgModule} from '@angular/core';\nimport {CdkAutofill} from './autofill';\nimport {CdkTextareaAutosize} from './autosize';\n\n\n@NgModule({\n  declarations: [CdkAutofill, CdkTextareaAutosize],\n  imports: [PlatformModule],\n  exports: [CdkAutofill, CdkTextareaAutosize],\n})\nexport class TextFieldModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './autofill';\nexport * from './autosize';\nexport * from './text-field-module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]},"metadata":{},"sourceType":"module"}