{"ast":null,"code":"import _toConsumableArray from \"/mnt/c/Users/francesco/Desktop/material-angular-dashboard/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _createClass from \"/mnt/c/Users/francesco/Desktop/material-angular-dashboard/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/mnt/c/Users/francesco/Desktop/material-angular-dashboard/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/mnt/c/Users/francesco/Desktop/material-angular-dashboard/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/mnt/c/Users/francesco/Desktop/material-angular-dashboard/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"/mnt/c/Users/francesco/Desktop/material-angular-dashboard/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport { Overlay, CdkConnectedOverlay, OverlayModule } from '@angular/cdk/overlay';\nimport { CommonModule } from '@angular/common';\nimport { InjectionToken, Directive, EventEmitter, isDevMode, Component, ViewEncapsulation, ChangeDetectionStrategy, ChangeDetectorRef, NgZone, ElementRef, Optional, Inject, Self, Attribute, ViewChild, ContentChildren, Input, ContentChild, Output, NgModule } from '@angular/core';\nimport { mixinDisableRipple, mixinTabIndex, mixinDisabled, mixinErrorState, _countGroupLabelsBeforeOption, _getOptionScrollPosition, MAT_OPTION_PARENT_COMPONENT, ErrorStateMatcher, MatOption, MatOptgroup, MatOptionModule, MatCommonModule } from '@angular/material/core';\nimport { MatFormFieldControl, MatFormField, MAT_FORM_FIELD, MatFormFieldModule } from '@angular/material/form-field';\nimport { ViewportRuler, CdkScrollableModule } from '@angular/cdk/scrolling';\nimport { ActiveDescendantKeyManager, LiveAnnouncer } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { DOWN_ARROW, UP_ARROW, LEFT_ARROW, RIGHT_ARROW, ENTER, SPACE, hasModifierKey, HOME, END, A } from '@angular/cdk/keycodes';\nimport { NgForm, FormGroupDirective, NgControl } from '@angular/forms';\nimport { Subject, defer, merge } from 'rxjs';\nimport { startWith, switchMap, take, filter, map, distinctUntilChanged, takeUntil } from 'rxjs/operators';\nimport { trigger, transition, query, animateChild, state, style, animate } from '@angular/animations';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n * @docs-private\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/scrolling';\nimport * as ɵngcc2 from '@angular/material/core';\nimport * as ɵngcc3 from '@angular/cdk/bidi';\nimport * as ɵngcc4 from '@angular/forms';\nimport * as ɵngcc5 from '@angular/cdk/a11y';\nimport * as ɵngcc6 from '@angular/cdk/overlay';\nimport * as ɵngcc7 from '@angular/common';\nimport * as ɵngcc8 from '@angular/material/form-field';\nvar _c0 = [\"trigger\"];\nvar _c1 = [\"panel\"];\n\nfunction MatSelect_span_4_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\", 8);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r2 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r2.placeholder || \"\\xA0\");\n  }\n}\n\nfunction MatSelect_span_5_span_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\");\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r5 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r5.triggerValue || \"\\xA0\");\n  }\n}\n\nfunction MatSelect_span_5_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵprojection(0, 0, [\"*ngSwitchCase\", \"true\"]);\n  }\n}\n\nfunction MatSelect_span_5_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\", 9);\n    ɵngcc0.ɵɵtemplate(1, MatSelect_span_5_span_1_Template, 2, 1, \"span\", 10);\n    ɵngcc0.ɵɵtemplate(2, MatSelect_span_5_2_Template, 1, 0, undefined, 11);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r3 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"ngSwitch\", !!ctx_r3.customTrigger);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"ngSwitchCase\", true);\n  }\n}\n\nfunction MatSelect_ng_template_8_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r9 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"div\", 12);\n    ɵngcc0.ɵɵelementStart(1, \"div\", 13, 14);\n    ɵngcc0.ɵɵlistener(\"@transformPanel.done\", function MatSelect_ng_template_8_Template_div_animation_transformPanel_done_1_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r9);\n      var ctx_r8 = ɵngcc0.ɵɵnextContext();\n      return ctx_r8._panelDoneAnimatingStream.next($event.toState);\n    })(\"keydown\", function MatSelect_ng_template_8_Template_div_keydown_1_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r9);\n      var ctx_r10 = ɵngcc0.ɵɵnextContext();\n      return ctx_r10._handleKeydown($event);\n    });\n    ɵngcc0.ɵɵprojection(3, 1);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r4 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"@transformPanelWrap\", undefined);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵclassMapInterpolate1(\"mat-select-panel \", ctx_r4._getPanelTheme(), \"\");\n    ɵngcc0.ɵɵstyleProp(\"transform-origin\", ctx_r4._transformOrigin)(\"font-size\", ctx_r4._triggerFontSize, \"px\");\n    ɵngcc0.ɵɵproperty(\"ngClass\", ctx_r4.panelClass)(\"@transformPanel\", ctx_r4.multiple ? \"showing-multiple\" : \"showing\");\n    ɵngcc0.ɵɵattribute(\"id\", ctx_r4.id + \"-panel\");\n  }\n}\n\nvar _c2 = [[[\"mat-select-trigger\"]], \"*\"];\nvar _c3 = [\"mat-select-trigger\", \"*\"];\nvar matSelectAnimations = {\n  /**\n   * This animation ensures the select's overlay panel animation (transformPanel) is called when\n   * closing the select.\n   * This is needed due to https://github.com/angular/angular/issues/23302\n   */\n  transformPanelWrap: trigger('transformPanelWrap', [transition('* => void', query('@transformPanel', [animateChild()], {\n    optional: true\n  }))]),\n\n  /**\n   * This animation transforms the select's overlay panel on and off the page.\n   *\n   * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n   * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n   * side to ensure the option text correctly overlaps the trigger text.\n   *\n   * When the panel is removed from the DOM, it simply fades out linearly.\n   */\n  transformPanel: trigger('transformPanel', [state('void', style({\n    transform: 'scaleY(0.8)',\n    minWidth: '100%',\n    opacity: 0\n  })), state('showing', style({\n    opacity: 1,\n    minWidth: 'calc(100% + 32px)',\n    transform: 'scaleY(1)'\n  })), state('showing-multiple', style({\n    opacity: 1,\n    minWidth: 'calc(100% + 64px)',\n    transform: 'scaleY(1)'\n  })), transition('void => *', animate('120ms cubic-bezier(0, 0, 0.2, 1)')), transition('* => void', animate('100ms 25ms linear', style({\n    opacity: 0\n  })))])\n};\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\n\nfunction getMatSelectDynamicMultipleError() {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\n\n\nfunction getMatSelectNonArrayValueError() {\n  return Error('Value must be an array in multiple-selection mode.');\n}\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\n\n\nfunction getMatSelectNonFunctionValueError() {\n  return Error('`compareWith` must be a function.');\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nvar nextUniqueId = 0;\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n\n/** The max height of the select's overlay panel */\n\nvar SELECT_PANEL_MAX_HEIGHT = 256;\n/** The panel's padding on the x-axis */\n\nvar SELECT_PANEL_PADDING_X = 16;\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\n\nvar SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n/** The height of the select items in `em` units. */\n\nvar SELECT_ITEM_HEIGHT_EM = 3; // TODO(josephperrott): Revert to a constant after 2018 spec updates are fully merged.\n\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * Calculated as:\n * (SELECT_PANEL_PADDING_X * 1.5) + 16 = 40\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 16px.\n */\n\nvar SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + 16;\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\n\nvar SELECT_PANEL_VIEWPORT_PADDING = 8;\n/** Injection token that determines the scroll handling while a select is open. */\n\nvar MAT_SELECT_SCROLL_STRATEGY = new InjectionToken('mat-select-scroll-strategy');\n/** @docs-private */\n\nfunction MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n  return function () {\n    return overlay.scrollStrategies.reposition();\n  };\n}\n/** Injection token that can be used to provide the default options the select module. */\n\n\nvar MAT_SELECT_CONFIG = new InjectionToken('MAT_SELECT_CONFIG');\n/** @docs-private */\n\nvar MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_SELECT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY\n};\n/** Change event object that is emitted when the select value has changed. */\n\nvar MatSelectChange = function MatSelectChange(\n/** Reference to the select that emitted the change event. */\nsource,\n/** Current value of the select that emitted the event. */\nvalue) {\n  _classCallCheck(this, MatSelectChange);\n\n  this.source = source;\n  this.value = value;\n}; // Boilerplate for applying mixins to MatSelect.\n\n/** @docs-private */\n\n\nvar MatSelectBase = function MatSelectBase(_elementRef, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl) {\n  _classCallCheck(this, MatSelectBase);\n\n  this._elementRef = _elementRef;\n  this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n  this._parentForm = _parentForm;\n  this._parentFormGroup = _parentFormGroup;\n  this.ngControl = ngControl;\n};\n\nvar _MatSelectMixinBase = mixinDisableRipple(mixinTabIndex(mixinDisabled(mixinErrorState(MatSelectBase))));\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\n\n\nvar MatSelectTrigger =\n/** @class */\nfunction () {\n  var MatSelectTrigger = function MatSelectTrigger() {\n    _classCallCheck(this, MatSelectTrigger);\n  };\n\n  MatSelectTrigger.ɵfac = function MatSelectTrigger_Factory(t) {\n    return new (t || MatSelectTrigger)();\n  };\n\n  MatSelectTrigger.ɵdir = ɵngcc0.ɵɵdefineDirective({\n    type: MatSelectTrigger,\n    selectors: [[\"mat-select-trigger\"]]\n  });\n  /*@__PURE__*/\n\n  (function () {\n    ɵngcc0.ɵsetClassMetadata(MatSelectTrigger, [{\n      type: Directive,\n      args: [{\n        selector: 'mat-select-trigger'\n      }]\n    }], null, null);\n  })();\n\n  return MatSelectTrigger;\n}();\n\nvar MatSelect =\n/** @class */\nfunction () {\n  var MatSelect = /*#__PURE__*/function (_MatSelectMixinBase2) {\n    _inherits(MatSelect, _MatSelectMixinBase2);\n\n    var _super = _createSuper(MatSelect);\n\n    function MatSelect(_viewportRuler, _changeDetectorRef, _ngZone, _defaultErrorStateMatcher, elementRef, _dir, _parentForm, _parentFormGroup, _parentFormField, ngControl, tabIndex, scrollStrategyFactory, _liveAnnouncer, defaults) {\n      var _this;\n\n      _classCallCheck(this, MatSelect);\n\n      _this = _super.call(this, elementRef, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n      _this._viewportRuler = _viewportRuler;\n      _this._changeDetectorRef = _changeDetectorRef;\n      _this._ngZone = _ngZone;\n      _this._dir = _dir;\n      _this._parentFormField = _parentFormField;\n      _this.ngControl = ngControl;\n      _this._liveAnnouncer = _liveAnnouncer;\n      /** Whether or not the overlay panel is open. */\n\n      _this._panelOpen = false;\n      /** Whether filling out the select is required in the form. */\n\n      _this._required = false;\n      /** The scroll position of the overlay panel, calculated to center the selected option. */\n\n      _this._scrollTop = 0;\n      /** Whether the component is in multiple selection mode. */\n\n      _this._multiple = false;\n      /** Comparison function to specify which option is displayed. Defaults to object equality. */\n\n      _this._compareWith = function (o1, o2) {\n        return o1 === o2;\n      };\n      /** Unique id for this input. */\n\n\n      _this._uid = \"mat-select-\".concat(nextUniqueId++);\n      /** Emits whenever the component is destroyed. */\n\n      _this._destroy = new Subject();\n      /** The cached font-size of the trigger element. */\n\n      _this._triggerFontSize = 0;\n      /** `View -> model callback called when value changes` */\n\n      _this._onChange = function () {};\n      /** `View -> model callback called when select has been touched` */\n\n\n      _this._onTouched = function () {};\n      /** The IDs of child options to be passed to the aria-owns attribute. */\n\n\n      _this._optionIds = '';\n      /** The value of the select panel's transform-origin property. */\n\n      _this._transformOrigin = 'top';\n      /** Emits when the panel element is finished transforming in. */\n\n      _this._panelDoneAnimatingStream = new Subject();\n      /**\n       * The y-offset of the overlay panel in relation to the trigger's top start corner.\n       * This must be adjusted to align the selected option text over the trigger text.\n       * when the panel opens. Will change based on the y-position of the selected option.\n       */\n\n      _this._offsetY = 0;\n      /**\n       * This position config ensures that the top \"start\" corner of the overlay\n       * is aligned with with the top \"start\" of the origin by default (overlapping\n       * the trigger completely). If the panel cannot fit below the trigger, it\n       * will fall back to a position above the trigger.\n       */\n\n      _this._positions = [{\n        originX: 'start',\n        originY: 'top',\n        overlayX: 'start',\n        overlayY: 'top'\n      }, {\n        originX: 'start',\n        originY: 'bottom',\n        overlayX: 'start',\n        overlayY: 'bottom'\n      }];\n      /** Whether the component is disabling centering of the active option over the trigger. */\n\n      _this._disableOptionCentering = false;\n      _this._focused = false;\n      /** A name for this control that can be used by `mat-form-field`. */\n\n      _this.controlType = 'mat-select';\n      /** Aria label of the select. If not specified, the placeholder will be used as label. */\n\n      _this.ariaLabel = '';\n      /** Combined stream of all of the child options' change events. */\n\n      _this.optionSelectionChanges = defer(function () {\n        var options = _this.options;\n\n        if (options) {\n          return options.changes.pipe(startWith(options), switchMap(function () {\n            return merge.apply(void 0, _toConsumableArray(options.map(function (option) {\n              return option.onSelectionChange;\n            })));\n          }));\n        }\n\n        return _this._ngZone.onStable.asObservable().pipe(take(1), switchMap(function () {\n          return _this.optionSelectionChanges;\n        }));\n      });\n      /** Event emitted when the select panel has been toggled. */\n\n      _this.openedChange = new EventEmitter();\n      /** Event emitted when the select has been opened. */\n\n      _this._openedStream = _this.openedChange.pipe(filter(function (o) {\n        return o;\n      }), map(function () {}));\n      /** Event emitted when the select has been closed. */\n\n      _this._closedStream = _this.openedChange.pipe(filter(function (o) {\n        return !o;\n      }), map(function () {}));\n      /** Event emitted when the selected value has been changed by the user. */\n\n      _this.selectionChange = new EventEmitter();\n      /**\n       * Event that emits whenever the raw value of the select changes. This is here primarily\n       * to facilitate the two-way binding for the `value` input.\n       * @docs-private\n       */\n\n      _this.valueChange = new EventEmitter();\n\n      if (_this.ngControl) {\n        // Note: we provide the value accessor through here, instead of\n        // the `providers` to avoid running into a circular import.\n        _this.ngControl.valueAccessor = _assertThisInitialized(_this);\n      }\n\n      _this._scrollStrategyFactory = scrollStrategyFactory;\n      _this._scrollStrategy = _this._scrollStrategyFactory();\n      _this.tabIndex = parseInt(tabIndex) || 0; // Force setter to be called in case id was not specified.\n\n      _this.id = _this.id;\n\n      if (defaults) {\n        if (defaults.disableOptionCentering != null) {\n          _this.disableOptionCentering = defaults.disableOptionCentering;\n        }\n\n        if (defaults.typeaheadDebounceInterval != null) {\n          _this.typeaheadDebounceInterval = defaults.typeaheadDebounceInterval;\n        }\n      }\n\n      return _this;\n    }\n    /** Whether the select is focused. */\n\n\n    _createClass(MatSelect, [{\n      key: \"ngOnInit\",\n      value: function ngOnInit() {\n        var _this2 = this;\n\n        this._selectionModel = new SelectionModel(this.multiple);\n        this.stateChanges.next(); // We need `distinctUntilChanged` here, because some browsers will\n        // fire the animation end event twice for the same animation. See:\n        // https://github.com/angular/angular/issues/24084\n\n        this._panelDoneAnimatingStream.pipe(distinctUntilChanged(), takeUntil(this._destroy)).subscribe(function () {\n          if (_this2.panelOpen) {\n            _this2._scrollTop = 0;\n\n            _this2.openedChange.emit(true);\n          } else {\n            _this2.openedChange.emit(false);\n\n            _this2.overlayDir.offsetX = 0;\n\n            _this2._changeDetectorRef.markForCheck();\n          }\n        });\n\n        this._viewportRuler.change().pipe(takeUntil(this._destroy)).subscribe(function () {\n          if (_this2._panelOpen) {\n            _this2._triggerRect = _this2.trigger.nativeElement.getBoundingClientRect();\n\n            _this2._changeDetectorRef.markForCheck();\n          }\n        });\n      }\n    }, {\n      key: \"ngAfterContentInit\",\n      value: function ngAfterContentInit() {\n        var _this3 = this;\n\n        this._initKeyManager();\n\n        this._selectionModel.changed.pipe(takeUntil(this._destroy)).subscribe(function (event) {\n          event.added.forEach(function (option) {\n            return option.select();\n          });\n          event.removed.forEach(function (option) {\n            return option.deselect();\n          });\n        });\n\n        this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(function () {\n          _this3._resetOptions();\n\n          _this3._initializeSelection();\n        });\n      }\n    }, {\n      key: \"ngDoCheck\",\n      value: function ngDoCheck() {\n        if (this.ngControl) {\n          this.updateErrorState();\n        }\n      }\n    }, {\n      key: \"ngOnChanges\",\n      value: function ngOnChanges(changes) {\n        // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n        // the parent form field know to run change detection when the disabled state changes.\n        if (changes['disabled']) {\n          this.stateChanges.next();\n        }\n\n        if (changes['typeaheadDebounceInterval'] && this._keyManager) {\n          this._keyManager.withTypeAhead(this._typeaheadDebounceInterval);\n        }\n      }\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        this._destroy.next();\n\n        this._destroy.complete();\n\n        this.stateChanges.complete();\n      }\n      /** Toggles the overlay panel open or closed. */\n\n    }, {\n      key: \"toggle\",\n      value: function toggle() {\n        this.panelOpen ? this.close() : this.open();\n      }\n      /** Opens the overlay panel. */\n\n    }, {\n      key: \"open\",\n      value: function open() {\n        var _this4 = this;\n\n        if (this.disabled || !this.options || !this.options.length || this._panelOpen) {\n          return;\n        }\n\n        this._triggerRect = this.trigger.nativeElement.getBoundingClientRect(); // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n        // `parseInt` ignores the trailing 'px' and converts this to a number.\n\n        this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement).fontSize || '0');\n        this._panelOpen = true;\n\n        this._keyManager.withHorizontalOrientation(null);\n\n        this._calculateOverlayPosition();\n\n        this._highlightCorrectOption();\n\n        this._changeDetectorRef.markForCheck(); // Set the font size on the panel element once it exists.\n\n\n        this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(function () {\n          if (_this4._triggerFontSize && _this4.overlayDir.overlayRef && _this4.overlayDir.overlayRef.overlayElement) {\n            _this4.overlayDir.overlayRef.overlayElement.style.fontSize = \"\".concat(_this4._triggerFontSize, \"px\");\n          }\n        });\n      }\n      /** Closes the overlay panel and focuses the host element. */\n\n    }, {\n      key: \"close\",\n      value: function close() {\n        if (this._panelOpen) {\n          this._panelOpen = false;\n\n          this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n\n          this._changeDetectorRef.markForCheck();\n\n          this._onTouched();\n        }\n      }\n      /**\n       * Sets the select's value. Part of the ControlValueAccessor interface\n       * required to integrate with Angular's core forms API.\n       *\n       * @param value New value to be written to the model.\n       */\n\n    }, {\n      key: \"writeValue\",\n      value: function writeValue(value) {\n        if (this.options) {\n          this._setSelectionByValue(value);\n        }\n      }\n      /**\n       * Saves a callback function to be invoked when the select's value\n       * changes from user input. Part of the ControlValueAccessor interface\n       * required to integrate with Angular's core forms API.\n       *\n       * @param fn Callback to be triggered when the value changes.\n       */\n\n    }, {\n      key: \"registerOnChange\",\n      value: function registerOnChange(fn) {\n        this._onChange = fn;\n      }\n      /**\n       * Saves a callback function to be invoked when the select is blurred\n       * by the user. Part of the ControlValueAccessor interface required\n       * to integrate with Angular's core forms API.\n       *\n       * @param fn Callback to be triggered when the component has been touched.\n       */\n\n    }, {\n      key: \"registerOnTouched\",\n      value: function registerOnTouched(fn) {\n        this._onTouched = fn;\n      }\n      /**\n       * Disables the select. Part of the ControlValueAccessor interface required\n       * to integrate with Angular's core forms API.\n       *\n       * @param isDisabled Sets whether the component is disabled.\n       */\n\n    }, {\n      key: \"setDisabledState\",\n      value: function setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n\n        this._changeDetectorRef.markForCheck();\n\n        this.stateChanges.next();\n      }\n      /** Whether or not the overlay panel is open. */\n\n    }, {\n      key: \"_isRtl\",\n\n      /** Whether the element is in RTL mode. */\n      value: function _isRtl() {\n        return this._dir ? this._dir.value === 'rtl' : false;\n      }\n      /** Handles all keydown events on the select. */\n\n    }, {\n      key: \"_handleKeydown\",\n      value: function _handleKeydown(event) {\n        if (!this.disabled) {\n          this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n        }\n      }\n      /** Handles keyboard events while the select is closed. */\n\n    }, {\n      key: \"_handleClosedKeydown\",\n      value: function _handleClosedKeydown(event) {\n        var keyCode = event.keyCode;\n        var isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW || keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n        var isOpenKey = keyCode === ENTER || keyCode === SPACE;\n        var manager = this._keyManager; // Open the select on ALT + arrow key to match the native <select>\n\n        if (!manager.isTyping() && isOpenKey && !hasModifierKey(event) || (this.multiple || event.altKey) && isArrowKey) {\n          event.preventDefault(); // prevents the page from scrolling down when pressing space\n\n          this.open();\n        } else if (!this.multiple) {\n          var previouslySelectedOption = this.selected;\n\n          if (keyCode === HOME || keyCode === END) {\n            keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n            event.preventDefault();\n          } else {\n            manager.onKeydown(event);\n          }\n\n          var selectedOption = this.selected; // Since the value has changed, we need to announce it ourselves.\n\n          if (selectedOption && previouslySelectedOption !== selectedOption) {\n            // We set a duration on the live announcement, because we want the live element to be\n            // cleared after a while so that users can't navigate to it using the arrow keys.\n            this._liveAnnouncer.announce(selectedOption.viewValue, 10000);\n          }\n        }\n      }\n      /** Handles keyboard events when the selected is open. */\n\n    }, {\n      key: \"_handleOpenKeydown\",\n      value: function _handleOpenKeydown(event) {\n        var manager = this._keyManager;\n        var keyCode = event.keyCode;\n        var isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n        var isTyping = manager.isTyping();\n\n        if (keyCode === HOME || keyCode === END) {\n          event.preventDefault();\n          keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n        } else if (isArrowKey && event.altKey) {\n          // Close the select on ALT + arrow key to match the native <select>\n          event.preventDefault();\n          this.close(); // Don't do anything in this case if the user is typing,\n          // because the typing sequence can include the space key.\n        } else if (!isTyping && (keyCode === ENTER || keyCode === SPACE) && manager.activeItem && !hasModifierKey(event)) {\n          event.preventDefault();\n\n          manager.activeItem._selectViaInteraction();\n        } else if (!isTyping && this._multiple && keyCode === A && event.ctrlKey) {\n          event.preventDefault();\n          var hasDeselectedOptions = this.options.some(function (opt) {\n            return !opt.disabled && !opt.selected;\n          });\n          this.options.forEach(function (option) {\n            if (!option.disabled) {\n              hasDeselectedOptions ? option.select() : option.deselect();\n            }\n          });\n        } else {\n          var previouslyFocusedIndex = manager.activeItemIndex;\n          manager.onKeydown(event);\n\n          if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem && manager.activeItemIndex !== previouslyFocusedIndex) {\n            manager.activeItem._selectViaInteraction();\n          }\n        }\n      }\n    }, {\n      key: \"_onFocus\",\n      value: function _onFocus() {\n        if (!this.disabled) {\n          this._focused = true;\n          this.stateChanges.next();\n        }\n      }\n      /**\n       * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n       * \"blur\" to the panel when it opens, causing a false positive.\n       */\n\n    }, {\n      key: \"_onBlur\",\n      value: function _onBlur() {\n        this._focused = false;\n\n        if (!this.disabled && !this.panelOpen) {\n          this._onTouched();\n\n          this._changeDetectorRef.markForCheck();\n\n          this.stateChanges.next();\n        }\n      }\n      /**\n       * Callback that is invoked when the overlay panel has been attached.\n       */\n\n    }, {\n      key: \"_onAttached\",\n      value: function _onAttached() {\n        var _this5 = this;\n\n        this.overlayDir.positionChange.pipe(take(1)).subscribe(function () {\n          _this5._changeDetectorRef.detectChanges();\n\n          _this5._calculateOverlayOffsetX();\n\n          _this5.panel.nativeElement.scrollTop = _this5._scrollTop;\n        });\n      }\n      /** Returns the theme to be used on the panel. */\n\n    }, {\n      key: \"_getPanelTheme\",\n      value: function _getPanelTheme() {\n        return this._parentFormField ? \"mat-\".concat(this._parentFormField.color) : '';\n      }\n      /** Whether the select has a value. */\n\n    }, {\n      key: \"_initializeSelection\",\n      value: function _initializeSelection() {\n        var _this6 = this;\n\n        // Defer setting the value in order to avoid the \"Expression\n        // has changed after it was checked\" errors from Angular.\n        Promise.resolve().then(function () {\n          _this6._setSelectionByValue(_this6.ngControl ? _this6.ngControl.value : _this6._value);\n\n          _this6.stateChanges.next();\n        });\n      }\n      /**\n       * Sets the selected option based on a value. If no option can be\n       * found with the designated value, the select trigger is cleared.\n       */\n\n    }, {\n      key: \"_setSelectionByValue\",\n      value: function _setSelectionByValue(value) {\n        var _this7 = this;\n\n        if (this.multiple && value) {\n          if (!Array.isArray(value)) {\n            throw getMatSelectNonArrayValueError();\n          }\n\n          this._selectionModel.clear();\n\n          value.forEach(function (currentValue) {\n            return _this7._selectValue(currentValue);\n          });\n\n          this._sortValues();\n        } else {\n          this._selectionModel.clear();\n\n          var correspondingOption = this._selectValue(value); // Shift focus to the active item. Note that we shouldn't do this in multiple\n          // mode, because we don't know what option the user interacted with last.\n\n\n          if (correspondingOption) {\n            this._keyManager.setActiveItem(correspondingOption);\n          } else if (!this.panelOpen) {\n            // Otherwise reset the highlighted option. Note that we only want to do this while\n            // closed, because doing it while open can shift the user's focus unnecessarily.\n            this._keyManager.setActiveItem(-1);\n          }\n        }\n\n        this._changeDetectorRef.markForCheck();\n      }\n      /**\n       * Finds and selects and option based on its value.\n       * @returns Option that has the corresponding value.\n       */\n\n    }, {\n      key: \"_selectValue\",\n      value: function _selectValue(value) {\n        var _this8 = this;\n\n        var correspondingOption = this.options.find(function (option) {\n          try {\n            // Treat null as a special reset value.\n            return option.value != null && _this8._compareWith(option.value, value);\n          } catch (error) {\n            if (isDevMode()) {\n              // Notify developers of errors in their comparator.\n              console.warn(error);\n            }\n\n            return false;\n          }\n        });\n\n        if (correspondingOption) {\n          this._selectionModel.select(correspondingOption);\n        }\n\n        return correspondingOption;\n      }\n      /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n\n    }, {\n      key: \"_initKeyManager\",\n      value: function _initKeyManager() {\n        var _this9 = this;\n\n        this._keyManager = new ActiveDescendantKeyManager(this.options).withTypeAhead(this._typeaheadDebounceInterval).withVerticalOrientation().withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr').withAllowedModifierKeys(['shiftKey']);\n\n        this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(function () {\n          if (_this9.panelOpen) {\n            // Select the active item when tabbing away. This is consistent with how the native\n            // select behaves. Note that we only want to do this in single selection mode.\n            if (!_this9.multiple && _this9._keyManager.activeItem) {\n              _this9._keyManager.activeItem._selectViaInteraction();\n            } // Restore focus to the trigger before closing. Ensures that the focus\n            // position won't be lost if the user got focus into the overlay.\n\n\n            _this9.focus();\n\n            _this9.close();\n          }\n        });\n\n        this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(function () {\n          if (_this9._panelOpen && _this9.panel) {\n            _this9._scrollActiveOptionIntoView();\n          } else if (!_this9._panelOpen && !_this9.multiple && _this9._keyManager.activeItem) {\n            _this9._keyManager.activeItem._selectViaInteraction();\n          }\n        });\n      }\n      /** Drops current option subscriptions and IDs and resets from scratch. */\n\n    }, {\n      key: \"_resetOptions\",\n      value: function _resetOptions() {\n        var _this10 = this;\n\n        var changedOrDestroyed = merge(this.options.changes, this._destroy);\n        this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe(function (event) {\n          _this10._onSelect(event.source, event.isUserInput);\n\n          if (event.isUserInput && !_this10.multiple && _this10._panelOpen) {\n            _this10.close();\n\n            _this10.focus();\n          }\n        }); // Listen to changes in the internal state of the options and react accordingly.\n        // Handles cases like the labels of the selected options changing.\n\n        merge.apply(void 0, _toConsumableArray(this.options.map(function (option) {\n          return option._stateChanges;\n        }))).pipe(takeUntil(changedOrDestroyed)).subscribe(function () {\n          _this10._changeDetectorRef.markForCheck();\n\n          _this10.stateChanges.next();\n        });\n\n        this._setOptionIds();\n      }\n      /** Invoked when an option is clicked. */\n\n    }, {\n      key: \"_onSelect\",\n      value: function _onSelect(option, isUserInput) {\n        var wasSelected = this._selectionModel.isSelected(option);\n\n        if (option.value == null && !this._multiple) {\n          option.deselect();\n\n          this._selectionModel.clear();\n\n          this._propagateChanges(option.value);\n        } else {\n          if (wasSelected !== option.selected) {\n            option.selected ? this._selectionModel.select(option) : this._selectionModel.deselect(option);\n          }\n\n          if (isUserInput) {\n            this._keyManager.setActiveItem(option);\n          }\n\n          if (this.multiple) {\n            this._sortValues();\n\n            if (isUserInput) {\n              // In case the user selected the option with their mouse, we\n              // want to restore focus back to the trigger, in order to\n              // prevent the select keyboard controls from clashing with\n              // the ones from `mat-option`.\n              this.focus();\n            }\n          }\n        }\n\n        if (wasSelected !== this._selectionModel.isSelected(option)) {\n          this._propagateChanges();\n        }\n\n        this.stateChanges.next();\n      }\n      /** Sorts the selected values in the selected based on their order in the panel. */\n\n    }, {\n      key: \"_sortValues\",\n      value: function _sortValues() {\n        var _this11 = this;\n\n        if (this.multiple) {\n          var options = this.options.toArray();\n\n          this._selectionModel.sort(function (a, b) {\n            return _this11.sortComparator ? _this11.sortComparator(a, b, options) : options.indexOf(a) - options.indexOf(b);\n          });\n\n          this.stateChanges.next();\n        }\n      }\n      /** Emits change event to set the model value. */\n\n    }, {\n      key: \"_propagateChanges\",\n      value: function _propagateChanges(fallbackValue) {\n        var valueToEmit = null;\n\n        if (this.multiple) {\n          valueToEmit = this.selected.map(function (option) {\n            return option.value;\n          });\n        } else {\n          valueToEmit = this.selected ? this.selected.value : fallbackValue;\n        }\n\n        this._value = valueToEmit;\n        this.valueChange.emit(valueToEmit);\n\n        this._onChange(valueToEmit);\n\n        this.selectionChange.emit(new MatSelectChange(this, valueToEmit));\n\n        this._changeDetectorRef.markForCheck();\n      }\n      /** Records option IDs to pass to the aria-owns property. */\n\n    }, {\n      key: \"_setOptionIds\",\n      value: function _setOptionIds() {\n        this._optionIds = this.options.map(function (option) {\n          return option.id;\n        }).join(' ');\n      }\n      /**\n       * Highlights the selected item. If no option is selected, it will highlight\n       * the first item instead.\n       */\n\n    }, {\n      key: \"_highlightCorrectOption\",\n      value: function _highlightCorrectOption() {\n        if (this._keyManager) {\n          if (this.empty) {\n            this._keyManager.setFirstItemActive();\n          } else {\n            this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n          }\n        }\n      }\n      /** Scrolls the active option into view. */\n\n    }, {\n      key: \"_scrollActiveOptionIntoView\",\n      value: function _scrollActiveOptionIntoView() {\n        var activeOptionIndex = this._keyManager.activeItemIndex || 0;\n\n        var labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.options, this.optionGroups);\n\n        this.panel.nativeElement.scrollTop = _getOptionScrollPosition(activeOptionIndex + labelCount, this._getItemHeight(), this.panel.nativeElement.scrollTop, SELECT_PANEL_MAX_HEIGHT);\n      }\n      /** Focuses the select element. */\n\n    }, {\n      key: \"focus\",\n      value: function focus(options) {\n        this._elementRef.nativeElement.focus(options);\n      }\n      /** Gets the index of the provided option in the option list. */\n\n    }, {\n      key: \"_getOptionIndex\",\n      value: function _getOptionIndex(option) {\n        return this.options.reduce(function (result, current, index) {\n          if (result !== undefined) {\n            return result;\n          }\n\n          return option === current ? index : undefined;\n        }, undefined);\n      }\n      /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n\n    }, {\n      key: \"_calculateOverlayPosition\",\n      value: function _calculateOverlayPosition() {\n        var itemHeight = this._getItemHeight();\n\n        var items = this._getItemCount();\n\n        var panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n        var scrollContainerHeight = items * itemHeight; // The farthest the panel can be scrolled before it hits the bottom\n\n        var maxScroll = scrollContainerHeight - panelHeight; // If no value is selected we open the popup to the first item.\n\n        var selectedOptionOffset = this.empty ? 0 : this._getOptionIndex(this._selectionModel.selected[0]);\n        selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options, this.optionGroups); // We must maintain a scroll buffer so the selected option will be scrolled to the\n        // center of the overlay panel rather than the top.\n\n        var scrollBuffer = panelHeight / 2;\n        this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n        this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n\n        this._checkOverlayWithinViewport(maxScroll);\n      }\n      /**\n       * Calculates the scroll position of the select's overlay panel.\n       *\n       * Attempts to center the selected option in the panel. If the option is\n       * too high or too low in the panel to be scrolled to the center, it clamps the\n       * scroll position to the min or max scroll positions respectively.\n       */\n\n    }, {\n      key: \"_calculateOverlayScroll\",\n      value: function _calculateOverlayScroll(selectedIndex, scrollBuffer, maxScroll) {\n        var itemHeight = this._getItemHeight();\n\n        var optionOffsetFromScrollTop = itemHeight * selectedIndex;\n        var halfOptionHeight = itemHeight / 2; // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n        // scroll container, then subtracts the scroll buffer to scroll the option down to\n        // the center of the overlay panel. Half the option height must be re-added to the\n        // scrollTop so the option is centered based on its middle, not its top edge.\n\n        var optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n        return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n      }\n      /** Returns the aria-label of the select component. */\n\n    }, {\n      key: \"_getAriaLabel\",\n      value: function _getAriaLabel() {\n        // If an ariaLabelledby value has been set by the consumer, the select should not overwrite the\n        // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n        return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n      }\n      /** Returns the aria-labelledby of the select component. */\n\n    }, {\n      key: \"_getAriaLabelledby\",\n      value: function _getAriaLabelledby() {\n        if (this.ariaLabelledby) {\n          return this.ariaLabelledby;\n        } // Note: we use `_getAriaLabel` here, because we want to check whether there's a\n        // computed label. `this.ariaLabel` is only the user-specified label.\n\n\n        if (!this._parentFormField || !this._parentFormField._hasFloatingLabel() || this._getAriaLabel()) {\n          return null;\n        }\n\n        return this._parentFormField._labelId || null;\n      }\n      /** Determines the `aria-activedescendant` to be set on the host. */\n\n    }, {\n      key: \"_getAriaActiveDescendant\",\n      value: function _getAriaActiveDescendant() {\n        if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n          return this._keyManager.activeItem.id;\n        }\n\n        return null;\n      }\n      /**\n       * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n       * This must be adjusted to align the selected option text over the trigger text when\n       * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n       * can't be calculated until the panel has been attached, because we need to know the\n       * content width in order to constrain the panel within the viewport.\n       */\n\n    }, {\n      key: \"_calculateOverlayOffsetX\",\n      value: function _calculateOverlayOffsetX() {\n        var overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n\n        var viewportSize = this._viewportRuler.getViewportSize();\n\n        var isRtl = this._isRtl();\n\n        var paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X : SELECT_PANEL_PADDING_X * 2;\n        var offsetX; // Adjust the offset, depending on the option padding.\n\n        if (this.multiple) {\n          offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n        } else {\n          var selected = this._selectionModel.selected[0] || this.options.first;\n          offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n        } // Invert the offset in LTR.\n\n\n        if (!isRtl) {\n          offsetX *= -1;\n        } // Determine how much the select overflows on each side.\n\n\n        var leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n        var rightOverflow = overlayRect.right + offsetX - viewportSize.width + (isRtl ? 0 : paddingWidth); // If the element overflows on either side, reduce the offset to allow it to fit.\n\n        if (leftOverflow > 0) {\n          offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n        } else if (rightOverflow > 0) {\n          offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n        } // Set the offset directly in order to avoid having to go through change detection and\n        // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n        // blurry content in some browsers.\n\n\n        this.overlayDir.offsetX = Math.round(offsetX);\n        this.overlayDir.overlayRef.updatePosition();\n      }\n      /**\n       * Calculates the y-offset of the select's overlay panel in relation to the\n       * top start corner of the trigger. It has to be adjusted in order for the\n       * selected option to be aligned over the trigger when the panel opens.\n       */\n\n    }, {\n      key: \"_calculateOverlayOffsetY\",\n      value: function _calculateOverlayOffsetY(selectedIndex, scrollBuffer, maxScroll) {\n        var itemHeight = this._getItemHeight();\n\n        var optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n        var maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n        var optionOffsetFromPanelTop; // Disable offset if requested by user by returning 0 as value to offset\n\n        if (this._disableOptionCentering) {\n          return 0;\n        }\n\n        if (this._scrollTop === 0) {\n          optionOffsetFromPanelTop = selectedIndex * itemHeight;\n        } else if (this._scrollTop === maxScroll) {\n          var firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n          var selectedDisplayIndex = selectedIndex - firstDisplayedIndex; // The first item is partially out of the viewport. Therefore we need to calculate what\n          // portion of it is shown in the viewport and account for it in our offset.\n\n          var partialItemHeight = itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight; // Because the panel height is longer than the height of the options alone,\n          // there is always extra padding at the top or bottom of the panel. When\n          // scrolled to the very bottom, this padding is at the top of the panel and\n          // must be added to the offset.\n\n          optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n        } else {\n          // If the option was scrolled to the middle of the panel using a scroll buffer,\n          // its offset will be the scroll buffer minus the half height that was added to\n          // center it.\n          optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n        } // The final offset is the option's offset from the top, adjusted for the height difference,\n        // multiplied by -1 to ensure that the overlay moves in the correct direction up the page.\n        // The value is rounded to prevent some browsers from blurring the content.\n\n\n        return Math.round(optionOffsetFromPanelTop * -1 - optionHeightAdjustment);\n      }\n      /**\n       * Checks that the attempted overlay position will fit within the viewport.\n       * If it will not fit, tries to adjust the scroll position and the associated\n       * y-offset so the panel can open fully on-screen. If it still won't fit,\n       * sets the offset back to 0 to allow the fallback position to take over.\n       */\n\n    }, {\n      key: \"_checkOverlayWithinViewport\",\n      value: function _checkOverlayWithinViewport(maxScroll) {\n        var itemHeight = this._getItemHeight();\n\n        var viewportSize = this._viewportRuler.getViewportSize();\n\n        var topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n        var bottomSpaceAvailable = viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n        var panelHeightTop = Math.abs(this._offsetY);\n        var totalPanelHeight = Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n        var panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n\n        if (panelHeightBottom > bottomSpaceAvailable) {\n          this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n        } else if (panelHeightTop > topSpaceAvailable) {\n          this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n        } else {\n          this._transformOrigin = this._getOriginBasedOnOption();\n        }\n      }\n      /** Adjusts the overlay panel up to fit in the viewport. */\n\n    }, {\n      key: \"_adjustPanelUp\",\n      value: function _adjustPanelUp(panelHeightBottom, bottomSpaceAvailable) {\n        // Browsers ignore fractional scroll offsets, so we need to round.\n        var distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable); // Scrolls the panel up by the distance it was extending past the boundary, then\n        // adjusts the offset by that amount to move the panel up into the viewport.\n\n        this._scrollTop -= distanceBelowViewport;\n        this._offsetY -= distanceBelowViewport;\n        this._transformOrigin = this._getOriginBasedOnOption(); // If the panel is scrolled to the very top, it won't be able to fit the panel\n        // by scrolling, so set the offset to 0 to allow the fallback position to take\n        // effect.\n\n        if (this._scrollTop <= 0) {\n          this._scrollTop = 0;\n          this._offsetY = 0;\n          this._transformOrigin = \"50% bottom 0px\";\n        }\n      }\n      /** Adjusts the overlay panel down to fit in the viewport. */\n\n    }, {\n      key: \"_adjustPanelDown\",\n      value: function _adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll) {\n        // Browsers ignore fractional scroll offsets, so we need to round.\n        var distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable); // Scrolls the panel down by the distance it was extending past the boundary, then\n        // adjusts the offset by that amount to move the panel down into the viewport.\n\n        this._scrollTop += distanceAboveViewport;\n        this._offsetY += distanceAboveViewport;\n        this._transformOrigin = this._getOriginBasedOnOption(); // If the panel is scrolled to the very bottom, it won't be able to fit the\n        // panel by scrolling, so set the offset to 0 to allow the fallback position\n        // to take effect.\n\n        if (this._scrollTop >= maxScroll) {\n          this._scrollTop = maxScroll;\n          this._offsetY = 0;\n          this._transformOrigin = \"50% top 0px\";\n          return;\n        }\n      }\n      /** Sets the transform origin point based on the selected option. */\n\n    }, {\n      key: \"_getOriginBasedOnOption\",\n      value: function _getOriginBasedOnOption() {\n        var itemHeight = this._getItemHeight();\n\n        var optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n        var originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n        return \"50% \".concat(originY, \"px 0px\");\n      }\n      /** Calculates the amount of items in the select. This includes options and group labels. */\n\n    }, {\n      key: \"_getItemCount\",\n      value: function _getItemCount() {\n        return this.options.length + this.optionGroups.length;\n      }\n      /** Calculates the height of the select's options. */\n\n    }, {\n      key: \"_getItemHeight\",\n      value: function _getItemHeight() {\n        return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n      }\n      /**\n       * Implemented as part of MatFormFieldControl.\n       * @docs-private\n       */\n\n    }, {\n      key: \"setDescribedByIds\",\n      value: function setDescribedByIds(ids) {\n        this._ariaDescribedby = ids.join(' ');\n      }\n      /**\n       * Implemented as part of MatFormFieldControl.\n       * @docs-private\n       */\n\n    }, {\n      key: \"onContainerClick\",\n      value: function onContainerClick() {\n        this.focus();\n        this.open();\n      }\n      /**\n       * Implemented as part of MatFormFieldControl.\n       * @docs-private\n       */\n\n    }, {\n      key: \"focused\",\n      get: function get() {\n        return this._focused || this._panelOpen;\n      }\n      /** Placeholder to be shown if no value has been selected. */\n\n    }, {\n      key: \"placeholder\",\n      get: function get() {\n        return this._placeholder;\n      },\n      set: function set(value) {\n        this._placeholder = value;\n        this.stateChanges.next();\n      }\n      /** Whether the component is required. */\n\n    }, {\n      key: \"required\",\n      get: function get() {\n        return this._required;\n      },\n      set: function set(value) {\n        this._required = coerceBooleanProperty(value);\n        this.stateChanges.next();\n      }\n      /** Whether the user should be allowed to select multiple options. */\n\n    }, {\n      key: \"multiple\",\n      get: function get() {\n        return this._multiple;\n      },\n      set: function set(value) {\n        if (this._selectionModel) {\n          throw getMatSelectDynamicMultipleError();\n        }\n\n        this._multiple = coerceBooleanProperty(value);\n      }\n      /** Whether to center the active option over the trigger. */\n\n    }, {\n      key: \"disableOptionCentering\",\n      get: function get() {\n        return this._disableOptionCentering;\n      },\n      set: function set(value) {\n        this._disableOptionCentering = coerceBooleanProperty(value);\n      }\n      /**\n       * Function to compare the option values with the selected values. The first argument\n       * is a value from an option. The second is a value from the selection. A boolean\n       * should be returned.\n       */\n\n    }, {\n      key: \"compareWith\",\n      get: function get() {\n        return this._compareWith;\n      },\n      set: function set(fn) {\n        if (typeof fn !== 'function') {\n          throw getMatSelectNonFunctionValueError();\n        }\n\n        this._compareWith = fn;\n\n        if (this._selectionModel) {\n          // A different comparator means the selection could change.\n          this._initializeSelection();\n        }\n      }\n      /** Value of the select control. */\n\n    }, {\n      key: \"value\",\n      get: function get() {\n        return this._value;\n      },\n      set: function set(newValue) {\n        if (newValue !== this._value) {\n          this.writeValue(newValue);\n          this._value = newValue;\n        }\n      }\n      /** Time to wait in milliseconds after the last keystroke before moving focus to an item. */\n\n    }, {\n      key: \"typeaheadDebounceInterval\",\n      get: function get() {\n        return this._typeaheadDebounceInterval;\n      },\n      set: function set(value) {\n        this._typeaheadDebounceInterval = coerceNumberProperty(value);\n      }\n      /** Unique id of the element. */\n\n    }, {\n      key: \"id\",\n      get: function get() {\n        return this._id;\n      },\n      set: function set(value) {\n        this._id = value || this._uid;\n        this.stateChanges.next();\n      }\n    }, {\n      key: \"panelOpen\",\n      get: function get() {\n        return this._panelOpen;\n      }\n      /** The currently selected option. */\n\n    }, {\n      key: \"selected\",\n      get: function get() {\n        return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n      }\n      /** The value displayed in the trigger. */\n\n    }, {\n      key: \"triggerValue\",\n      get: function get() {\n        if (this.empty) {\n          return '';\n        }\n\n        if (this._multiple) {\n          var selectedOptions = this._selectionModel.selected.map(function (option) {\n            return option.viewValue;\n          });\n\n          if (this._isRtl()) {\n            selectedOptions.reverse();\n          } // TODO(crisbeto): delimiter should be configurable for proper localization.\n\n\n          return selectedOptions.join(', ');\n        }\n\n        return this._selectionModel.selected[0].viewValue;\n      }\n    }, {\n      key: \"empty\",\n      get: function get() {\n        return !this._selectionModel || this._selectionModel.isEmpty();\n      }\n    }, {\n      key: \"shouldLabelFloat\",\n      get: function get() {\n        return this._panelOpen || !this.empty;\n      }\n    }]);\n\n    return MatSelect;\n  }(_MatSelectMixinBase);\n\n  MatSelect.ɵfac = function MatSelect_Factory(t) {\n    return new (t || MatSelect)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ViewportRuler), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.ErrorStateMatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.NgForm, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.FormGroupDirective, 8), ɵngcc0.ɵɵdirectiveInject(MAT_FORM_FIELD, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.NgControl, 10), ɵngcc0.ɵɵinjectAttribute('tabindex'), ɵngcc0.ɵɵdirectiveInject(MAT_SELECT_SCROLL_STRATEGY), ɵngcc0.ɵɵdirectiveInject(ɵngcc5.LiveAnnouncer), ɵngcc0.ɵɵdirectiveInject(MAT_SELECT_CONFIG, 8));\n  };\n\n  MatSelect.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n    type: MatSelect,\n    selectors: [[\"mat-select\"]],\n    contentQueries: function MatSelect_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatSelectTrigger, true);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatOption, true);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatOptgroup, true);\n      }\n\n      if (rf & 2) {\n        var _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.customTrigger = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.options = _t);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.optionGroups = _t);\n      }\n    },\n    viewQuery: function MatSelect_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, true);\n        ɵngcc0.ɵɵviewQuery(_c1, true);\n        ɵngcc0.ɵɵviewQuery(CdkConnectedOverlay, true);\n      }\n\n      if (rf & 2) {\n        var _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.trigger = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.panel = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.overlayDir = _t.first);\n      }\n    },\n    hostAttrs: [\"role\", \"listbox\", 1, \"mat-select\"],\n    hostVars: 19,\n    hostBindings: function MatSelect_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"keydown\", function MatSelect_keydown_HostBindingHandler($event) {\n          return ctx._handleKeydown($event);\n        })(\"focus\", function MatSelect_focus_HostBindingHandler() {\n          return ctx._onFocus();\n        })(\"blur\", function MatSelect_blur_HostBindingHandler() {\n          return ctx._onBlur();\n        });\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"id\", ctx.id)(\"tabindex\", ctx.tabIndex)(\"aria-label\", ctx._getAriaLabel())(\"aria-labelledby\", ctx._getAriaLabelledby())(\"aria-required\", ctx.required.toString())(\"aria-disabled\", ctx.disabled.toString())(\"aria-invalid\", ctx.errorState)(\"aria-owns\", ctx.panelOpen ? ctx._optionIds : null)(\"aria-multiselectable\", ctx.multiple)(\"aria-describedby\", ctx._ariaDescribedby || null)(\"aria-activedescendant\", ctx._getAriaActiveDescendant());\n        ɵngcc0.ɵɵclassProp(\"mat-select-disabled\", ctx.disabled)(\"mat-select-invalid\", ctx.errorState)(\"mat-select-required\", ctx.required)(\"mat-select-empty\", ctx.empty);\n      }\n    },\n    inputs: {\n      disabled: \"disabled\",\n      disableRipple: \"disableRipple\",\n      tabIndex: \"tabIndex\",\n      ariaLabel: [\"aria-label\", \"ariaLabel\"],\n      id: \"id\",\n      disableOptionCentering: \"disableOptionCentering\",\n      typeaheadDebounceInterval: \"typeaheadDebounceInterval\",\n      placeholder: \"placeholder\",\n      required: \"required\",\n      multiple: \"multiple\",\n      compareWith: \"compareWith\",\n      value: \"value\",\n      panelClass: \"panelClass\",\n      ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"],\n      errorStateMatcher: \"errorStateMatcher\",\n      sortComparator: \"sortComparator\"\n    },\n    outputs: {\n      openedChange: \"openedChange\",\n      _openedStream: \"opened\",\n      _closedStream: \"closed\",\n      selectionChange: \"selectionChange\",\n      valueChange: \"valueChange\"\n    },\n    exportAs: [\"matSelect\"],\n    features: [ɵngcc0.ɵɵProvidersFeature([{\n      provide: MatFormFieldControl,\n      useExisting: MatSelect\n    }, {\n      provide: MAT_OPTION_PARENT_COMPONENT,\n      useExisting: MatSelect\n    }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature],\n    ngContentSelectors: _c3,\n    decls: 9,\n    vars: 9,\n    consts: [[\"cdk-overlay-origin\", \"\", \"aria-hidden\", \"true\", 1, \"mat-select-trigger\", 3, \"click\"], [\"origin\", \"cdkOverlayOrigin\", \"trigger\", \"\"], [1, \"mat-select-value\", 3, \"ngSwitch\"], [\"class\", \"mat-select-placeholder\", 4, \"ngSwitchCase\"], [\"class\", \"mat-select-value-text\", 3, \"ngSwitch\", 4, \"ngSwitchCase\"], [1, \"mat-select-arrow-wrapper\"], [1, \"mat-select-arrow\"], [\"cdk-connected-overlay\", \"\", \"cdkConnectedOverlayLockPosition\", \"\", \"cdkConnectedOverlayHasBackdrop\", \"\", \"cdkConnectedOverlayBackdropClass\", \"cdk-overlay-transparent-backdrop\", 3, \"cdkConnectedOverlayScrollStrategy\", \"cdkConnectedOverlayOrigin\", \"cdkConnectedOverlayOpen\", \"cdkConnectedOverlayPositions\", \"cdkConnectedOverlayMinWidth\", \"cdkConnectedOverlayOffsetY\", \"backdropClick\", \"attach\", \"detach\"], [1, \"mat-select-placeholder\"], [1, \"mat-select-value-text\", 3, \"ngSwitch\"], [4, \"ngSwitchDefault\"], [4, \"ngSwitchCase\"], [1, \"mat-select-panel-wrap\"], [3, \"ngClass\", \"keydown\"], [\"panel\", \"\"]],\n    template: function MatSelect_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c2);\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0, 1);\n        ɵngcc0.ɵɵlistener(\"click\", function MatSelect_Template_div_click_0_listener() {\n          return ctx.toggle();\n        });\n        ɵngcc0.ɵɵelementStart(3, \"div\", 2);\n        ɵngcc0.ɵɵtemplate(4, MatSelect_span_4_Template, 2, 1, \"span\", 3);\n        ɵngcc0.ɵɵtemplate(5, MatSelect_span_5_Template, 3, 2, \"span\", 4);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(6, \"div\", 5);\n        ɵngcc0.ɵɵelement(7, \"div\", 6);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtemplate(8, MatSelect_ng_template_8_Template, 4, 11, \"ng-template\", 7);\n        ɵngcc0.ɵɵlistener(\"backdropClick\", function MatSelect_Template_ng_template_backdropClick_8_listener() {\n          return ctx.close();\n        })(\"attach\", function MatSelect_Template_ng_template_attach_8_listener() {\n          return ctx._onAttached();\n        })(\"detach\", function MatSelect_Template_ng_template_detach_8_listener() {\n          return ctx.close();\n        });\n      }\n\n      if (rf & 2) {\n        var _r0 = ɵngcc0.ɵɵreference(1);\n\n        ɵngcc0.ɵɵadvance(3);\n        ɵngcc0.ɵɵproperty(\"ngSwitch\", ctx.empty);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngSwitchCase\", true);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngSwitchCase\", false);\n        ɵngcc0.ɵɵadvance(3);\n        ɵngcc0.ɵɵproperty(\"cdkConnectedOverlayScrollStrategy\", ctx._scrollStrategy)(\"cdkConnectedOverlayOrigin\", _r0)(\"cdkConnectedOverlayOpen\", ctx.panelOpen)(\"cdkConnectedOverlayPositions\", ctx._positions)(\"cdkConnectedOverlayMinWidth\", ctx._triggerRect == null ? null : ctx._triggerRect.width)(\"cdkConnectedOverlayOffsetY\", ctx._offsetY);\n      }\n    },\n    directives: [ɵngcc6.CdkOverlayOrigin, ɵngcc7.NgSwitch, ɵngcc7.NgSwitchCase, ɵngcc6.CdkConnectedOverlay, ɵngcc7.NgSwitchDefault, ɵngcc7.NgClass],\n    styles: [\".mat-select{display:inline-block;width:100%;outline:none}.mat-select-trigger{display:inline-table;cursor:pointer;position:relative;box-sizing:border-box}.mat-select-disabled .mat-select-trigger{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:default}.mat-select-value{display:table-cell;max-width:0;width:100%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.mat-select-value-text{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-select-arrow-wrapper{display:table-cell;vertical-align:middle}.mat-form-field-appearance-fill .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-outline .mat-select-arrow-wrapper{transform:translateY(-25%)}.mat-form-field-appearance-standard.mat-form-field-has-label .mat-select:not(.mat-select-empty) .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}._mat-animation-noopable.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:none}.mat-select-arrow{width:0;height:0;border-left:5px solid transparent;border-right:5px solid transparent;border-top:5px solid;margin:0 4px}.mat-select-panel-wrap{flex-basis:100%}.mat-select-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;padding-top:0;padding-bottom:0;max-height:256px;min-width:100%;border-radius:4px}.cdk-high-contrast-active .mat-select-panel{outline:solid 1px}.mat-select-panel .mat-optgroup-label,.mat-select-panel .mat-option{font-size:inherit;line-height:3em;height:3em}.mat-form-field-type-mat-select:not(.mat-form-field-disabled) .mat-form-field-flex{cursor:pointer}.mat-form-field-type-mat-select .mat-form-field-label{width:calc(100% - 18px)}.mat-select-placeholder{transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}._mat-animation-noopable .mat-select-placeholder{transition:none}.mat-form-field-hide-placeholder .mat-select-placeholder{color:transparent;-webkit-text-fill-color:transparent;transition:none;display:block}\\n\"],\n    encapsulation: 2,\n    data: {\n      animation: [matSelectAnimations.transformPanelWrap, matSelectAnimations.transformPanel]\n    },\n    changeDetection: 0\n  });\n\n  MatSelect.ctorParameters = function () {\n    return [{\n      type: ViewportRuler\n    }, {\n      type: ChangeDetectorRef\n    }, {\n      type: NgZone\n    }, {\n      type: ErrorStateMatcher\n    }, {\n      type: ElementRef\n    }, {\n      type: Directionality,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: NgForm,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: FormGroupDirective,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: MatFormField,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MAT_FORM_FIELD]\n      }]\n    }, {\n      type: NgControl,\n      decorators: [{\n        type: Self\n      }, {\n        type: Optional\n      }]\n    }, {\n      type: String,\n      decorators: [{\n        type: Attribute,\n        args: ['tabindex']\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MAT_SELECT_SCROLL_STRATEGY]\n      }]\n    }, {\n      type: LiveAnnouncer\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MAT_SELECT_CONFIG]\n      }]\n    }];\n  };\n\n  MatSelect.propDecorators = {\n    trigger: [{\n      type: ViewChild,\n      args: ['trigger']\n    }],\n    panel: [{\n      type: ViewChild,\n      args: ['panel']\n    }],\n    overlayDir: [{\n      type: ViewChild,\n      args: [CdkConnectedOverlay]\n    }],\n    options: [{\n      type: ContentChildren,\n      args: [MatOption, {\n        descendants: true\n      }]\n    }],\n    optionGroups: [{\n      type: ContentChildren,\n      args: [MatOptgroup, {\n        descendants: true\n      }]\n    }],\n    panelClass: [{\n      type: Input\n    }],\n    customTrigger: [{\n      type: ContentChild,\n      args: [MatSelectTrigger]\n    }],\n    placeholder: [{\n      type: Input\n    }],\n    required: [{\n      type: Input\n    }],\n    multiple: [{\n      type: Input\n    }],\n    disableOptionCentering: [{\n      type: Input\n    }],\n    compareWith: [{\n      type: Input\n    }],\n    value: [{\n      type: Input\n    }],\n    ariaLabel: [{\n      type: Input,\n      args: ['aria-label']\n    }],\n    ariaLabelledby: [{\n      type: Input,\n      args: ['aria-labelledby']\n    }],\n    errorStateMatcher: [{\n      type: Input\n    }],\n    typeaheadDebounceInterval: [{\n      type: Input\n    }],\n    sortComparator: [{\n      type: Input\n    }],\n    id: [{\n      type: Input\n    }],\n    openedChange: [{\n      type: Output\n    }],\n    _openedStream: [{\n      type: Output,\n      args: ['opened']\n    }],\n    _closedStream: [{\n      type: Output,\n      args: ['closed']\n    }],\n    selectionChange: [{\n      type: Output\n    }],\n    valueChange: [{\n      type: Output\n    }]\n  };\n  /*@__PURE__*/\n\n  (function () {\n    ɵngcc0.ɵsetClassMetadata(MatSelect, [{\n      type: Component,\n      args: [{\n        selector: 'mat-select',\n        exportAs: 'matSelect',\n        template: \"<div cdk-overlay-origin\\n     class=\\\"mat-select-trigger\\\"\\n     aria-hidden=\\\"true\\\"\\n     (click)=\\\"toggle()\\\"\\n     #origin=\\\"cdkOverlayOrigin\\\"\\n     #trigger>\\n  <div class=\\\"mat-select-value\\\" [ngSwitch]=\\\"empty\\\">\\n    <span class=\\\"mat-select-placeholder\\\" *ngSwitchCase=\\\"true\\\">{{placeholder || '\\\\u00A0'}}</span>\\n    <span class=\\\"mat-select-value-text\\\" *ngSwitchCase=\\\"false\\\" [ngSwitch]=\\\"!!customTrigger\\\">\\n      <span *ngSwitchDefault>{{triggerValue || '\\\\u00A0'}}</span>\\n      <ng-content select=\\\"mat-select-trigger\\\" *ngSwitchCase=\\\"true\\\"></ng-content>\\n    </span>\\n  </div>\\n\\n  <div class=\\\"mat-select-arrow-wrapper\\\"><div class=\\\"mat-select-arrow\\\"></div></div>\\n</div>\\n\\n<ng-template\\n  cdk-connected-overlay\\n  cdkConnectedOverlayLockPosition\\n  cdkConnectedOverlayHasBackdrop\\n  cdkConnectedOverlayBackdropClass=\\\"cdk-overlay-transparent-backdrop\\\"\\n  [cdkConnectedOverlayScrollStrategy]=\\\"_scrollStrategy\\\"\\n  [cdkConnectedOverlayOrigin]=\\\"origin\\\"\\n  [cdkConnectedOverlayOpen]=\\\"panelOpen\\\"\\n  [cdkConnectedOverlayPositions]=\\\"_positions\\\"\\n  [cdkConnectedOverlayMinWidth]=\\\"_triggerRect?.width\\\"\\n  [cdkConnectedOverlayOffsetY]=\\\"_offsetY\\\"\\n  (backdropClick)=\\\"close()\\\"\\n  (attach)=\\\"_onAttached()\\\"\\n  (detach)=\\\"close()\\\">\\n  <div class=\\\"mat-select-panel-wrap\\\" [@transformPanelWrap]>\\n    <div\\n      #panel\\n      [attr.id]=\\\"id + '-panel'\\\"\\n      class=\\\"mat-select-panel {{ _getPanelTheme() }}\\\"\\n      [ngClass]=\\\"panelClass\\\"\\n      [@transformPanel]=\\\"multiple ? 'showing-multiple' : 'showing'\\\"\\n      (@transformPanel.done)=\\\"_panelDoneAnimatingStream.next($event.toState)\\\"\\n      [style.transformOrigin]=\\\"_transformOrigin\\\"\\n      [style.font-size.px]=\\\"_triggerFontSize\\\"\\n      (keydown)=\\\"_handleKeydown($event)\\\">\\n      <ng-content></ng-content>\\n    </div>\\n  </div>\\n</ng-template>\\n\",\n        inputs: ['disabled', 'disableRipple', 'tabIndex'],\n        encapsulation: ViewEncapsulation.None,\n        changeDetection: ChangeDetectionStrategy.OnPush,\n        host: {\n          'role': 'listbox',\n          '[attr.id]': 'id',\n          '[attr.tabindex]': 'tabIndex',\n          '[attr.aria-label]': '_getAriaLabel()',\n          '[attr.aria-labelledby]': '_getAriaLabelledby()',\n          '[attr.aria-required]': 'required.toString()',\n          '[attr.aria-disabled]': 'disabled.toString()',\n          '[attr.aria-invalid]': 'errorState',\n          '[attr.aria-owns]': 'panelOpen ? _optionIds : null',\n          '[attr.aria-multiselectable]': 'multiple',\n          '[attr.aria-describedby]': '_ariaDescribedby || null',\n          '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n          '[class.mat-select-disabled]': 'disabled',\n          '[class.mat-select-invalid]': 'errorState',\n          '[class.mat-select-required]': 'required',\n          '[class.mat-select-empty]': 'empty',\n          'class': 'mat-select',\n          '(keydown)': '_handleKeydown($event)',\n          '(focus)': '_onFocus()',\n          '(blur)': '_onBlur()'\n        },\n        animations: [matSelectAnimations.transformPanelWrap, matSelectAnimations.transformPanel],\n        providers: [{\n          provide: MatFormFieldControl,\n          useExisting: MatSelect\n        }, {\n          provide: MAT_OPTION_PARENT_COMPONENT,\n          useExisting: MatSelect\n        }],\n        styles: [\".mat-select{display:inline-block;width:100%;outline:none}.mat-select-trigger{display:inline-table;cursor:pointer;position:relative;box-sizing:border-box}.mat-select-disabled .mat-select-trigger{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:default}.mat-select-value{display:table-cell;max-width:0;width:100%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.mat-select-value-text{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-select-arrow-wrapper{display:table-cell;vertical-align:middle}.mat-form-field-appearance-fill .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-outline .mat-select-arrow-wrapper{transform:translateY(-25%)}.mat-form-field-appearance-standard.mat-form-field-has-label .mat-select:not(.mat-select-empty) .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}._mat-animation-noopable.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:none}.mat-select-arrow{width:0;height:0;border-left:5px solid transparent;border-right:5px solid transparent;border-top:5px solid;margin:0 4px}.mat-select-panel-wrap{flex-basis:100%}.mat-select-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;padding-top:0;padding-bottom:0;max-height:256px;min-width:100%;border-radius:4px}.cdk-high-contrast-active .mat-select-panel{outline:solid 1px}.mat-select-panel .mat-optgroup-label,.mat-select-panel .mat-option{font-size:inherit;line-height:3em;height:3em}.mat-form-field-type-mat-select:not(.mat-form-field-disabled) .mat-form-field-flex{cursor:pointer}.mat-form-field-type-mat-select .mat-form-field-label{width:calc(100% - 18px)}.mat-select-placeholder{transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}._mat-animation-noopable .mat-select-placeholder{transition:none}.mat-form-field-hide-placeholder .mat-select-placeholder{color:transparent;-webkit-text-fill-color:transparent;transition:none;display:block}\\n\"]\n      }]\n    }], function () {\n      return [{\n        type: ɵngcc1.ViewportRuler\n      }, {\n        type: ɵngcc0.ChangeDetectorRef\n      }, {\n        type: ɵngcc0.NgZone\n      }, {\n        type: ɵngcc2.ErrorStateMatcher\n      }, {\n        type: ɵngcc0.ElementRef\n      }, {\n        type: ɵngcc3.Directionality,\n        decorators: [{\n          type: Optional\n        }]\n      }, {\n        type: ɵngcc4.NgForm,\n        decorators: [{\n          type: Optional\n        }]\n      }, {\n        type: ɵngcc4.FormGroupDirective,\n        decorators: [{\n          type: Optional\n        }]\n      }, {\n        type: ɵngcc8.MatFormField,\n        decorators: [{\n          type: Optional\n        }, {\n          type: Inject,\n          args: [MAT_FORM_FIELD]\n        }]\n      }, {\n        type: ɵngcc4.NgControl,\n        decorators: [{\n          type: Self\n        }, {\n          type: Optional\n        }]\n      }, {\n        type: String,\n        decorators: [{\n          type: Attribute,\n          args: ['tabindex']\n        }]\n      }, {\n        type: undefined,\n        decorators: [{\n          type: Inject,\n          args: [MAT_SELECT_SCROLL_STRATEGY]\n        }]\n      }, {\n        type: ɵngcc5.LiveAnnouncer\n      }, {\n        type: undefined,\n        decorators: [{\n          type: Optional\n        }, {\n          type: Inject,\n          args: [MAT_SELECT_CONFIG]\n        }]\n      }];\n    }, {\n      ariaLabel: [{\n        type: Input,\n        args: ['aria-label']\n      }],\n      openedChange: [{\n        type: Output\n      }],\n      _openedStream: [{\n        type: Output,\n        args: ['opened']\n      }],\n      _closedStream: [{\n        type: Output,\n        args: ['closed']\n      }],\n      selectionChange: [{\n        type: Output\n      }],\n      valueChange: [{\n        type: Output\n      }],\n      id: [{\n        type: Input\n      }],\n      disableOptionCentering: [{\n        type: Input\n      }],\n      typeaheadDebounceInterval: [{\n        type: Input\n      }],\n      placeholder: [{\n        type: Input\n      }],\n      required: [{\n        type: Input\n      }],\n      multiple: [{\n        type: Input\n      }],\n      compareWith: [{\n        type: Input\n      }],\n      value: [{\n        type: Input\n      }],\n      trigger: [{\n        type: ViewChild,\n        args: ['trigger']\n      }],\n      panel: [{\n        type: ViewChild,\n        args: ['panel']\n      }],\n      overlayDir: [{\n        type: ViewChild,\n        args: [CdkConnectedOverlay]\n      }],\n      options: [{\n        type: ContentChildren,\n        args: [MatOption, {\n          descendants: true\n        }]\n      }],\n      optionGroups: [{\n        type: ContentChildren,\n        args: [MatOptgroup, {\n          descendants: true\n        }]\n      }],\n      panelClass: [{\n        type: Input\n      }],\n      customTrigger: [{\n        type: ContentChild,\n        args: [MatSelectTrigger]\n      }],\n      ariaLabelledby: [{\n        type: Input,\n        args: ['aria-labelledby']\n      }],\n      errorStateMatcher: [{\n        type: Input\n      }],\n      sortComparator: [{\n        type: Input\n      }]\n    });\n  })();\n\n  return MatSelect;\n}();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nvar MatSelectModule =\n/** @class */\nfunction () {\n  var MatSelectModule = function MatSelectModule() {\n    _classCallCheck(this, MatSelectModule);\n  };\n\n  MatSelectModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n    type: MatSelectModule\n  });\n  MatSelectModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n    factory: function MatSelectModule_Factory(t) {\n      return new (t || MatSelectModule)();\n    },\n    providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER],\n    imports: [[CommonModule, OverlayModule, MatOptionModule, MatCommonModule], CdkScrollableModule, MatFormFieldModule, MatOptionModule, MatCommonModule]\n  });\n\n  (function () {\n    (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatSelectModule, {\n      declarations: function declarations() {\n        return [MatSelect, MatSelectTrigger];\n      },\n      imports: function imports() {\n        return [CommonModule, OverlayModule, MatOptionModule, MatCommonModule];\n      },\n      exports: function exports() {\n        return [CdkScrollableModule, MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule];\n      }\n    });\n  })();\n  /*@__PURE__*/\n\n\n  (function () {\n    ɵngcc0.ɵsetClassMetadata(MatSelectModule, [{\n      type: NgModule,\n      args: [{\n        imports: [CommonModule, OverlayModule, MatOptionModule, MatCommonModule],\n        exports: [CdkScrollableModule, MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule],\n        declarations: [MatSelect, MatSelectTrigger],\n        providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER]\n      }]\n    }], null, null);\n  })();\n\n  return MatSelectModule;\n}();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { MAT_SELECT_CONFIG, MAT_SELECT_SCROLL_STRATEGY, MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY, MatSelect, MatSelectChange, MatSelectModule, MatSelectTrigger, SELECT_ITEM_HEIGHT_EM, SELECT_MULTIPLE_PANEL_PADDING_X, SELECT_PANEL_INDENT_PADDING_X, SELECT_PANEL_MAX_HEIGHT, SELECT_PANEL_PADDING_X, SELECT_PANEL_VIEWPORT_PADDING, matSelectAnimations };","map":{"version":3,"sources":["../../../../../../src/material/select/select-animations.ts","../../../../../../src/material/select/select-errors.ts","../../../../../../src/material/select/select.ts","../../../../../../src/material/select/select-module.ts","../../../../../../src/material/select/public-api.ts","../../../../../../src/material/select/index.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  animate,\n  animateChild,\n  AnimationTriggerMetadata,\n  query,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n * @docs-private\n */\nexport const matSelectAnimations: {\n  readonly transformPanelWrap: AnimationTriggerMetadata;\n  readonly transformPanel: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation ensures the select's overlay panel animation (transformPanel) is called when\n   * closing the select.\n   * This is needed due to https://github.com/angular/angular/issues/23302\n   */\n  transformPanelWrap: trigger('transformPanelWrap', [\n      transition('* => void', query('@transformPanel', [animateChild()],\n          {optional: true}))\n  ]),\n\n  /**\n   * This animation transforms the select's overlay panel on and off the page.\n   *\n   * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n   * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n   * side to ensure the option text correctly overlaps the trigger text.\n   *\n   * When the panel is removed from the DOM, it simply fades out linearly.\n   */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      transform: 'scaleY(0.8)',\n      minWidth: '100%',\n      opacity: 0\n    })),\n    state('showing', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 32px)', // 32px = 2 * 16px padding\n      transform: 'scaleY(1)'\n    })),\n    state('showing-multiple', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 64px)', // 64px = 48px padding on the left + 16px padding on the right\n      transform: 'scaleY(1)'\n    })),\n    transition('void => *', animate('120ms cubic-bezier(0, 0, 0.2, 1)')),\n    transition('* => void', animate('100ms 25ms linear', style({opacity: 0})))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nexport function getMatSelectDynamicMultipleError(): Error {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nexport function getMatSelectNonArrayValueError(): Error {\n  return Error('Value must be an array in multiple-selection mode.');\n}\n\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nexport function getMatSelectNonFunctionValueError(): Error {\n  return Error('`compareWith` must be a function.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActiveDescendantKeyManager, LiveAnnouncer} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  BooleanInput,\n  coerceBooleanProperty,\n  coerceNumberProperty,\n  NumberInput\n} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  A,\n  DOWN_ARROW,\n  END,\n  ENTER,\n  hasModifierKey,\n  HOME,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n  SPACE,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  CdkConnectedOverlay,\n  ConnectedPosition,\n  Overlay,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  isDevMode,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  HasTabIndex,\n  HasTabIndexCtor,\n  MAT_OPTION_PARENT_COMPONENT,\n  MatOptgroup,\n  MatOption,\n  MatOptionSelectionChange,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinErrorState,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {MAT_FORM_FIELD, MatFormField, MatFormFieldControl} from '@angular/material/form-field';\nimport {defer, merge, Observable, Subject} from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  map,\n  startWith,\n  switchMap,\n  take,\n  takeUntil,\n} from 'rxjs/operators';\nimport {matSelectAnimations} from './select-animations';\nimport {\n  getMatSelectDynamicMultipleError,\n  getMatSelectNonArrayValueError,\n  getMatSelectNonFunctionValueError,\n} from './select-errors';\n\n\nlet nextUniqueId = 0;\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n\n/** The max height of the select's overlay panel */\nexport const SELECT_PANEL_MAX_HEIGHT = 256;\n\n/** The panel's padding on the x-axis */\nexport const SELECT_PANEL_PADDING_X = 16;\n\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n\n/** The height of the select items in `em` units. */\nexport const SELECT_ITEM_HEIGHT_EM = 3;\n\n// TODO(josephperrott): Revert to a constant after 2018 spec updates are fully merged.\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * Calculated as:\n * (SELECT_PANEL_PADDING_X * 1.5) + 16 = 40\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 16px.\n */\nexport const SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + 16;\n\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n\n/** Injection token that determines the scroll handling while a select is open. */\nexport const MAT_SELECT_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-select-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** Object that can be used to configure the default options for the select module. */\nexport interface MatSelectConfig {\n  /** Whether option centering should be disabled. */\n  disableOptionCentering?: boolean;\n\n  /** Time to wait in milliseconds after the last keystroke before moving focus to an item. */\n  typeaheadDebounceInterval?: number;\n}\n\n/** Injection token that can be used to provide the default options the select module. */\nexport const MAT_SELECT_CONFIG = new InjectionToken<MatSelectConfig>('MAT_SELECT_CONFIG');\n\n/** @docs-private */\nexport const MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_SELECT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/** Change event object that is emitted when the select value has changed. */\nexport class MatSelectChange {\n  constructor(\n    /** Reference to the select that emitted the change event. */\n    public source: MatSelect,\n    /** Current value of the select that emitted the event. */\n    public value: any) { }\n}\n\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nclass MatSelectBase {\n  constructor(public _elementRef: ElementRef,\n              public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nconst _MatSelectMixinBase:\n    CanDisableCtor &\n    HasTabIndexCtor &\n    CanDisableRippleCtor &\n    CanUpdateErrorStateCtor &\n    typeof MatSelectBase =\n        mixinDisableRipple(mixinTabIndex(mixinDisabled(mixinErrorState(MatSelectBase))));\n\n\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\n@Directive({\n  selector: 'mat-select-trigger'\n})\nexport class MatSelectTrigger {}\n\n\n@Component({\n  selector: 'mat-select',\n  exportAs: 'matSelect',\n  templateUrl: 'select.html',\n  styleUrls: ['select.css'],\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'role': 'listbox',\n    '[attr.id]': 'id',\n    '[attr.tabindex]': 'tabIndex',\n    '[attr.aria-label]': '_getAriaLabel()',\n    '[attr.aria-labelledby]': '_getAriaLabelledby()',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-owns]': 'panelOpen ? _optionIds : null',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n    '[class.mat-select-disabled]': 'disabled',\n    '[class.mat-select-invalid]': 'errorState',\n    '[class.mat-select-required]': 'required',\n    '[class.mat-select-empty]': 'empty',\n    'class': 'mat-select',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n  },\n  animations: [\n    matSelectAnimations.transformPanelWrap,\n    matSelectAnimations.transformPanel\n  ],\n  providers: [\n    {provide: MatFormFieldControl, useExisting: MatSelect},\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect}\n  ],\n})\nexport class MatSelect extends _MatSelectMixinBase implements AfterContentInit, OnChanges,\n    OnDestroy, OnInit, DoCheck, ControlValueAccessor, CanDisable, HasTabIndex,\n    MatFormFieldControl<any>, CanUpdateErrorState, CanDisableRipple {\n  private _scrollStrategyFactory: () => ScrollStrategy;\n\n  /** Whether or not the overlay panel is open. */\n  private _panelOpen = false;\n\n  /** Whether filling out the select is required in the form. */\n  private _required: boolean = false;\n\n  /** The scroll position of the overlay panel, calculated to center the selected option. */\n  private _scrollTop = 0;\n\n  /** The placeholder displayed in the trigger of the select. */\n  private _placeholder: string;\n\n  /** Whether the component is in multiple selection mode. */\n  private _multiple: boolean = false;\n\n  /** Comparison function to specify which option is displayed. Defaults to object equality. */\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /** Unique id for this input. */\n  private _uid = `mat-select-${nextUniqueId++}`;\n\n  /** Emits whenever the component is destroyed. */\n  private readonly _destroy = new Subject<void>();\n\n  /** The last measured value for the trigger's client bounding rect. */\n  _triggerRect: ClientRect;\n\n  /** The aria-describedby attribute on the select for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** The cached font-size of the trigger element. */\n  _triggerFontSize = 0;\n\n  /** Deals with the selection logic. */\n  _selectionModel: SelectionModel<MatOption>;\n\n  /** Manages keyboard events for options in the panel. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when select has been touched` */\n  _onTouched = () => {};\n\n  /** The IDs of child options to be passed to the aria-owns attribute. */\n  _optionIds: string = '';\n\n  /** The value of the select panel's transform-origin property. */\n  _transformOrigin: string = 'top';\n\n  /** Emits when the panel element is finished transforming in. */\n  _panelDoneAnimatingStream = new Subject<string>();\n\n  /** Strategy that will be used to handle scrolling while the select panel is open. */\n  _scrollStrategy: ScrollStrategy;\n\n  /**\n   * The y-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text.\n   * when the panel opens. Will change based on the y-position of the selected option.\n   */\n  _offsetY = 0;\n\n  /**\n   * This position config ensures that the top \"start\" corner of the overlay\n   * is aligned with with the top \"start\" of the origin by default (overlapping\n   * the trigger completely). If the panel cannot fit below the trigger, it\n   * will fall back to a position above the trigger.\n   */\n  _positions: ConnectedPosition[] = [\n    {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'top',\n    },\n    {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'bottom',\n    },\n  ];\n\n  /** Whether the component is disabling centering of the active option over the trigger. */\n  private _disableOptionCentering: boolean = false;\n\n  /** Whether the select is focused. */\n  get focused(): boolean {\n    return this._focused || this._panelOpen;\n  }\n  private _focused = false;\n\n  /** A name for this control that can be used by `mat-form-field`. */\n  controlType = 'mat-select';\n\n  /** Trigger that opens the select. */\n  @ViewChild('trigger') trigger: ElementRef;\n\n  /** Panel containing the select options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /**\n   * Overlay pane containing the options.\n   * @deprecated To be turned into a private API.\n   * @breaking-change 10.0.0\n   * @docs-private\n   */\n  @ViewChild(CdkConnectedOverlay) overlayDir: CdkConnectedOverlay;\n\n  /** All of the defined select options. */\n  @ContentChildren(MatOption, {descendants: true}) options: QueryList<MatOption>;\n\n  /** All of the defined groups of options. */\n  @ContentChildren(MatOptgroup, {descendants: true}) optionGroups: QueryList<MatOptgroup>;\n\n  /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** User-supplied override of the trigger element. */\n  @ContentChild(MatSelectTrigger) customTrigger: MatSelectTrigger;\n\n  /** Placeholder to be shown if no value has been selected. */\n  @Input()\n  get placeholder(): string { return this._placeholder; }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n\n  /** Whether the component is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n\n  /** Whether the user should be allowed to select multiple options. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    if (this._selectionModel) {\n      throw getMatSelectDynamicMultipleError();\n    }\n\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether to center the active option over the trigger. */\n  @Input()\n  get disableOptionCentering(): boolean { return this._disableOptionCentering; }\n  set disableOptionCentering(value: boolean) {\n    this._disableOptionCentering = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith() { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    if (typeof fn !== 'function') {\n      throw getMatSelectNonFunctionValueError();\n    }\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n\n  /** Value of the select control. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (newValue !== this._value) {\n      this.writeValue(newValue);\n      this._value = newValue;\n    }\n  }\n  private _value: any;\n\n  /** Aria label of the select. If not specified, the placeholder will be used as label. */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /** Input that can be used to specify the `aria-labelledby` attribute. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Time to wait in milliseconds after the last keystroke before moving focus to an item. */\n  @Input()\n  get typeaheadDebounceInterval(): number { return this._typeaheadDebounceInterval; }\n  set typeaheadDebounceInterval(value: number) {\n    this._typeaheadDebounceInterval = coerceNumberProperty(value);\n  }\n  private _typeaheadDebounceInterval: number;\n\n  /**\n   * Function used to sort the values in a select in multiple mode.\n   * Follows the same logic as `Array.prototype.sort`.\n   */\n  @Input() sortComparator: (a: MatOption, b: MatOption, options: MatOption[]) => number;\n\n  /** Unique id of the element. */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) {\n    this._id = value || this._uid;\n    this.stateChanges.next();\n  }\n  private _id: string;\n\n  /** Combined stream of all of the child options' change events. */\n  readonly optionSelectionChanges: Observable<MatOptionSelectionChange> = defer(() => {\n    const options = this.options;\n\n    if (options) {\n      return options.changes.pipe(\n        startWith(options),\n        switchMap(() => merge(...options.map(option => option.onSelectionChange)))\n      );\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n  }) as Observable<MatOptionSelectionChange>;\n\n  /** Event emitted when the select panel has been toggled. */\n  @Output() readonly openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the select has been opened. */\n  @Output('opened') readonly _openedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => o), map(() => {}));\n\n  /** Event emitted when the select has been closed. */\n  @Output('closed') readonly _closedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => !o), map(() => {}));\n\n   /** Event emitted when the selected value has been changed by the user. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectChange> =\n      new EventEmitter<MatSelectChange>();\n\n  /**\n   * Event that emits whenever the raw value of the select changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  constructor(\n    private _viewportRuler: ViewportRuler,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _ngZone: NgZone,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    elementRef: ElementRef,\n    @Optional() private _dir: Directionality,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    @Optional() @Inject(MAT_FORM_FIELD) private _parentFormField: MatFormField,\n    @Self() @Optional() public ngControl: NgControl,\n    @Attribute('tabindex') tabIndex: string,\n    @Inject(MAT_SELECT_SCROLL_STRATEGY) scrollStrategyFactory: any,\n    private _liveAnnouncer: LiveAnnouncer,\n    @Optional() @Inject(MAT_SELECT_CONFIG) defaults?: MatSelectConfig) {\n    super(elementRef, _defaultErrorStateMatcher, _parentForm,\n          _parentFormGroup, ngControl);\n\n    if (this.ngControl) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      this.ngControl.valueAccessor = this;\n    }\n\n    this._scrollStrategyFactory = scrollStrategyFactory;\n    this._scrollStrategy = this._scrollStrategyFactory();\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n\n    if (defaults) {\n      if (defaults.disableOptionCentering != null) {\n        this.disableOptionCentering = defaults.disableOptionCentering;\n      }\n\n      if (defaults.typeaheadDebounceInterval != null) {\n        this.typeaheadDebounceInterval = defaults.typeaheadDebounceInterval;\n      }\n    }\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatOption>(this.multiple);\n    this.stateChanges.next();\n\n    // We need `distinctUntilChanged` here, because some browsers will\n    // fire the animation end event twice for the same animation. See:\n    // https://github.com/angular/angular/issues/24084\n    this._panelDoneAnimatingStream\n      .pipe(distinctUntilChanged(), takeUntil(this._destroy))\n      .subscribe(() => {\n        if (this.panelOpen) {\n          this._scrollTop = 0;\n          this.openedChange.emit(true);\n        } else {\n          this.openedChange.emit(false);\n          this.overlayDir.offsetX = 0;\n          this._changeDetectorRef.markForCheck();\n        }\n      });\n\n    this._viewportRuler.change()\n      .pipe(takeUntil(this._destroy))\n      .subscribe(() => {\n        if (this._panelOpen) {\n          this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n          this._changeDetectorRef.markForCheck();\n        }\n      });\n  }\n\n  ngAfterContentInit() {\n    this._initKeyManager();\n\n    this._selectionModel.changed.pipe(takeUntil(this._destroy)).subscribe(event => {\n      event.added.forEach(option => option.select());\n      event.removed.forEach(option => option.deselect());\n    });\n\n    this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n      this._resetOptions();\n      this._initializeSelection();\n    });\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      this.updateErrorState();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n    // the parent form field know to run change detection when the disabled state changes.\n    if (changes['disabled']) {\n      this.stateChanges.next();\n    }\n\n    if (changes['typeaheadDebounceInterval'] && this._keyManager) {\n      this._keyManager.withTypeAhead(this._typeaheadDebounceInterval);\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroy.next();\n    this._destroy.complete();\n    this.stateChanges.complete();\n  }\n\n  /** Toggles the overlay panel open or closed. */\n  toggle(): void {\n    this.panelOpen ? this.close() : this.open();\n  }\n\n  /** Opens the overlay panel. */\n  open(): void {\n    if (this.disabled || !this.options || !this.options.length || this._panelOpen) {\n      return;\n    }\n\n    this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n    // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n    // `parseInt` ignores the trailing 'px' and converts this to a number.\n    this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement).fontSize || '0');\n\n    this._panelOpen = true;\n    this._keyManager.withHorizontalOrientation(null);\n    this._calculateOverlayPosition();\n    this._highlightCorrectOption();\n    this._changeDetectorRef.markForCheck();\n\n    // Set the font size on the panel element once it exists.\n    this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n      if (this._triggerFontSize && this.overlayDir.overlayRef &&\n          this.overlayDir.overlayRef.overlayElement) {\n        this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n      }\n    });\n  }\n\n  /** Closes the overlay panel and focuses the host element. */\n  close(): void {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n      this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n      this._changeDetectorRef.markForCheck();\n      this._onTouched();\n    }\n  }\n\n  /**\n   * Sets the select's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n  writeValue(value: any): void {\n    if (this.options) {\n      this._setSelectionByValue(value);\n    }\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the value changes.\n   */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the component has been touched.\n   */\n  registerOnTouched(fn: () => {}): void {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Disables the select. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param isDisabled Sets whether the component is disabled.\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  /** Whether or not the overlay panel is open. */\n  get panelOpen(): boolean {\n    return this._panelOpen;\n  }\n\n  /** The currently selected option. */\n  get selected(): MatOption | MatOption[] {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The value displayed in the trigger. */\n  get triggerValue(): string {\n    if (this.empty) {\n      return '';\n    }\n\n    if (this._multiple) {\n      const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n\n      if (this._isRtl()) {\n        selectedOptions.reverse();\n      }\n\n      // TODO(crisbeto): delimiter should be configurable for proper localization.\n      return selectedOptions.join(', ');\n    }\n\n    return this._selectionModel.selected[0].viewValue;\n  }\n\n  /** Whether the element is in RTL mode. */\n  _isRtl(): boolean {\n    return this._dir ? this._dir.value === 'rtl' : false;\n  }\n\n  /** Handles all keydown events on the select. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (!this.disabled) {\n      this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events while the select is closed. */\n  private _handleClosedKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n                       keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n    const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n    const manager = this._keyManager;\n\n    // Open the select on ALT + arrow key to match the native <select>\n    if (!manager.isTyping() && (isOpenKey && !hasModifierKey(event)) ||\n      ((this.multiple || event.altKey) && isArrowKey)) {\n      event.preventDefault(); // prevents the page from scrolling down when pressing space\n      this.open();\n    } else if (!this.multiple) {\n      const previouslySelectedOption = this.selected;\n\n      if (keyCode === HOME || keyCode === END) {\n        keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n        event.preventDefault();\n      } else {\n        manager.onKeydown(event);\n      }\n\n      const selectedOption = this.selected;\n\n      // Since the value has changed, we need to announce it ourselves.\n      if (selectedOption && previouslySelectedOption !== selectedOption) {\n        // We set a duration on the live announcement, because we want the live element to be\n        // cleared after a while so that users can't navigate to it using the arrow keys.\n        this._liveAnnouncer.announce((selectedOption as MatOption).viewValue, 10000);\n      }\n    }\n  }\n\n  /** Handles keyboard events when the selected is open. */\n  private _handleOpenKeydown(event: KeyboardEvent): void {\n    const manager = this._keyManager;\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n    const isTyping = manager.isTyping();\n\n    if (keyCode === HOME || keyCode === END) {\n      event.preventDefault();\n      keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n    } else if (isArrowKey && event.altKey) {\n      // Close the select on ALT + arrow key to match the native <select>\n      event.preventDefault();\n      this.close();\n      // Don't do anything in this case if the user is typing,\n      // because the typing sequence can include the space key.\n    } else if (!isTyping && (keyCode === ENTER || keyCode === SPACE) && manager.activeItem &&\n      !hasModifierKey(event)) {\n      event.preventDefault();\n      manager.activeItem._selectViaInteraction();\n    } else if (!isTyping && this._multiple && keyCode === A && event.ctrlKey) {\n      event.preventDefault();\n      const hasDeselectedOptions = this.options.some(opt => !opt.disabled && !opt.selected);\n\n      this.options.forEach(option => {\n        if (!option.disabled) {\n          hasDeselectedOptions ? option.select() : option.deselect();\n        }\n      });\n    } else {\n      const previouslyFocusedIndex = manager.activeItemIndex;\n\n      manager.onKeydown(event);\n\n      if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n          manager.activeItemIndex !== previouslyFocusedIndex) {\n        manager.activeItem._selectViaInteraction();\n      }\n    }\n  }\n\n  _onFocus() {\n    if (!this.disabled) {\n      this._focused = true;\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n   * \"blur\" to the panel when it opens, causing a false positive.\n   */\n  _onBlur() {\n    this._focused = false;\n\n    if (!this.disabled && !this.panelOpen) {\n      this._onTouched();\n      this._changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Callback that is invoked when the overlay panel has been attached.\n   */\n  _onAttached(): void {\n    this.overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n      this._changeDetectorRef.detectChanges();\n      this._calculateOverlayOffsetX();\n      this.panel.nativeElement.scrollTop = this._scrollTop;\n    });\n  }\n\n  /** Returns the theme to be used on the panel. */\n  _getPanelTheme(): string {\n    return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n  }\n\n  /** Whether the select has a value. */\n  get empty(): boolean {\n    return !this._selectionModel || this._selectionModel.isEmpty();\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n      this.stateChanges.next();\n    });\n  }\n\n  /**\n   * Sets the selected option based on a value. If no option can be\n   * found with the designated value, the select trigger is cleared.\n   */\n  private _setSelectionByValue(value: any | any[]): void {\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw getMatSelectNonArrayValueError();\n      }\n\n      this._selectionModel.clear();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n      this._sortValues();\n    } else {\n      this._selectionModel.clear();\n      const correspondingOption = this._selectValue(value);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what option the user interacted with last.\n      if (correspondingOption) {\n        this._keyManager.setActiveItem(correspondingOption);\n      } else if (!this.panelOpen) {\n        // Otherwise reset the highlighted option. Note that we only want to do this while\n        // closed, because doing it while open can shift the user's focus unnecessarily.\n        this._keyManager.setActiveItem(-1);\n      }\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Finds and selects and option based on its value.\n   * @returns Option that has the corresponding value.\n   */\n  private _selectValue(value: any): MatOption | undefined {\n    const correspondingOption = this.options.find((option: MatOption) => {\n      try {\n        // Treat null as a special reset value.\n        return option.value != null && this._compareWith(option.value,  value);\n      } catch (error) {\n        if (isDevMode()) {\n          // Notify developers of errors in their comparator.\n          console.warn(error);\n        }\n        return false;\n      }\n    });\n\n    if (correspondingOption) {\n      this._selectionModel.select(correspondingOption);\n    }\n\n    return correspondingOption;\n  }\n\n  /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n  private _initKeyManager() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options)\n      .withTypeAhead(this._typeaheadDebounceInterval)\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr')\n      .withAllowedModifierKeys(['shiftKey']);\n\n    this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => {\n      if (this.panelOpen) {\n        // Select the active item when tabbing away. This is consistent with how the native\n        // select behaves. Note that we only want to do this in single selection mode.\n        if (!this.multiple && this._keyManager.activeItem) {\n          this._keyManager.activeItem._selectViaInteraction();\n        }\n\n        // Restore focus to the trigger before closing. Ensures that the focus\n        // position won't be lost if the user got focus into the overlay.\n        this.focus();\n        this.close();\n      }\n    });\n\n    this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n      if (this._panelOpen && this.panel) {\n        this._scrollActiveOptionIntoView();\n      } else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n        this._keyManager.activeItem._selectViaInteraction();\n      }\n    });\n  }\n\n  /** Drops current option subscriptions and IDs and resets from scratch. */\n  private _resetOptions(): void {\n    const changedOrDestroyed = merge(this.options.changes, this._destroy);\n\n    this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe(event => {\n      this._onSelect(event.source, event.isUserInput);\n\n      if (event.isUserInput && !this.multiple && this._panelOpen) {\n        this.close();\n        this.focus();\n      }\n    });\n\n    // Listen to changes in the internal state of the options and react accordingly.\n    // Handles cases like the labels of the selected options changing.\n    merge(...this.options.map(option => option._stateChanges))\n      .pipe(takeUntil(changedOrDestroyed))\n      .subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n      });\n\n    this._setOptionIds();\n  }\n\n  /** Invoked when an option is clicked. */\n  private _onSelect(option: MatOption, isUserInput: boolean): void {\n    const wasSelected = this._selectionModel.isSelected(option);\n\n    if (option.value == null && !this._multiple) {\n      option.deselect();\n      this._selectionModel.clear();\n      this._propagateChanges(option.value);\n    } else {\n      if (wasSelected !== option.selected) {\n        option.selected ? this._selectionModel.select(option) :\n                          this._selectionModel.deselect(option);\n      }\n\n      if (isUserInput) {\n        this._keyManager.setActiveItem(option);\n      }\n\n      if (this.multiple) {\n        this._sortValues();\n\n        if (isUserInput) {\n          // In case the user selected the option with their mouse, we\n          // want to restore focus back to the trigger, in order to\n          // prevent the select keyboard controls from clashing with\n          // the ones from `mat-option`.\n          this.focus();\n        }\n      }\n    }\n\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\n      this._propagateChanges();\n    }\n\n    this.stateChanges.next();\n  }\n\n  /** Sorts the selected values in the selected based on their order in the panel. */\n  private _sortValues() {\n    if (this.multiple) {\n      const options = this.options.toArray();\n\n      this._selectionModel.sort((a, b) => {\n        return this.sortComparator ? this.sortComparator(a, b, options) :\n                                     options.indexOf(a) - options.indexOf(b);\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (this.multiple) {\n      valueToEmit = (this.selected as MatOption[]).map(option => option.value);\n    } else {\n      valueToEmit = this.selected ? (this.selected as MatOption).value : fallbackValue;\n    }\n\n    this._value = valueToEmit;\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this.selectionChange.emit(new MatSelectChange(this, valueToEmit));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Records option IDs to pass to the aria-owns property. */\n  private _setOptionIds() {\n    this._optionIds = this.options.map(option => option.id).join(' ');\n  }\n\n  /**\n   * Highlights the selected item. If no option is selected, it will highlight\n   * the first item instead.\n   */\n  private _highlightCorrectOption(): void {\n    if (this._keyManager) {\n      if (this.empty) {\n        this._keyManager.setFirstItemActive();\n      } else {\n        this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n      }\n    }\n  }\n\n  /** Scrolls the active option into view. */\n  private _scrollActiveOptionIntoView(): void {\n    const activeOptionIndex = this._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.options,\n        this.optionGroups);\n\n    this.panel.nativeElement.scrollTop = _getOptionScrollPosition(\n      activeOptionIndex + labelCount,\n      this._getItemHeight(),\n      this.panel.nativeElement.scrollTop,\n      SELECT_PANEL_MAX_HEIGHT\n    );\n  }\n\n  /** Focuses the select element. */\n  focus(options?: FocusOptions): void {\n    this._elementRef.nativeElement.focus(options);\n  }\n\n  /** Gets the index of the provided option in the option list. */\n  private _getOptionIndex(option: MatOption): number | undefined {\n    return this.options.reduce((result: number | undefined, current: MatOption, index: number) => {\n      if (result !== undefined) {\n        return result;\n      }\n\n      return option === current ? index : undefined;\n    }, undefined);\n  }\n\n  /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n  private _calculateOverlayPosition(): void {\n    const itemHeight = this._getItemHeight();\n    const items = this._getItemCount();\n    const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const scrollContainerHeight = items * itemHeight;\n\n    // The farthest the panel can be scrolled before it hits the bottom\n    const maxScroll = scrollContainerHeight - panelHeight;\n\n    // If no value is selected we open the popup to the first item.\n    let selectedOptionOffset =\n        this.empty ? 0 : this._getOptionIndex(this._selectionModel.selected[0])!;\n\n    selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options,\n        this.optionGroups);\n\n    // We must maintain a scroll buffer so the selected option will be scrolled to the\n    // center of the overlay panel rather than the top.\n    const scrollBuffer = panelHeight / 2;\n    this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n    this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n\n    this._checkOverlayWithinViewport(maxScroll);\n  }\n\n  /**\n   * Calculates the scroll position of the select's overlay panel.\n   *\n   * Attempts to center the selected option in the panel. If the option is\n   * too high or too low in the panel to be scrolled to the center, it clamps the\n   * scroll position to the min or max scroll positions respectively.\n   */\n  _calculateOverlayScroll(selectedIndex: number, scrollBuffer: number,\n                          maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n    const halfOptionHeight = itemHeight / 2;\n\n    // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n    // scroll container, then subtracts the scroll buffer to scroll the option down to\n    // the center of the overlay panel. Half the option height must be re-added to the\n    // scrollTop so the option is centered based on its middle, not its top edge.\n    const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n    return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n  }\n\n  /** Returns the aria-label of the select component. */\n  _getAriaLabel(): string | null {\n    // If an ariaLabelledby value has been set by the consumer, the select should not overwrite the\n    // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n    return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n  }\n\n  /** Returns the aria-labelledby of the select component. */\n  _getAriaLabelledby(): string | null {\n    if (this.ariaLabelledby) {\n      return this.ariaLabelledby;\n    }\n\n    // Note: we use `_getAriaLabel` here, because we want to check whether there's a\n    // computed label. `this.ariaLabel` is only the user-specified label.\n    if (!this._parentFormField || !this._parentFormField._hasFloatingLabel() ||\n      this._getAriaLabel()) {\n      return null;\n    }\n\n    return this._parentFormField._labelId || null;\n  }\n\n  /** Determines the `aria-activedescendant` to be set on the host. */\n  _getAriaActiveDescendant(): string | null {\n    if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n      return this._keyManager.activeItem.id;\n    }\n\n    return null;\n  }\n\n  /**\n   * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text when\n   * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n   * can't be calculated until the panel has been attached, because we need to know the\n   * content width in order to constrain the panel within the viewport.\n   */\n  private _calculateOverlayOffsetX(): void {\n    const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n    const viewportSize = this._viewportRuler.getViewportSize();\n    const isRtl = this._isRtl();\n    const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n                                         SELECT_PANEL_PADDING_X * 2;\n    let offsetX: number;\n\n    // Adjust the offset, depending on the option padding.\n    if (this.multiple) {\n      offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n    } else {\n      let selected = this._selectionModel.selected[0] || this.options.first;\n      offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n    }\n\n    // Invert the offset in LTR.\n    if (!isRtl) {\n      offsetX *= -1;\n    }\n\n    // Determine how much the select overflows on each side.\n    const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n    const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n                          + (isRtl ? 0 : paddingWidth);\n\n    // If the element overflows on either side, reduce the offset to allow it to fit.\n    if (leftOverflow > 0) {\n      offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    } else if (rightOverflow > 0) {\n      offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    }\n\n    // Set the offset directly in order to avoid having to go through change detection and\n    // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n    // blurry content in some browsers.\n    this.overlayDir.offsetX = Math.round(offsetX);\n    this.overlayDir.overlayRef.updatePosition();\n  }\n\n  /**\n   * Calculates the y-offset of the select's overlay panel in relation to the\n   * top start corner of the trigger. It has to be adjusted in order for the\n   * selected option to be aligned over the trigger when the panel opens.\n   */\n  private _calculateOverlayOffsetY(selectedIndex: number, scrollBuffer: number,\n                                  maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n    let optionOffsetFromPanelTop: number;\n\n    // Disable offset if requested by user by returning 0 as value to offset\n    if (this._disableOptionCentering) {\n      return 0;\n    }\n\n    if (this._scrollTop === 0) {\n      optionOffsetFromPanelTop = selectedIndex * itemHeight;\n    } else if (this._scrollTop === maxScroll) {\n      const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n      const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n\n      // The first item is partially out of the viewport. Therefore we need to calculate what\n      // portion of it is shown in the viewport and account for it in our offset.\n      let partialItemHeight =\n          itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\n\n      // Because the panel height is longer than the height of the options alone,\n      // there is always extra padding at the top or bottom of the panel. When\n      // scrolled to the very bottom, this padding is at the top of the panel and\n      // must be added to the offset.\n      optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n    } else {\n      // If the option was scrolled to the middle of the panel using a scroll buffer,\n      // its offset will be the scroll buffer minus the half height that was added to\n      // center it.\n      optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n    }\n\n    // The final offset is the option's offset from the top, adjusted for the height difference,\n    // multiplied by -1 to ensure that the overlay moves in the correct direction up the page.\n    // The value is rounded to prevent some browsers from blurring the content.\n    return Math.round(optionOffsetFromPanelTop * -1 - optionHeightAdjustment);\n  }\n\n  /**\n   * Checks that the attempted overlay position will fit within the viewport.\n   * If it will not fit, tries to adjust the scroll position and the associated\n   * y-offset so the panel can open fully on-screen. If it still won't fit,\n   * sets the offset back to 0 to allow the fallback position to take over.\n   */\n  private _checkOverlayWithinViewport(maxScroll: number): void {\n    const itemHeight = this._getItemHeight();\n    const viewportSize = this._viewportRuler.getViewportSize();\n\n    const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n    const bottomSpaceAvailable =\n        viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n    const panelHeightTop = Math.abs(this._offsetY);\n    const totalPanelHeight =\n        Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n\n    if (panelHeightBottom > bottomSpaceAvailable) {\n      this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n    } else if (panelHeightTop > topSpaceAvailable) {\n     this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n    } else {\n      this._transformOrigin = this._getOriginBasedOnOption();\n    }\n  }\n\n  /** Adjusts the overlay panel up to fit in the viewport. */\n  private _adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n\n    // Scrolls the panel up by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel up into the viewport.\n    this._scrollTop -= distanceBelowViewport;\n    this._offsetY -= distanceBelowViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very top, it won't be able to fit the panel\n    // by scrolling, so set the offset to 0 to allow the fallback position to take\n    // effect.\n    if (this._scrollTop <= 0) {\n      this._scrollTop = 0;\n      this._offsetY = 0;\n      this._transformOrigin = `50% bottom 0px`;\n    }\n  }\n\n  /** Adjusts the overlay panel down to fit in the viewport. */\n  private _adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number,\n                           maxScroll: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n\n    // Scrolls the panel down by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel down into the viewport.\n    this._scrollTop += distanceAboveViewport;\n    this._offsetY += distanceAboveViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very bottom, it won't be able to fit the\n    // panel by scrolling, so set the offset to 0 to allow the fallback position\n    // to take effect.\n    if (this._scrollTop >= maxScroll) {\n      this._scrollTop = maxScroll;\n      this._offsetY = 0;\n      this._transformOrigin = `50% top 0px`;\n      return;\n    }\n  }\n\n  /** Sets the transform origin point based on the selected option. */\n  private _getOriginBasedOnOption(): string {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n    return `50% ${originY}px 0px`;\n  }\n\n  /** Calculates the amount of items in the select. This includes options and group labels. */\n  private _getItemCount(): number {\n    return this.options.length + this.optionGroups.length;\n  }\n\n  /** Calculates the height of the select's options. */\n  private _getItemHeight(): number {\n    return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    this.focus();\n    this.open();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    return this._panelOpen || !this.empty;\n  }\n\n  static ngAcceptInputType_required: BooleanInput;\n  static ngAcceptInputType_multiple: BooleanInput;\n  static ngAcceptInputType_disableOptionCentering: BooleanInput;\n  static ngAcceptInputType_typeaheadDebounceInterval: NumberInput;\n  static ngAcceptInputType_disabled: BooleanInput;\n  static ngAcceptInputType_disableRipple: BooleanInput;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatOptionModule} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {CdkScrollableModule} from '@angular/cdk/scrolling';\nimport {MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MatSelect, MatSelectTrigger} from './select';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatOptionModule,\n    MatCommonModule,\n  ],\n  exports: [\n    CdkScrollableModule,\n    MatFormFieldModule,\n    MatSelect,\n    MatSelectTrigger,\n    MatOptionModule,\n    MatCommonModule\n  ],\n  declarations: [MatSelect, MatSelectTrigger],\n  providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER]\n})\nexport class MatSelectModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './select-module';\nexport * from './select';\nexport * from './select-animations';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]},"metadata":{},"sourceType":"module"}